/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package cz.csob.ency.cds.demands.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import cz.csob.ency.cds.demands.model.CdsDemand;
import cz.csob.ency.cds.demands.model.CdsDemandModel;
import cz.csob.ency.cds.demands.model.CdsDemandVersion;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CdsDemand service. Represents a row in the &quot;CdsDemands_CdsDemand&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CdsDemandModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CdsDemandImpl}.
 * </p>
 *
 * @author Miroslav Čermák
 * @see CdsDemandImpl
 * @generated
 */
@JSON(strict = true)
public class CdsDemandModelImpl
	extends BaseModelImpl<CdsDemand> implements CdsDemandModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cds demand model instance should use the <code>CdsDemand</code> interface instead.
	 */
	public static final String TABLE_NAME = "CdsDemands_CdsDemand";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"uuid_", Types.VARCHAR},
		{"headId", Types.BIGINT}, {"head", Types.BOOLEAN},
		{"demandId", Types.BIGINT}, {"title", Types.VARCHAR},
		{"description", Types.VARCHAR}, {"type_", Types.INTEGER},
		{"priority", Types.INTEGER}, {"requestedDelivery", Types.TIMESTAMP},
		{"isGDPR", Types.BOOLEAN}, {"gdprInfo", Types.VARCHAR},
		{"fiveTracks", Types.VARCHAR}, {"requestorId", Types.BIGINT},
		{"requestorName", Types.VARCHAR}, {"requestedForId", Types.BIGINT},
		{"requestedForName", Types.VARCHAR}, {"contactId", Types.BIGINT},
		{"contactName", Types.VARCHAR}, {"domainId", Types.BIGINT},
		{"domainName", Types.VARCHAR}, {"banId", Types.BIGINT},
		{"banName", Types.VARCHAR}, {"spocId", Types.BIGINT},
		{"spocName", Types.VARCHAR}, {"usReasoning", Types.VARCHAR},
		{"usFrequencyOut", Types.INTEGER}, {"usAccessDPM", Types.BOOLEAN},
		{"usFolderDPM", Types.VARCHAR}, {"usCreateFolderDPM", Types.BOOLEAN},
		{"usGestorFolderDPMId", Types.BIGINT},
		{"usGestorFolderDPMName", Types.VARCHAR},
		{"usDPMNotificationMail", Types.VARCHAR}, {"bioeId", Types.VARCHAR},
		{"bioeStateId", Types.INTEGER}, {"bioeStateName", Types.VARCHAR},
		{"workEstimate", Types.DOUBLE}, {"acceptedWorkEstimate", Types.DOUBLE},
		{"expectedDelivery", Types.TIMESTAMP},
		{"acceptedDelivery", Types.TIMESTAMP}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"urlTitle", Types.VARCHAR},
		{"state_", Types.VARCHAR}, {"stateByUserId", Types.BIGINT},
		{"stateByUserName", Types.VARCHAR}, {"stateDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("headId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("head", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("demandId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("type_", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("priority", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("requestedDelivery", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("isGDPR", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("gdprInfo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fiveTracks", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("requestorId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("requestorName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("requestedForId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("requestedForName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contactId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("contactName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("domainId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("domainName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("banId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("banName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("spocId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("spocName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("usReasoning", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("usFrequencyOut", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("usAccessDPM", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("usFolderDPM", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("usCreateFolderDPM", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("usGestorFolderDPMId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("usGestorFolderDPMName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("usDPMNotificationMail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bioeId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bioeStateId", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("bioeStateName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("workEstimate", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("acceptedWorkEstimate", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("expectedDelivery", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("acceptedDelivery", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("urlTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("state_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stateByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("stateByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stateDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table CdsDemands_CdsDemand (mvccVersion LONG default 0 not null,uuid_ VARCHAR(75) null,headId LONG,head BOOLEAN,demandId LONG not null primary key,title VARCHAR(500) null,description TEXT null,type_ INTEGER,priority INTEGER,requestedDelivery DATE null,isGDPR BOOLEAN,gdprInfo VARCHAR(512) null,fiveTracks VARCHAR(512) null,requestorId LONG,requestorName VARCHAR(256) null,requestedForId LONG,requestedForName VARCHAR(256) null,contactId LONG,contactName VARCHAR(256) null,domainId LONG,domainName VARCHAR(256) null,banId LONG,banName VARCHAR(256) null,spocId LONG,spocName VARCHAR(256) null,usReasoning VARCHAR(512) null,usFrequencyOut INTEGER,usAccessDPM BOOLEAN,usFolderDPM VARCHAR(256) null,usCreateFolderDPM BOOLEAN,usGestorFolderDPMId LONG,usGestorFolderDPMName VARCHAR(256) null,usDPMNotificationMail VARCHAR(256) null,bioeId VARCHAR(20) null,bioeStateId INTEGER,bioeStateName VARCHAR(75) null,workEstimate DOUBLE,acceptedWorkEstimate DOUBLE,expectedDelivery DATE null,acceptedDelivery DATE null,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(256) null,createDate DATE null,modifiedDate DATE null,urlTitle VARCHAR(256) null,state_ VARCHAR(75) null,stateByUserId LONG,stateByUserName VARCHAR(75) null,stateDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table CdsDemands_CdsDemand";

	public static final String ORDER_BY_JPQL =
		" ORDER BY cdsDemand.demandId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY CdsDemands_CdsDemand.demandId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DOMAINID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long HEAD_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long HEADID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DEMANDID_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CdsDemandModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _demandId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDemandId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _demandId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CdsDemand.class;
	}

	@Override
	public String getModelClassName() {
		return CdsDemand.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CdsDemand, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CdsDemand, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CdsDemand, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((CdsDemand)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CdsDemand, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CdsDemand, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CdsDemand)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CdsDemand, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CdsDemand, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<CdsDemand, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<CdsDemand, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<CdsDemand, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<CdsDemand, Object>>();
		Map<String, BiConsumer<CdsDemand, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<CdsDemand, ?>>();

		attributeGetterFunctions.put("mvccVersion", CdsDemand::getMvccVersion);
		attributeSetterBiConsumers.put(
			"mvccVersion",
			(BiConsumer<CdsDemand, Long>)CdsDemand::setMvccVersion);
		attributeGetterFunctions.put("uuid", CdsDemand::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<CdsDemand, String>)CdsDemand::setUuid);
		attributeGetterFunctions.put("headId", CdsDemand::getHeadId);
		attributeSetterBiConsumers.put(
			"headId", (BiConsumer<CdsDemand, Long>)CdsDemand::setHeadId);
		attributeGetterFunctions.put("demandId", CdsDemand::getDemandId);
		attributeSetterBiConsumers.put(
			"demandId", (BiConsumer<CdsDemand, Long>)CdsDemand::setDemandId);
		attributeGetterFunctions.put("title", CdsDemand::getTitle);
		attributeSetterBiConsumers.put(
			"title", (BiConsumer<CdsDemand, String>)CdsDemand::setTitle);
		attributeGetterFunctions.put("description", CdsDemand::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<CdsDemand, String>)CdsDemand::setDescription);
		attributeGetterFunctions.put("type", CdsDemand::getType);
		attributeSetterBiConsumers.put(
			"type", (BiConsumer<CdsDemand, Integer>)CdsDemand::setType);
		attributeGetterFunctions.put("priority", CdsDemand::getPriority);
		attributeSetterBiConsumers.put(
			"priority", (BiConsumer<CdsDemand, Integer>)CdsDemand::setPriority);
		attributeGetterFunctions.put(
			"requestedDelivery", CdsDemand::getRequestedDelivery);
		attributeSetterBiConsumers.put(
			"requestedDelivery",
			(BiConsumer<CdsDemand, Date>)CdsDemand::setRequestedDelivery);
		attributeGetterFunctions.put("isGDPR", CdsDemand::getIsGDPR);
		attributeSetterBiConsumers.put(
			"isGDPR", (BiConsumer<CdsDemand, Boolean>)CdsDemand::setIsGDPR);
		attributeGetterFunctions.put("gdprInfo", CdsDemand::getGdprInfo);
		attributeSetterBiConsumers.put(
			"gdprInfo", (BiConsumer<CdsDemand, String>)CdsDemand::setGdprInfo);
		attributeGetterFunctions.put("fiveTracks", CdsDemand::getFiveTracks);
		attributeSetterBiConsumers.put(
			"fiveTracks",
			(BiConsumer<CdsDemand, String>)CdsDemand::setFiveTracks);
		attributeGetterFunctions.put("requestorId", CdsDemand::getRequestorId);
		attributeSetterBiConsumers.put(
			"requestorId",
			(BiConsumer<CdsDemand, Long>)CdsDemand::setRequestorId);
		attributeGetterFunctions.put(
			"requestorName", CdsDemand::getRequestorName);
		attributeSetterBiConsumers.put(
			"requestorName",
			(BiConsumer<CdsDemand, String>)CdsDemand::setRequestorName);
		attributeGetterFunctions.put(
			"requestedForId", CdsDemand::getRequestedForId);
		attributeSetterBiConsumers.put(
			"requestedForId",
			(BiConsumer<CdsDemand, Long>)CdsDemand::setRequestedForId);
		attributeGetterFunctions.put(
			"requestedForName", CdsDemand::getRequestedForName);
		attributeSetterBiConsumers.put(
			"requestedForName",
			(BiConsumer<CdsDemand, String>)CdsDemand::setRequestedForName);
		attributeGetterFunctions.put("contactId", CdsDemand::getContactId);
		attributeSetterBiConsumers.put(
			"contactId", (BiConsumer<CdsDemand, Long>)CdsDemand::setContactId);
		attributeGetterFunctions.put("contactName", CdsDemand::getContactName);
		attributeSetterBiConsumers.put(
			"contactName",
			(BiConsumer<CdsDemand, String>)CdsDemand::setContactName);
		attributeGetterFunctions.put("domainId", CdsDemand::getDomainId);
		attributeSetterBiConsumers.put(
			"domainId", (BiConsumer<CdsDemand, Long>)CdsDemand::setDomainId);
		attributeGetterFunctions.put("domainName", CdsDemand::getDomainName);
		attributeSetterBiConsumers.put(
			"domainName",
			(BiConsumer<CdsDemand, String>)CdsDemand::setDomainName);
		attributeGetterFunctions.put("banId", CdsDemand::getBanId);
		attributeSetterBiConsumers.put(
			"banId", (BiConsumer<CdsDemand, Long>)CdsDemand::setBanId);
		attributeGetterFunctions.put("banName", CdsDemand::getBanName);
		attributeSetterBiConsumers.put(
			"banName", (BiConsumer<CdsDemand, String>)CdsDemand::setBanName);
		attributeGetterFunctions.put("spocId", CdsDemand::getSpocId);
		attributeSetterBiConsumers.put(
			"spocId", (BiConsumer<CdsDemand, Long>)CdsDemand::setSpocId);
		attributeGetterFunctions.put("spocName", CdsDemand::getSpocName);
		attributeSetterBiConsumers.put(
			"spocName", (BiConsumer<CdsDemand, String>)CdsDemand::setSpocName);
		attributeGetterFunctions.put("usReasoning", CdsDemand::getUsReasoning);
		attributeSetterBiConsumers.put(
			"usReasoning",
			(BiConsumer<CdsDemand, String>)CdsDemand::setUsReasoning);
		attributeGetterFunctions.put(
			"usFrequencyOut", CdsDemand::getUsFrequencyOut);
		attributeSetterBiConsumers.put(
			"usFrequencyOut",
			(BiConsumer<CdsDemand, Integer>)CdsDemand::setUsFrequencyOut);
		attributeGetterFunctions.put("usAccessDPM", CdsDemand::getUsAccessDPM);
		attributeSetterBiConsumers.put(
			"usAccessDPM",
			(BiConsumer<CdsDemand, Boolean>)CdsDemand::setUsAccessDPM);
		attributeGetterFunctions.put("usFolderDPM", CdsDemand::getUsFolderDPM);
		attributeSetterBiConsumers.put(
			"usFolderDPM",
			(BiConsumer<CdsDemand, String>)CdsDemand::setUsFolderDPM);
		attributeGetterFunctions.put(
			"usCreateFolderDPM", CdsDemand::getUsCreateFolderDPM);
		attributeSetterBiConsumers.put(
			"usCreateFolderDPM",
			(BiConsumer<CdsDemand, Boolean>)CdsDemand::setUsCreateFolderDPM);
		attributeGetterFunctions.put(
			"usGestorFolderDPMId", CdsDemand::getUsGestorFolderDPMId);
		attributeSetterBiConsumers.put(
			"usGestorFolderDPMId",
			(BiConsumer<CdsDemand, Long>)CdsDemand::setUsGestorFolderDPMId);
		attributeGetterFunctions.put(
			"usGestorFolderDPMName", CdsDemand::getUsGestorFolderDPMName);
		attributeSetterBiConsumers.put(
			"usGestorFolderDPMName",
			(BiConsumer<CdsDemand, String>)CdsDemand::setUsGestorFolderDPMName);
		attributeGetterFunctions.put(
			"usDPMNotificationMail", CdsDemand::getUsDPMNotificationMail);
		attributeSetterBiConsumers.put(
			"usDPMNotificationMail",
			(BiConsumer<CdsDemand, String>)CdsDemand::setUsDPMNotificationMail);
		attributeGetterFunctions.put("bioeId", CdsDemand::getBioeId);
		attributeSetterBiConsumers.put(
			"bioeId", (BiConsumer<CdsDemand, String>)CdsDemand::setBioeId);
		attributeGetterFunctions.put("bioeStateId", CdsDemand::getBioeStateId);
		attributeSetterBiConsumers.put(
			"bioeStateId",
			(BiConsumer<CdsDemand, Short>)CdsDemand::setBioeStateId);
		attributeGetterFunctions.put(
			"bioeStateName", CdsDemand::getBioeStateName);
		attributeSetterBiConsumers.put(
			"bioeStateName",
			(BiConsumer<CdsDemand, String>)CdsDemand::setBioeStateName);
		attributeGetterFunctions.put(
			"workEstimate", CdsDemand::getWorkEstimate);
		attributeSetterBiConsumers.put(
			"workEstimate",
			(BiConsumer<CdsDemand, Double>)CdsDemand::setWorkEstimate);
		attributeGetterFunctions.put(
			"acceptedWorkEstimate", CdsDemand::getAcceptedWorkEstimate);
		attributeSetterBiConsumers.put(
			"acceptedWorkEstimate",
			(BiConsumer<CdsDemand, Double>)CdsDemand::setAcceptedWorkEstimate);
		attributeGetterFunctions.put(
			"expectedDelivery", CdsDemand::getExpectedDelivery);
		attributeSetterBiConsumers.put(
			"expectedDelivery",
			(BiConsumer<CdsDemand, Date>)CdsDemand::setExpectedDelivery);
		attributeGetterFunctions.put(
			"acceptedDelivery", CdsDemand::getAcceptedDelivery);
		attributeSetterBiConsumers.put(
			"acceptedDelivery",
			(BiConsumer<CdsDemand, Date>)CdsDemand::setAcceptedDelivery);
		attributeGetterFunctions.put("groupId", CdsDemand::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<CdsDemand, Long>)CdsDemand::setGroupId);
		attributeGetterFunctions.put("companyId", CdsDemand::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<CdsDemand, Long>)CdsDemand::setCompanyId);
		attributeGetterFunctions.put("userId", CdsDemand::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<CdsDemand, Long>)CdsDemand::setUserId);
		attributeGetterFunctions.put("userName", CdsDemand::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<CdsDemand, String>)CdsDemand::setUserName);
		attributeGetterFunctions.put("createDate", CdsDemand::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<CdsDemand, Date>)CdsDemand::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", CdsDemand::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<CdsDemand, Date>)CdsDemand::setModifiedDate);
		attributeGetterFunctions.put("urlTitle", CdsDemand::getUrlTitle);
		attributeSetterBiConsumers.put(
			"urlTitle", (BiConsumer<CdsDemand, String>)CdsDemand::setUrlTitle);
		attributeGetterFunctions.put("state", CdsDemand::getState);
		attributeSetterBiConsumers.put(
			"state", (BiConsumer<CdsDemand, String>)CdsDemand::setState);
		attributeGetterFunctions.put(
			"stateByUserId", CdsDemand::getStateByUserId);
		attributeSetterBiConsumers.put(
			"stateByUserId",
			(BiConsumer<CdsDemand, Long>)CdsDemand::setStateByUserId);
		attributeGetterFunctions.put(
			"stateByUserName", CdsDemand::getStateByUserName);
		attributeSetterBiConsumers.put(
			"stateByUserName",
			(BiConsumer<CdsDemand, String>)CdsDemand::setStateByUserName);
		attributeGetterFunctions.put("stateDate", CdsDemand::getStateDate);
		attributeSetterBiConsumers.put(
			"stateDate", (BiConsumer<CdsDemand, Date>)CdsDemand::setStateDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public void populateVersionModel(CdsDemandVersion cdsDemandVersion) {
		cdsDemandVersion.setUuid(getUuid());
		cdsDemandVersion.setTitle(getTitle());
		cdsDemandVersion.setDescription(getDescription());
		cdsDemandVersion.setType(getType());
		cdsDemandVersion.setPriority(getPriority());
		cdsDemandVersion.setRequestedDelivery(getRequestedDelivery());
		cdsDemandVersion.setIsGDPR(getIsGDPR());
		cdsDemandVersion.setGdprInfo(getGdprInfo());
		cdsDemandVersion.setFiveTracks(getFiveTracks());
		cdsDemandVersion.setRequestorId(getRequestorId());
		cdsDemandVersion.setRequestorName(getRequestorName());
		cdsDemandVersion.setRequestedForId(getRequestedForId());
		cdsDemandVersion.setRequestedForName(getRequestedForName());
		cdsDemandVersion.setContactId(getContactId());
		cdsDemandVersion.setContactName(getContactName());
		cdsDemandVersion.setDomainId(getDomainId());
		cdsDemandVersion.setDomainName(getDomainName());
		cdsDemandVersion.setBanId(getBanId());
		cdsDemandVersion.setBanName(getBanName());
		cdsDemandVersion.setSpocId(getSpocId());
		cdsDemandVersion.setSpocName(getSpocName());
		cdsDemandVersion.setUsReasoning(getUsReasoning());
		cdsDemandVersion.setUsFrequencyOut(getUsFrequencyOut());
		cdsDemandVersion.setUsAccessDPM(getUsAccessDPM());
		cdsDemandVersion.setUsFolderDPM(getUsFolderDPM());
		cdsDemandVersion.setUsCreateFolderDPM(getUsCreateFolderDPM());
		cdsDemandVersion.setUsGestorFolderDPMId(getUsGestorFolderDPMId());
		cdsDemandVersion.setUsGestorFolderDPMName(getUsGestorFolderDPMName());
		cdsDemandVersion.setUsDPMNotificationMail(getUsDPMNotificationMail());
		cdsDemandVersion.setBioeId(getBioeId());
		cdsDemandVersion.setBioeStateId(getBioeStateId());
		cdsDemandVersion.setBioeStateName(getBioeStateName());
		cdsDemandVersion.setWorkEstimate(getWorkEstimate());
		cdsDemandVersion.setAcceptedWorkEstimate(getAcceptedWorkEstimate());
		cdsDemandVersion.setExpectedDelivery(getExpectedDelivery());
		cdsDemandVersion.setAcceptedDelivery(getAcceptedDelivery());
		cdsDemandVersion.setGroupId(getGroupId());
		cdsDemandVersion.setCompanyId(getCompanyId());
		cdsDemandVersion.setUserId(getUserId());
		cdsDemandVersion.setUserName(getUserName());
		cdsDemandVersion.setCreateDate(getCreateDate());
		cdsDemandVersion.setModifiedDate(getModifiedDate());
		cdsDemandVersion.setUrlTitle(getUrlTitle());
		cdsDemandVersion.setState(getState());
		cdsDemandVersion.setStateByUserId(getStateByUserId());
		cdsDemandVersion.setStateByUserName(getStateByUserName());
		cdsDemandVersion.setStateDate(getStateDate());
	}

	@JSON
	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mvccVersion = mvccVersion;
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getHeadId() {
		return _headId;
	}

	@Override
	public void setHeadId(long headId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		if (headId >= 0) {
			setHead(false);
		}
		else {
			setHead(true);
		}

		_headId = headId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalHeadId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("headId"));
	}

	@JSON(include = false)
	public boolean getHead() {
		return _head;
	}

	@Override
	public boolean isHead() {
		return _head;
	}

	public void setHead(boolean head) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_head = head;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public boolean getOriginalHead() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("head"));
	}

	@JSON
	@Override
	public long getDemandId() {
		return _demandId;
	}

	@Override
	public void setDemandId(long demandId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_demandId = demandId;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_title = title;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@JSON
	@Override
	public int getType() {
		return _type;
	}

	@Override
	public void setType(int type) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_type = type;
	}

	@JSON
	@Override
	public int getPriority() {
		return _priority;
	}

	@Override
	public void setPriority(int priority) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_priority = priority;
	}

	@JSON
	@Override
	public Date getRequestedDelivery() {
		return _requestedDelivery;
	}

	@Override
	public void setRequestedDelivery(Date requestedDelivery) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requestedDelivery = requestedDelivery;
	}

	@JSON
	@Override
	public boolean getIsGDPR() {
		return _isGDPR;
	}

	@JSON
	@Override
	public boolean isIsGDPR() {
		return _isGDPR;
	}

	@Override
	public void setIsGDPR(boolean isGDPR) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isGDPR = isGDPR;
	}

	@JSON
	@Override
	public String getGdprInfo() {
		if (_gdprInfo == null) {
			return "";
		}
		else {
			return _gdprInfo;
		}
	}

	@Override
	public void setGdprInfo(String gdprInfo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gdprInfo = gdprInfo;
	}

	@JSON
	@Override
	public String getFiveTracks() {
		if (_fiveTracks == null) {
			return "";
		}
		else {
			return _fiveTracks;
		}
	}

	@Override
	public void setFiveTracks(String fiveTracks) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fiveTracks = fiveTracks;
	}

	@JSON
	@Override
	public long getRequestorId() {
		return _requestorId;
	}

	@Override
	public void setRequestorId(long requestorId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requestorId = requestorId;
	}

	@JSON
	@Override
	public String getRequestorName() {
		if (_requestorName == null) {
			return "";
		}
		else {
			return _requestorName;
		}
	}

	@Override
	public void setRequestorName(String requestorName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requestorName = requestorName;
	}

	@JSON
	@Override
	public long getRequestedForId() {
		return _requestedForId;
	}

	@Override
	public void setRequestedForId(long requestedForId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requestedForId = requestedForId;
	}

	@JSON
	@Override
	public String getRequestedForName() {
		if (_requestedForName == null) {
			return "";
		}
		else {
			return _requestedForName;
		}
	}

	@Override
	public void setRequestedForName(String requestedForName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requestedForName = requestedForName;
	}

	@JSON
	@Override
	public long getContactId() {
		return _contactId;
	}

	@Override
	public void setContactId(long contactId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contactId = contactId;
	}

	@JSON
	@Override
	public String getContactName() {
		if (_contactName == null) {
			return "";
		}
		else {
			return _contactName;
		}
	}

	@Override
	public void setContactName(String contactName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contactName = contactName;
	}

	@JSON
	@Override
	public long getDomainId() {
		return _domainId;
	}

	@Override
	public void setDomainId(long domainId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_domainId = domainId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalDomainId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("domainId"));
	}

	@JSON
	@Override
	public String getDomainName() {
		if (_domainName == null) {
			return "";
		}
		else {
			return _domainName;
		}
	}

	@Override
	public void setDomainName(String domainName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_domainName = domainName;
	}

	@JSON
	@Override
	public long getBanId() {
		return _banId;
	}

	@Override
	public void setBanId(long banId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_banId = banId;
	}

	@JSON
	@Override
	public String getBanName() {
		if (_banName == null) {
			return "";
		}
		else {
			return _banName;
		}
	}

	@Override
	public void setBanName(String banName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_banName = banName;
	}

	@JSON
	@Override
	public long getSpocId() {
		return _spocId;
	}

	@Override
	public void setSpocId(long spocId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_spocId = spocId;
	}

	@JSON
	@Override
	public String getSpocName() {
		if (_spocName == null) {
			return "";
		}
		else {
			return _spocName;
		}
	}

	@Override
	public void setSpocName(String spocName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_spocName = spocName;
	}

	@JSON
	@Override
	public String getUsReasoning() {
		if (_usReasoning == null) {
			return "";
		}
		else {
			return _usReasoning;
		}
	}

	@Override
	public void setUsReasoning(String usReasoning) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_usReasoning = usReasoning;
	}

	@JSON
	@Override
	public int getUsFrequencyOut() {
		return _usFrequencyOut;
	}

	@Override
	public void setUsFrequencyOut(int usFrequencyOut) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_usFrequencyOut = usFrequencyOut;
	}

	@JSON
	@Override
	public boolean getUsAccessDPM() {
		return _usAccessDPM;
	}

	@JSON
	@Override
	public boolean isUsAccessDPM() {
		return _usAccessDPM;
	}

	@Override
	public void setUsAccessDPM(boolean usAccessDPM) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_usAccessDPM = usAccessDPM;
	}

	@JSON
	@Override
	public String getUsFolderDPM() {
		if (_usFolderDPM == null) {
			return "";
		}
		else {
			return _usFolderDPM;
		}
	}

	@Override
	public void setUsFolderDPM(String usFolderDPM) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_usFolderDPM = usFolderDPM;
	}

	@JSON
	@Override
	public boolean getUsCreateFolderDPM() {
		return _usCreateFolderDPM;
	}

	@JSON
	@Override
	public boolean isUsCreateFolderDPM() {
		return _usCreateFolderDPM;
	}

	@Override
	public void setUsCreateFolderDPM(boolean usCreateFolderDPM) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_usCreateFolderDPM = usCreateFolderDPM;
	}

	@JSON
	@Override
	public long getUsGestorFolderDPMId() {
		return _usGestorFolderDPMId;
	}

	@Override
	public void setUsGestorFolderDPMId(long usGestorFolderDPMId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_usGestorFolderDPMId = usGestorFolderDPMId;
	}

	@JSON
	@Override
	public String getUsGestorFolderDPMName() {
		if (_usGestorFolderDPMName == null) {
			return "";
		}
		else {
			return _usGestorFolderDPMName;
		}
	}

	@Override
	public void setUsGestorFolderDPMName(String usGestorFolderDPMName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_usGestorFolderDPMName = usGestorFolderDPMName;
	}

	@JSON
	@Override
	public String getUsDPMNotificationMail() {
		if (_usDPMNotificationMail == null) {
			return "";
		}
		else {
			return _usDPMNotificationMail;
		}
	}

	@Override
	public void setUsDPMNotificationMail(String usDPMNotificationMail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_usDPMNotificationMail = usDPMNotificationMail;
	}

	@JSON
	@Override
	public String getBioeId() {
		if (_bioeId == null) {
			return "";
		}
		else {
			return _bioeId;
		}
	}

	@Override
	public void setBioeId(String bioeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bioeId = bioeId;
	}

	@JSON
	@Override
	public short getBioeStateId() {
		return _bioeStateId;
	}

	@Override
	public void setBioeStateId(short bioeStateId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bioeStateId = bioeStateId;
	}

	@JSON
	@Override
	public String getBioeStateName() {
		if (_bioeStateName == null) {
			return "";
		}
		else {
			return _bioeStateName;
		}
	}

	@Override
	public void setBioeStateName(String bioeStateName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bioeStateName = bioeStateName;
	}

	@JSON
	@Override
	public double getWorkEstimate() {
		return _workEstimate;
	}

	@Override
	public void setWorkEstimate(double workEstimate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_workEstimate = workEstimate;
	}

	@JSON
	@Override
	public double getAcceptedWorkEstimate() {
		return _acceptedWorkEstimate;
	}

	@Override
	public void setAcceptedWorkEstimate(double acceptedWorkEstimate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_acceptedWorkEstimate = acceptedWorkEstimate;
	}

	@JSON
	@Override
	public Date getExpectedDelivery() {
		return _expectedDelivery;
	}

	@Override
	public void setExpectedDelivery(Date expectedDelivery) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_expectedDelivery = expectedDelivery;
	}

	@JSON
	@Override
	public Date getAcceptedDelivery() {
		return _acceptedDelivery;
	}

	@Override
	public void setAcceptedDelivery(Date acceptedDelivery) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_acceptedDelivery = acceptedDelivery;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getUrlTitle() {
		if (_urlTitle == null) {
			return "";
		}
		else {
			return _urlTitle;
		}
	}

	@Override
	public void setUrlTitle(String urlTitle) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_urlTitle = urlTitle;
	}

	@JSON
	@Override
	public String getState() {
		if (_state == null) {
			return "";
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_state = state;
	}

	@JSON
	@Override
	public long getStateByUserId() {
		return _stateByUserId;
	}

	@Override
	public void setStateByUserId(long stateByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stateByUserId = stateByUserId;
	}

	@Override
	public String getStateByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStateByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStateByUserUuid(String stateByUserUuid) {
	}

	@JSON
	@Override
	public String getStateByUserName() {
		if (_stateByUserName == null) {
			return "";
		}
		else {
			return _stateByUserName;
		}
	}

	@Override
	public void setStateByUserName(String stateByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stateByUserName = stateByUserName;
	}

	@JSON
	@Override
	public Date getStateDate() {
		return _stateDate;
	}

	@Override
	public void setStateDate(Date stateDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stateDate = stateDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(CdsDemand.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CdsDemand.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CdsDemand toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CdsDemand>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CdsDemandImpl cdsDemandImpl = new CdsDemandImpl();

		cdsDemandImpl.setMvccVersion(getMvccVersion());
		cdsDemandImpl.setUuid(getUuid());
		cdsDemandImpl.setHeadId(getHeadId());
		cdsDemandImpl.setDemandId(getDemandId());
		cdsDemandImpl.setTitle(getTitle());
		cdsDemandImpl.setDescription(getDescription());
		cdsDemandImpl.setType(getType());
		cdsDemandImpl.setPriority(getPriority());
		cdsDemandImpl.setRequestedDelivery(getRequestedDelivery());
		cdsDemandImpl.setIsGDPR(isIsGDPR());
		cdsDemandImpl.setGdprInfo(getGdprInfo());
		cdsDemandImpl.setFiveTracks(getFiveTracks());
		cdsDemandImpl.setRequestorId(getRequestorId());
		cdsDemandImpl.setRequestorName(getRequestorName());
		cdsDemandImpl.setRequestedForId(getRequestedForId());
		cdsDemandImpl.setRequestedForName(getRequestedForName());
		cdsDemandImpl.setContactId(getContactId());
		cdsDemandImpl.setContactName(getContactName());
		cdsDemandImpl.setDomainId(getDomainId());
		cdsDemandImpl.setDomainName(getDomainName());
		cdsDemandImpl.setBanId(getBanId());
		cdsDemandImpl.setBanName(getBanName());
		cdsDemandImpl.setSpocId(getSpocId());
		cdsDemandImpl.setSpocName(getSpocName());
		cdsDemandImpl.setUsReasoning(getUsReasoning());
		cdsDemandImpl.setUsFrequencyOut(getUsFrequencyOut());
		cdsDemandImpl.setUsAccessDPM(isUsAccessDPM());
		cdsDemandImpl.setUsFolderDPM(getUsFolderDPM());
		cdsDemandImpl.setUsCreateFolderDPM(isUsCreateFolderDPM());
		cdsDemandImpl.setUsGestorFolderDPMId(getUsGestorFolderDPMId());
		cdsDemandImpl.setUsGestorFolderDPMName(getUsGestorFolderDPMName());
		cdsDemandImpl.setUsDPMNotificationMail(getUsDPMNotificationMail());
		cdsDemandImpl.setBioeId(getBioeId());
		cdsDemandImpl.setBioeStateId(getBioeStateId());
		cdsDemandImpl.setBioeStateName(getBioeStateName());
		cdsDemandImpl.setWorkEstimate(getWorkEstimate());
		cdsDemandImpl.setAcceptedWorkEstimate(getAcceptedWorkEstimate());
		cdsDemandImpl.setExpectedDelivery(getExpectedDelivery());
		cdsDemandImpl.setAcceptedDelivery(getAcceptedDelivery());
		cdsDemandImpl.setGroupId(getGroupId());
		cdsDemandImpl.setCompanyId(getCompanyId());
		cdsDemandImpl.setUserId(getUserId());
		cdsDemandImpl.setUserName(getUserName());
		cdsDemandImpl.setCreateDate(getCreateDate());
		cdsDemandImpl.setModifiedDate(getModifiedDate());
		cdsDemandImpl.setUrlTitle(getUrlTitle());
		cdsDemandImpl.setState(getState());
		cdsDemandImpl.setStateByUserId(getStateByUserId());
		cdsDemandImpl.setStateByUserName(getStateByUserName());
		cdsDemandImpl.setStateDate(getStateDate());

		cdsDemandImpl.resetOriginalValues();

		return cdsDemandImpl;
	}

	@Override
	public CdsDemand cloneWithOriginalValues() {
		CdsDemandImpl cdsDemandImpl = new CdsDemandImpl();

		cdsDemandImpl.setMvccVersion(
			this.<Long>getColumnOriginalValue("mvccVersion"));
		cdsDemandImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		cdsDemandImpl.setHeadId(this.<Long>getColumnOriginalValue("headId"));
		cdsDemandImpl.setDemandId(
			this.<Long>getColumnOriginalValue("demandId"));
		cdsDemandImpl.setTitle(this.<String>getColumnOriginalValue("title"));
		cdsDemandImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));
		cdsDemandImpl.setType(this.<Integer>getColumnOriginalValue("type_"));
		cdsDemandImpl.setPriority(
			this.<Integer>getColumnOriginalValue("priority"));
		cdsDemandImpl.setRequestedDelivery(
			this.<Date>getColumnOriginalValue("requestedDelivery"));
		cdsDemandImpl.setIsGDPR(this.<Boolean>getColumnOriginalValue("isGDPR"));
		cdsDemandImpl.setGdprInfo(
			this.<String>getColumnOriginalValue("gdprInfo"));
		cdsDemandImpl.setFiveTracks(
			this.<String>getColumnOriginalValue("fiveTracks"));
		cdsDemandImpl.setRequestorId(
			this.<Long>getColumnOriginalValue("requestorId"));
		cdsDemandImpl.setRequestorName(
			this.<String>getColumnOriginalValue("requestorName"));
		cdsDemandImpl.setRequestedForId(
			this.<Long>getColumnOriginalValue("requestedForId"));
		cdsDemandImpl.setRequestedForName(
			this.<String>getColumnOriginalValue("requestedForName"));
		cdsDemandImpl.setContactId(
			this.<Long>getColumnOriginalValue("contactId"));
		cdsDemandImpl.setContactName(
			this.<String>getColumnOriginalValue("contactName"));
		cdsDemandImpl.setDomainId(
			this.<Long>getColumnOriginalValue("domainId"));
		cdsDemandImpl.setDomainName(
			this.<String>getColumnOriginalValue("domainName"));
		cdsDemandImpl.setBanId(this.<Long>getColumnOriginalValue("banId"));
		cdsDemandImpl.setBanName(
			this.<String>getColumnOriginalValue("banName"));
		cdsDemandImpl.setSpocId(this.<Long>getColumnOriginalValue("spocId"));
		cdsDemandImpl.setSpocName(
			this.<String>getColumnOriginalValue("spocName"));
		cdsDemandImpl.setUsReasoning(
			this.<String>getColumnOriginalValue("usReasoning"));
		cdsDemandImpl.setUsFrequencyOut(
			this.<Integer>getColumnOriginalValue("usFrequencyOut"));
		cdsDemandImpl.setUsAccessDPM(
			this.<Boolean>getColumnOriginalValue("usAccessDPM"));
		cdsDemandImpl.setUsFolderDPM(
			this.<String>getColumnOriginalValue("usFolderDPM"));
		cdsDemandImpl.setUsCreateFolderDPM(
			this.<Boolean>getColumnOriginalValue("usCreateFolderDPM"));
		cdsDemandImpl.setUsGestorFolderDPMId(
			this.<Long>getColumnOriginalValue("usGestorFolderDPMId"));
		cdsDemandImpl.setUsGestorFolderDPMName(
			this.<String>getColumnOriginalValue("usGestorFolderDPMName"));
		cdsDemandImpl.setUsDPMNotificationMail(
			this.<String>getColumnOriginalValue("usDPMNotificationMail"));
		cdsDemandImpl.setBioeId(this.<String>getColumnOriginalValue("bioeId"));
		cdsDemandImpl.setBioeStateId(
			this.<Short>getColumnOriginalValue("bioeStateId"));
		cdsDemandImpl.setBioeStateName(
			this.<String>getColumnOriginalValue("bioeStateName"));
		cdsDemandImpl.setWorkEstimate(
			this.<Double>getColumnOriginalValue("workEstimate"));
		cdsDemandImpl.setAcceptedWorkEstimate(
			this.<Double>getColumnOriginalValue("acceptedWorkEstimate"));
		cdsDemandImpl.setExpectedDelivery(
			this.<Date>getColumnOriginalValue("expectedDelivery"));
		cdsDemandImpl.setAcceptedDelivery(
			this.<Date>getColumnOriginalValue("acceptedDelivery"));
		cdsDemandImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		cdsDemandImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		cdsDemandImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		cdsDemandImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		cdsDemandImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		cdsDemandImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		cdsDemandImpl.setUrlTitle(
			this.<String>getColumnOriginalValue("urlTitle"));
		cdsDemandImpl.setState(this.<String>getColumnOriginalValue("state_"));
		cdsDemandImpl.setStateByUserId(
			this.<Long>getColumnOriginalValue("stateByUserId"));
		cdsDemandImpl.setStateByUserName(
			this.<String>getColumnOriginalValue("stateByUserName"));
		cdsDemandImpl.setStateDate(
			this.<Date>getColumnOriginalValue("stateDate"));

		return cdsDemandImpl;
	}

	@Override
	public int compareTo(CdsDemand cdsDemand) {
		long primaryKey = cdsDemand.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CdsDemand)) {
			return false;
		}

		CdsDemand cdsDemand = (CdsDemand)object;

		long primaryKey = cdsDemand.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CdsDemand> toCacheModel() {
		CdsDemandCacheModel cdsDemandCacheModel = new CdsDemandCacheModel();

		cdsDemandCacheModel.mvccVersion = getMvccVersion();

		cdsDemandCacheModel.uuid = getUuid();

		String uuid = cdsDemandCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			cdsDemandCacheModel.uuid = null;
		}

		cdsDemandCacheModel.headId = getHeadId();

		cdsDemandCacheModel.head = isHead();

		cdsDemandCacheModel.demandId = getDemandId();

		cdsDemandCacheModel.title = getTitle();

		String title = cdsDemandCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			cdsDemandCacheModel.title = null;
		}

		cdsDemandCacheModel.description = getDescription();

		String description = cdsDemandCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			cdsDemandCacheModel.description = null;
		}

		cdsDemandCacheModel.type = getType();

		cdsDemandCacheModel.priority = getPriority();

		Date requestedDelivery = getRequestedDelivery();

		if (requestedDelivery != null) {
			cdsDemandCacheModel.requestedDelivery = requestedDelivery.getTime();
		}
		else {
			cdsDemandCacheModel.requestedDelivery = Long.MIN_VALUE;
		}

		cdsDemandCacheModel.isGDPR = isIsGDPR();

		cdsDemandCacheModel.gdprInfo = getGdprInfo();

		String gdprInfo = cdsDemandCacheModel.gdprInfo;

		if ((gdprInfo != null) && (gdprInfo.length() == 0)) {
			cdsDemandCacheModel.gdprInfo = null;
		}

		cdsDemandCacheModel.fiveTracks = getFiveTracks();

		String fiveTracks = cdsDemandCacheModel.fiveTracks;

		if ((fiveTracks != null) && (fiveTracks.length() == 0)) {
			cdsDemandCacheModel.fiveTracks = null;
		}

		cdsDemandCacheModel.requestorId = getRequestorId();

		cdsDemandCacheModel.requestorName = getRequestorName();

		String requestorName = cdsDemandCacheModel.requestorName;

		if ((requestorName != null) && (requestorName.length() == 0)) {
			cdsDemandCacheModel.requestorName = null;
		}

		cdsDemandCacheModel.requestedForId = getRequestedForId();

		cdsDemandCacheModel.requestedForName = getRequestedForName();

		String requestedForName = cdsDemandCacheModel.requestedForName;

		if ((requestedForName != null) && (requestedForName.length() == 0)) {
			cdsDemandCacheModel.requestedForName = null;
		}

		cdsDemandCacheModel.contactId = getContactId();

		cdsDemandCacheModel.contactName = getContactName();

		String contactName = cdsDemandCacheModel.contactName;

		if ((contactName != null) && (contactName.length() == 0)) {
			cdsDemandCacheModel.contactName = null;
		}

		cdsDemandCacheModel.domainId = getDomainId();

		cdsDemandCacheModel.domainName = getDomainName();

		String domainName = cdsDemandCacheModel.domainName;

		if ((domainName != null) && (domainName.length() == 0)) {
			cdsDemandCacheModel.domainName = null;
		}

		cdsDemandCacheModel.banId = getBanId();

		cdsDemandCacheModel.banName = getBanName();

		String banName = cdsDemandCacheModel.banName;

		if ((banName != null) && (banName.length() == 0)) {
			cdsDemandCacheModel.banName = null;
		}

		cdsDemandCacheModel.spocId = getSpocId();

		cdsDemandCacheModel.spocName = getSpocName();

		String spocName = cdsDemandCacheModel.spocName;

		if ((spocName != null) && (spocName.length() == 0)) {
			cdsDemandCacheModel.spocName = null;
		}

		cdsDemandCacheModel.usReasoning = getUsReasoning();

		String usReasoning = cdsDemandCacheModel.usReasoning;

		if ((usReasoning != null) && (usReasoning.length() == 0)) {
			cdsDemandCacheModel.usReasoning = null;
		}

		cdsDemandCacheModel.usFrequencyOut = getUsFrequencyOut();

		cdsDemandCacheModel.usAccessDPM = isUsAccessDPM();

		cdsDemandCacheModel.usFolderDPM = getUsFolderDPM();

		String usFolderDPM = cdsDemandCacheModel.usFolderDPM;

		if ((usFolderDPM != null) && (usFolderDPM.length() == 0)) {
			cdsDemandCacheModel.usFolderDPM = null;
		}

		cdsDemandCacheModel.usCreateFolderDPM = isUsCreateFolderDPM();

		cdsDemandCacheModel.usGestorFolderDPMId = getUsGestorFolderDPMId();

		cdsDemandCacheModel.usGestorFolderDPMName = getUsGestorFolderDPMName();

		String usGestorFolderDPMName =
			cdsDemandCacheModel.usGestorFolderDPMName;

		if ((usGestorFolderDPMName != null) &&
			(usGestorFolderDPMName.length() == 0)) {

			cdsDemandCacheModel.usGestorFolderDPMName = null;
		}

		cdsDemandCacheModel.usDPMNotificationMail = getUsDPMNotificationMail();

		String usDPMNotificationMail =
			cdsDemandCacheModel.usDPMNotificationMail;

		if ((usDPMNotificationMail != null) &&
			(usDPMNotificationMail.length() == 0)) {

			cdsDemandCacheModel.usDPMNotificationMail = null;
		}

		cdsDemandCacheModel.bioeId = getBioeId();

		String bioeId = cdsDemandCacheModel.bioeId;

		if ((bioeId != null) && (bioeId.length() == 0)) {
			cdsDemandCacheModel.bioeId = null;
		}

		cdsDemandCacheModel.bioeStateId = getBioeStateId();

		cdsDemandCacheModel.bioeStateName = getBioeStateName();

		String bioeStateName = cdsDemandCacheModel.bioeStateName;

		if ((bioeStateName != null) && (bioeStateName.length() == 0)) {
			cdsDemandCacheModel.bioeStateName = null;
		}

		cdsDemandCacheModel.workEstimate = getWorkEstimate();

		cdsDemandCacheModel.acceptedWorkEstimate = getAcceptedWorkEstimate();

		Date expectedDelivery = getExpectedDelivery();

		if (expectedDelivery != null) {
			cdsDemandCacheModel.expectedDelivery = expectedDelivery.getTime();
		}
		else {
			cdsDemandCacheModel.expectedDelivery = Long.MIN_VALUE;
		}

		Date acceptedDelivery = getAcceptedDelivery();

		if (acceptedDelivery != null) {
			cdsDemandCacheModel.acceptedDelivery = acceptedDelivery.getTime();
		}
		else {
			cdsDemandCacheModel.acceptedDelivery = Long.MIN_VALUE;
		}

		cdsDemandCacheModel.groupId = getGroupId();

		cdsDemandCacheModel.companyId = getCompanyId();

		cdsDemandCacheModel.userId = getUserId();

		cdsDemandCacheModel.userName = getUserName();

		String userName = cdsDemandCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			cdsDemandCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			cdsDemandCacheModel.createDate = createDate.getTime();
		}
		else {
			cdsDemandCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			cdsDemandCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			cdsDemandCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		cdsDemandCacheModel.urlTitle = getUrlTitle();

		String urlTitle = cdsDemandCacheModel.urlTitle;

		if ((urlTitle != null) && (urlTitle.length() == 0)) {
			cdsDemandCacheModel.urlTitle = null;
		}

		cdsDemandCacheModel.state = getState();

		String state = cdsDemandCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			cdsDemandCacheModel.state = null;
		}

		cdsDemandCacheModel.stateByUserId = getStateByUserId();

		cdsDemandCacheModel.stateByUserName = getStateByUserName();

		String stateByUserName = cdsDemandCacheModel.stateByUserName;

		if ((stateByUserName != null) && (stateByUserName.length() == 0)) {
			cdsDemandCacheModel.stateByUserName = null;
		}

		Date stateDate = getStateDate();

		if (stateDate != null) {
			cdsDemandCacheModel.stateDate = stateDate.getTime();
		}
		else {
			cdsDemandCacheModel.stateDate = Long.MIN_VALUE;
		}

		return cdsDemandCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CdsDemand, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CdsDemand, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CdsDemand, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((CdsDemand)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<CdsDemand, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<CdsDemand, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CdsDemand, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((CdsDemand)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CdsDemand>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					CdsDemand.class, ModelWrapper.class);

	}

	private long _mvccVersion;
	private String _uuid;
	private long _headId;
	private boolean _head;
	private long _demandId;
	private String _title;
	private String _description;
	private int _type;
	private int _priority;
	private Date _requestedDelivery;
	private boolean _isGDPR;
	private String _gdprInfo;
	private String _fiveTracks;
	private long _requestorId;
	private String _requestorName;
	private long _requestedForId;
	private String _requestedForName;
	private long _contactId;
	private String _contactName;
	private long _domainId;
	private String _domainName;
	private long _banId;
	private String _banName;
	private long _spocId;
	private String _spocName;
	private String _usReasoning;
	private int _usFrequencyOut;
	private boolean _usAccessDPM;
	private String _usFolderDPM;
	private boolean _usCreateFolderDPM;
	private long _usGestorFolderDPMId;
	private String _usGestorFolderDPMName;
	private String _usDPMNotificationMail;
	private String _bioeId;
	private short _bioeStateId;
	private String _bioeStateName;
	private double _workEstimate;
	private double _acceptedWorkEstimate;
	private Date _expectedDelivery;
	private Date _acceptedDelivery;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _urlTitle;
	private String _state;
	private long _stateByUserId;
	private String _stateByUserName;
	private Date _stateDate;

	public <T> T getColumnValue(String columnName) {
		if (columnName.equals("head")) {
			return (T)(Object)getHead();
		}

		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<CdsDemand, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CdsDemand)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("mvccVersion", _mvccVersion);
		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("headId", _headId);
		_columnOriginalValues.put("head", _head);
		_columnOriginalValues.put("demandId", _demandId);
		_columnOriginalValues.put("title", _title);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("type_", _type);
		_columnOriginalValues.put("priority", _priority);
		_columnOriginalValues.put("requestedDelivery", _requestedDelivery);
		_columnOriginalValues.put("isGDPR", _isGDPR);
		_columnOriginalValues.put("gdprInfo", _gdprInfo);
		_columnOriginalValues.put("fiveTracks", _fiveTracks);
		_columnOriginalValues.put("requestorId", _requestorId);
		_columnOriginalValues.put("requestorName", _requestorName);
		_columnOriginalValues.put("requestedForId", _requestedForId);
		_columnOriginalValues.put("requestedForName", _requestedForName);
		_columnOriginalValues.put("contactId", _contactId);
		_columnOriginalValues.put("contactName", _contactName);
		_columnOriginalValues.put("domainId", _domainId);
		_columnOriginalValues.put("domainName", _domainName);
		_columnOriginalValues.put("banId", _banId);
		_columnOriginalValues.put("banName", _banName);
		_columnOriginalValues.put("spocId", _spocId);
		_columnOriginalValues.put("spocName", _spocName);
		_columnOriginalValues.put("usReasoning", _usReasoning);
		_columnOriginalValues.put("usFrequencyOut", _usFrequencyOut);
		_columnOriginalValues.put("usAccessDPM", _usAccessDPM);
		_columnOriginalValues.put("usFolderDPM", _usFolderDPM);
		_columnOriginalValues.put("usCreateFolderDPM", _usCreateFolderDPM);
		_columnOriginalValues.put("usGestorFolderDPMId", _usGestorFolderDPMId);
		_columnOriginalValues.put(
			"usGestorFolderDPMName", _usGestorFolderDPMName);
		_columnOriginalValues.put(
			"usDPMNotificationMail", _usDPMNotificationMail);
		_columnOriginalValues.put("bioeId", _bioeId);
		_columnOriginalValues.put("bioeStateId", _bioeStateId);
		_columnOriginalValues.put("bioeStateName", _bioeStateName);
		_columnOriginalValues.put("workEstimate", _workEstimate);
		_columnOriginalValues.put(
			"acceptedWorkEstimate", _acceptedWorkEstimate);
		_columnOriginalValues.put("expectedDelivery", _expectedDelivery);
		_columnOriginalValues.put("acceptedDelivery", _acceptedDelivery);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("urlTitle", _urlTitle);
		_columnOriginalValues.put("state_", _state);
		_columnOriginalValues.put("stateByUserId", _stateByUserId);
		_columnOriginalValues.put("stateByUserName", _stateByUserName);
		_columnOriginalValues.put("stateDate", _stateDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("type_", "type");
		attributeNames.put("state_", "state");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("mvccVersion", 1L);

		columnBitmasks.put("uuid_", 2L);

		columnBitmasks.put("headId", 4L);

		columnBitmasks.put("head", 8L);

		columnBitmasks.put("demandId", 16L);

		columnBitmasks.put("title", 32L);

		columnBitmasks.put("description", 64L);

		columnBitmasks.put("type_", 128L);

		columnBitmasks.put("priority", 256L);

		columnBitmasks.put("requestedDelivery", 512L);

		columnBitmasks.put("isGDPR", 1024L);

		columnBitmasks.put("gdprInfo", 2048L);

		columnBitmasks.put("fiveTracks", 4096L);

		columnBitmasks.put("requestorId", 8192L);

		columnBitmasks.put("requestorName", 16384L);

		columnBitmasks.put("requestedForId", 32768L);

		columnBitmasks.put("requestedForName", 65536L);

		columnBitmasks.put("contactId", 131072L);

		columnBitmasks.put("contactName", 262144L);

		columnBitmasks.put("domainId", 524288L);

		columnBitmasks.put("domainName", 1048576L);

		columnBitmasks.put("banId", 2097152L);

		columnBitmasks.put("banName", 4194304L);

		columnBitmasks.put("spocId", 8388608L);

		columnBitmasks.put("spocName", 16777216L);

		columnBitmasks.put("usReasoning", 33554432L);

		columnBitmasks.put("usFrequencyOut", 67108864L);

		columnBitmasks.put("usAccessDPM", 134217728L);

		columnBitmasks.put("usFolderDPM", 268435456L);

		columnBitmasks.put("usCreateFolderDPM", 536870912L);

		columnBitmasks.put("usGestorFolderDPMId", 1073741824L);

		columnBitmasks.put("usGestorFolderDPMName", 2147483648L);

		columnBitmasks.put("usDPMNotificationMail", 4294967296L);

		columnBitmasks.put("bioeId", 8589934592L);

		columnBitmasks.put("bioeStateId", 17179869184L);

		columnBitmasks.put("bioeStateName", 34359738368L);

		columnBitmasks.put("workEstimate", 68719476736L);

		columnBitmasks.put("acceptedWorkEstimate", 137438953472L);

		columnBitmasks.put("expectedDelivery", 274877906944L);

		columnBitmasks.put("acceptedDelivery", 549755813888L);

		columnBitmasks.put("groupId", 1099511627776L);

		columnBitmasks.put("companyId", 2199023255552L);

		columnBitmasks.put("userId", 4398046511104L);

		columnBitmasks.put("userName", 8796093022208L);

		columnBitmasks.put("createDate", 17592186044416L);

		columnBitmasks.put("modifiedDate", 35184372088832L);

		columnBitmasks.put("urlTitle", 70368744177664L);

		columnBitmasks.put("state_", 140737488355328L);

		columnBitmasks.put("stateByUserId", 281474976710656L);

		columnBitmasks.put("stateByUserName", 562949953421312L);

		columnBitmasks.put("stateDate", 1125899906842624L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CdsDemand _escapedModel;

}