/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package cz.csob.ency.cds.demands.service.base;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.sql.dsl.query.DSLQuery;
import com.liferay.portal.aop.AopService;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalService;
import com.liferay.portal.kernel.service.persistence.BasePersistence;
import com.liferay.portal.kernel.service.version.VersionService;
import com.liferay.portal.kernel.service.version.VersionServiceListener;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;

import cz.csob.ency.cds.demands.model.CdsDemand;
import cz.csob.ency.cds.demands.model.CdsDemandVersion;
import cz.csob.ency.cds.demands.service.CdsDemandLocalService;
import cz.csob.ency.cds.demands.service.CdsDemandLocalServiceUtil;
import cz.csob.ency.cds.demands.service.persistence.CdsDemandGdprInfoPersistence;
import cz.csob.ency.cds.demands.service.persistence.CdsDemandPersistence;
import cz.csob.ency.cds.demands.service.persistence.CdsDemandVersionPersistence;

import java.io.Serializable;

import java.lang.reflect.Field;

import java.util.Collections;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

import javax.sql.DataSource;

import org.osgi.service.component.annotations.Deactivate;
import org.osgi.service.component.annotations.Reference;

/**
 * Provides the base implementation for the cds demand local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link cz.csob.ency.cds.demands.service.impl.CdsDemandLocalServiceImpl}.
 * </p>
 *
 * @author Miroslav Čermák
 * @see cz.csob.ency.cds.demands.service.impl.CdsDemandLocalServiceImpl
 * @generated
 */
public abstract class CdsDemandLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements AopService, CdsDemandLocalService, IdentifiableOSGiService,
			   VersionService<CdsDemand, CdsDemandVersion> {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Use <code>CdsDemandLocalService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>CdsDemandLocalServiceUtil</code>.
	 */

	/**
	 * Adds the cds demand to the database. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect CdsDemandLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param cdsDemand the cds demand
	 * @return the cds demand that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CdsDemand addCdsDemand(CdsDemand cdsDemand) {
		cdsDemand.setNew(true);

		return cdsDemandPersistence.update(cdsDemand);
	}

	/**
	 * Creates a new cds demand. Does not add the cds demand to the database.
	 *
	 * @return the new cds demand
	 */
	@Override
	@Transactional(enabled = false)
	public CdsDemand create() {
		long primaryKey = counterLocalService.increment(
			CdsDemand.class.getName());

		CdsDemand draftCdsDemand = cdsDemandPersistence.create(primaryKey);

		draftCdsDemand.setHeadId(primaryKey);

		return draftCdsDemand;
	}

	/**
	 * Deletes the cds demand with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect CdsDemandLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param demandId the primary key of the cds demand
	 * @return the cds demand that was removed
	 * @throws PortalException if a cds demand with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CdsDemand deleteCdsDemand(long demandId) throws PortalException {
		CdsDemand cdsDemand = cdsDemandPersistence.fetchByPrimaryKey(demandId);

		if (cdsDemand != null) {
			delete(cdsDemand);
		}

		return cdsDemand;
	}

	/**
	 * Deletes the cds demand from the database. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect CdsDemandLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param cdsDemand the cds demand
	 * @return the cds demand that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CdsDemand deleteCdsDemand(CdsDemand cdsDemand) {
		try {
			delete(cdsDemand);

			return cdsDemand;
		}
		catch (PortalException portalException) {
			throw new SystemException(portalException);
		}
	}

	@Override
	public <T> T dslQuery(DSLQuery dslQuery) {
		return cdsDemandPersistence.dslQuery(dslQuery);
	}

	@Override
	public int dslQueryCount(DSLQuery dslQuery) {
		Long count = dslQuery(dslQuery);

		return count.intValue();
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(
			CdsDemand.class, clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return cdsDemandPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>cz.csob.ency.cds.demands.model.impl.CdsDemandModelImpl</code>.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end) {

		return cdsDemandPersistence.findWithDynamicQuery(
			dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>cz.csob.ency.cds.demands.model.impl.CdsDemandModelImpl</code>.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator<T> orderByComparator) {

		return cdsDemandPersistence.findWithDynamicQuery(
			dynamicQuery, start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return cdsDemandPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(
		DynamicQuery dynamicQuery, Projection projection) {

		return cdsDemandPersistence.countWithDynamicQuery(
			dynamicQuery, projection);
	}

	@Override
	public CdsDemand fetchCdsDemand(long demandId) {
		return cdsDemandPersistence.fetchByPrimaryKey(demandId);
	}

	/**
	 * Returns the cds demand with the primary key.
	 *
	 * @param demandId the primary key of the cds demand
	 * @return the cds demand
	 * @throws PortalException if a cds demand with the primary key could not be found
	 */
	@Override
	public CdsDemand getCdsDemand(long demandId) throws PortalException {
		return cdsDemandPersistence.findByPrimaryKey(demandId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery =
			new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(cdsDemandLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(CdsDemand.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("demandId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery
		getIndexableActionableDynamicQuery() {

		IndexableActionableDynamicQuery indexableActionableDynamicQuery =
			new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(
			cdsDemandLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(CdsDemand.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("demandId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {

		actionableDynamicQuery.setBaseLocalService(cdsDemandLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(CdsDemand.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("demandId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {

		final ExportActionableDynamicQuery exportActionableDynamicQuery =
			new ExportActionableDynamicQuery() {

				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary =
						portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(
						stagedModelType, modelAdditionCount);

					long modelDeletionCount =
						ExportImportHelperUtil.getModelDeletionCount(
							portletDataContext, stagedModelType);

					manifestSummary.addModelDeletionCount(
						stagedModelType, modelDeletionCount);

					return modelAdditionCount;
				}

			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(
			new ActionableDynamicQuery.AddCriteriaMethod() {

				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(
						dynamicQuery, "modifiedDate");
				}

			});

		exportActionableDynamicQuery.setCompanyId(
			portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(
			new ActionableDynamicQuery.PerformActionMethod<CdsDemand>() {

				@Override
				public void performAction(CdsDemand cdsDemand)
					throws PortalException {

					StagedModelDataHandlerUtil.exportStagedModel(
						portletDataContext, cdsDemand);
				}

			});
		exportActionableDynamicQuery.setStagedModelType(
			new StagedModelType(
				PortalUtil.getClassNameId(CdsDemand.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel createPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return cdsDemandPersistence.create(((Long)primaryKeyObj).longValue());
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {

		return cdsDemandLocalService.deleteCdsDemand((CdsDemand)persistedModel);
	}

	@Override
	public BasePersistence<CdsDemand> getBasePersistence() {
		return cdsDemandPersistence;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return cdsDemandPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the cds demands.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>cz.csob.ency.cds.demands.model.impl.CdsDemandModelImpl</code>.
	 * </p>
	 *
	 * @param start the lower bound of the range of cds demands
	 * @param end the upper bound of the range of cds demands (not inclusive)
	 * @return the range of cds demands
	 */
	@Override
	public List<CdsDemand> getCdsDemands(int start, int end) {
		return cdsDemandPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of cds demands.
	 *
	 * @return the number of cds demands
	 */
	@Override
	public int getCdsDemandsCount() {
		return cdsDemandPersistence.countAll();
	}

	/**
	 * Updates the cds demand in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect CdsDemandLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param cdsDemand the cds demand
	 * @return the cds demand that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CdsDemand updateCdsDemand(CdsDemand draftCdsDemand)
		throws PortalException {

		return updateDraft(draftCdsDemand);
	}

	@Deactivate
	protected void deactivate() {
		_setLocalServiceUtilService(null);
	}

	@Override
	public Class<?>[] getAopInterfaces() {
		return new Class<?>[] {
			CdsDemandLocalService.class, IdentifiableOSGiService.class,
			PersistedModelLocalService.class
		};
	}

	@Override
	public void setAopProxy(Object aopProxy) {
		cdsDemandLocalService = (CdsDemandLocalService)aopProxy;

		_setLocalServiceUtilService(cdsDemandLocalService);
	}

	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CdsDemand checkout(CdsDemand publishedCdsDemand, int version)
		throws PortalException {

		if (!publishedCdsDemand.isHead()) {
			throw new IllegalArgumentException(
				"Unable to checkout with unpublished changes " +
					publishedCdsDemand.getHeadId());
		}

		CdsDemand draftCdsDemand = cdsDemandPersistence.fetchByHeadId(
			publishedCdsDemand.getPrimaryKey());

		if (draftCdsDemand != null) {
			throw new IllegalArgumentException(
				"Unable to checkout with unpublished changes " +
					publishedCdsDemand.getPrimaryKey());
		}

		CdsDemandVersion cdsDemandVersion = getVersion(
			publishedCdsDemand, version);

		draftCdsDemand = _createDraft(publishedCdsDemand);

		cdsDemandVersion.populateVersionedModel(draftCdsDemand);

		draftCdsDemand = cdsDemandPersistence.update(draftCdsDemand);

		for (VersionServiceListener<CdsDemand, CdsDemandVersion>
				versionServiceListener : _versionServiceListeners) {

			versionServiceListener.afterCheckout(draftCdsDemand, version);
		}

		return draftCdsDemand;
	}

	@Indexable(type = IndexableType.DELETE)
	@Override
	public CdsDemand delete(CdsDemand publishedCdsDemand)
		throws PortalException {

		if (!publishedCdsDemand.isHead()) {
			throw new IllegalArgumentException(
				"CdsDemand is a draft " + publishedCdsDemand.getPrimaryKey());
		}

		CdsDemand draftCdsDemand = cdsDemandPersistence.fetchByHeadId(
			publishedCdsDemand.getPrimaryKey());

		if (draftCdsDemand != null) {
			deleteDraft(draftCdsDemand);
		}

		for (CdsDemandVersion cdsDemandVersion :
				getVersions(publishedCdsDemand)) {

			cdsDemandVersionPersistence.remove(cdsDemandVersion);
		}

		cdsDemandPersistence.remove(publishedCdsDemand);

		for (VersionServiceListener<CdsDemand, CdsDemandVersion>
				versionServiceListener : _versionServiceListeners) {

			versionServiceListener.afterDelete(publishedCdsDemand);
		}

		return publishedCdsDemand;
	}

	@Indexable(type = IndexableType.DELETE)
	@Override
	public CdsDemand deleteDraft(CdsDemand draftCdsDemand)
		throws PortalException {

		if (draftCdsDemand.isHead()) {
			throw new IllegalArgumentException(
				"CdsDemand is not a draft " + draftCdsDemand.getPrimaryKey());
		}

		cdsDemandPersistence.remove(draftCdsDemand);

		for (VersionServiceListener<CdsDemand, CdsDemandVersion>
				versionServiceListener : _versionServiceListeners) {

			versionServiceListener.afterDeleteDraft(draftCdsDemand);
		}

		return draftCdsDemand;
	}

	@Override
	public CdsDemandVersion deleteVersion(CdsDemandVersion cdsDemandVersion)
		throws PortalException {

		CdsDemandVersion latestCdsDemandVersion =
			cdsDemandVersionPersistence.findByDemandId_First(
				cdsDemandVersion.getVersionedModelId(), null);

		if (latestCdsDemandVersion.getVersion() ==
				cdsDemandVersion.getVersion()) {

			throw new IllegalArgumentException(
				"Unable to delete latest version " +
					cdsDemandVersion.getVersion());
		}

		cdsDemandVersion = cdsDemandVersionPersistence.remove(cdsDemandVersion);

		for (VersionServiceListener<CdsDemand, CdsDemandVersion>
				versionServiceListener : _versionServiceListeners) {

			versionServiceListener.afterDeleteVersion(cdsDemandVersion);
		}

		return cdsDemandVersion;
	}

	@Override
	public CdsDemand fetchDraft(CdsDemand cdsDemand) {
		if (cdsDemand.isHead()) {
			return cdsDemandPersistence.fetchByHeadId(
				cdsDemand.getPrimaryKey());
		}

		return cdsDemand;
	}

	@Override
	public CdsDemand fetchDraft(long primaryKey) {
		return cdsDemandPersistence.fetchByHeadId(primaryKey);
	}

	@Override
	public CdsDemandVersion fetchLatestVersion(CdsDemand cdsDemand) {
		long primaryKey = cdsDemand.getHeadId();

		if (cdsDemand.isHead()) {
			primaryKey = cdsDemand.getPrimaryKey();
		}

		return cdsDemandVersionPersistence.fetchByDemandId_First(
			primaryKey, null);
	}

	@Override
	public CdsDemand fetchPublished(CdsDemand cdsDemand) {
		if (cdsDemand.isHead()) {
			return cdsDemand;
		}

		if (cdsDemand.getHeadId() == cdsDemand.getPrimaryKey()) {
			return null;
		}

		return cdsDemandPersistence.fetchByPrimaryKey(cdsDemand.getHeadId());
	}

	@Override
	public CdsDemand fetchPublished(long primaryKey) {
		CdsDemand cdsDemand = cdsDemandPersistence.fetchByPrimaryKey(
			primaryKey);

		if ((cdsDemand == null) ||
			(cdsDemand.getHeadId() == cdsDemand.getPrimaryKey())) {

			return null;
		}

		return cdsDemand;
	}

	@Override
	public CdsDemand getDraft(CdsDemand cdsDemand) throws PortalException {
		if (!cdsDemand.isHead()) {
			return cdsDemand;
		}

		CdsDemand draftCdsDemand = cdsDemandPersistence.fetchByHeadId(
			cdsDemand.getPrimaryKey());

		if (draftCdsDemand == null) {
			draftCdsDemand = cdsDemandLocalService.updateDraft(
				_createDraft(cdsDemand));
		}

		return draftCdsDemand;
	}

	@Override
	public CdsDemand getDraft(long primaryKey) throws PortalException {
		CdsDemand draftCdsDemand = cdsDemandPersistence.fetchByHeadId(
			primaryKey);

		if (draftCdsDemand == null) {
			CdsDemand cdsDemand = cdsDemandPersistence.findByPrimaryKey(
				primaryKey);

			draftCdsDemand = cdsDemandLocalService.updateDraft(
				_createDraft(cdsDemand));
		}

		return draftCdsDemand;
	}

	@Override
	public CdsDemandVersion getVersion(CdsDemand cdsDemand, int version)
		throws PortalException {

		long primaryKey = cdsDemand.getHeadId();

		if (cdsDemand.isHead()) {
			primaryKey = cdsDemand.getPrimaryKey();
		}

		return cdsDemandVersionPersistence.findByDemandId_Version(
			primaryKey, version);
	}

	@Override
	public List<CdsDemandVersion> getVersions(CdsDemand cdsDemand) {
		long primaryKey = cdsDemand.getPrimaryKey();

		if (!cdsDemand.isHead()) {
			if (cdsDemand.getHeadId() == cdsDemand.getPrimaryKey()) {
				return Collections.emptyList();
			}

			primaryKey = cdsDemand.getHeadId();
		}

		return cdsDemandVersionPersistence.findByDemandId(primaryKey);
	}

	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CdsDemand publishDraft(CdsDemand draftCdsDemand)
		throws PortalException {

		if (draftCdsDemand.isHead()) {
			throw new IllegalArgumentException(
				"Can only publish drafts " + draftCdsDemand.getPrimaryKey());
		}

		CdsDemand headCdsDemand = null;

		int version = 1;

		if (draftCdsDemand.getHeadId() == draftCdsDemand.getPrimaryKey()) {
			headCdsDemand = create();

			draftCdsDemand.setHeadId(headCdsDemand.getPrimaryKey());
		}
		else {
			headCdsDemand = cdsDemandPersistence.findByPrimaryKey(
				draftCdsDemand.getHeadId());

			CdsDemandVersion latestCdsDemandVersion =
				cdsDemandVersionPersistence.findByDemandId_First(
					draftCdsDemand.getHeadId(), null);

			version = latestCdsDemandVersion.getVersion() + 1;
		}

		CdsDemandVersion cdsDemandVersion = cdsDemandVersionPersistence.create(
			counterLocalService.increment(CdsDemandVersion.class.getName()));

		cdsDemandVersion.setVersion(version);
		cdsDemandVersion.setVersionedModelId(headCdsDemand.getPrimaryKey());

		draftCdsDemand.populateVersionModel(cdsDemandVersion);

		cdsDemandVersionPersistence.update(cdsDemandVersion);

		cdsDemandVersion.populateVersionedModel(headCdsDemand);

		headCdsDemand.setHeadId(-headCdsDemand.getPrimaryKey());

		headCdsDemand = cdsDemandPersistence.update(headCdsDemand);

		for (VersionServiceListener<CdsDemand, CdsDemandVersion>
				versionServiceListener : _versionServiceListeners) {

			versionServiceListener.afterPublishDraft(draftCdsDemand, version);
		}

		deleteDraft(draftCdsDemand);

		return headCdsDemand;
	}

	@Override
	public void registerListener(
		VersionServiceListener<CdsDemand, CdsDemandVersion>
			versionServiceListener) {

		_versionServiceListeners.add(versionServiceListener);
	}

	@Override
	public void unregisterListener(
		VersionServiceListener<CdsDemand, CdsDemandVersion>
			versionServiceListener) {

		_versionServiceListeners.remove(versionServiceListener);
	}

	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CdsDemand updateDraft(CdsDemand draftCdsDemand)
		throws PortalException {

		if (draftCdsDemand.isHead()) {
			throw new IllegalArgumentException(
				"Can only update draft entries " +
					draftCdsDemand.getPrimaryKey());
		}

		CdsDemand previousCdsDemand = cdsDemandPersistence.fetchByPrimaryKey(
			draftCdsDemand.getPrimaryKey());

		draftCdsDemand = cdsDemandPersistence.update(draftCdsDemand);

		if (previousCdsDemand == null) {
			for (VersionServiceListener<CdsDemand, CdsDemandVersion>
					versionServiceListener : _versionServiceListeners) {

				versionServiceListener.afterCreateDraft(draftCdsDemand);
			}
		}
		else {
			for (VersionServiceListener<CdsDemand, CdsDemandVersion>
					versionServiceListener : _versionServiceListeners) {

				versionServiceListener.afterUpdateDraft(draftCdsDemand);
			}
		}

		return draftCdsDemand;
	}

	private CdsDemand _createDraft(CdsDemand publishedCdsDemand)
		throws PortalException {

		CdsDemand draftCdsDemand = create();

		draftCdsDemand.setUuid(publishedCdsDemand.getUuid());
		draftCdsDemand.setHeadId(publishedCdsDemand.getPrimaryKey());
		draftCdsDemand.setTitle(publishedCdsDemand.getTitle());
		draftCdsDemand.setDescription(publishedCdsDemand.getDescription());
		draftCdsDemand.setType(publishedCdsDemand.getType());
		draftCdsDemand.setPriority(publishedCdsDemand.getPriority());
		draftCdsDemand.setRequestedDelivery(
			publishedCdsDemand.getRequestedDelivery());
		draftCdsDemand.setIsGDPR(publishedCdsDemand.getIsGDPR());
		draftCdsDemand.setGdprInfo(publishedCdsDemand.getGdprInfo());
		draftCdsDemand.setFiveTracks(publishedCdsDemand.getFiveTracks());
		draftCdsDemand.setRequestorId(publishedCdsDemand.getRequestorId());
		draftCdsDemand.setRequestorName(publishedCdsDemand.getRequestorName());
		draftCdsDemand.setRequestedForId(
			publishedCdsDemand.getRequestedForId());
		draftCdsDemand.setRequestedForName(
			publishedCdsDemand.getRequestedForName());
		draftCdsDemand.setContactId(publishedCdsDemand.getContactId());
		draftCdsDemand.setContactName(publishedCdsDemand.getContactName());
		draftCdsDemand.setDomainId(publishedCdsDemand.getDomainId());
		draftCdsDemand.setDomainName(publishedCdsDemand.getDomainName());
		draftCdsDemand.setBanId(publishedCdsDemand.getBanId());
		draftCdsDemand.setBanName(publishedCdsDemand.getBanName());
		draftCdsDemand.setSpocId(publishedCdsDemand.getSpocId());
		draftCdsDemand.setSpocName(publishedCdsDemand.getSpocName());
		draftCdsDemand.setUsReasoning(publishedCdsDemand.getUsReasoning());
		draftCdsDemand.setUsFrequencyOut(
			publishedCdsDemand.getUsFrequencyOut());
		draftCdsDemand.setUsAccessDPM(publishedCdsDemand.getUsAccessDPM());
		draftCdsDemand.setUsFolderDPM(publishedCdsDemand.getUsFolderDPM());
		draftCdsDemand.setUsCreateFolderDPM(
			publishedCdsDemand.getUsCreateFolderDPM());
		draftCdsDemand.setUsGestorFolderDPMId(
			publishedCdsDemand.getUsGestorFolderDPMId());
		draftCdsDemand.setUsGestorFolderDPMName(
			publishedCdsDemand.getUsGestorFolderDPMName());
		draftCdsDemand.setUsDPMNotificationMail(
			publishedCdsDemand.getUsDPMNotificationMail());
		draftCdsDemand.setBioeId(publishedCdsDemand.getBioeId());
		draftCdsDemand.setBioeStateId(publishedCdsDemand.getBioeStateId());
		draftCdsDemand.setBioeStateName(publishedCdsDemand.getBioeStateName());
		draftCdsDemand.setWorkEstimate(publishedCdsDemand.getWorkEstimate());
		draftCdsDemand.setAcceptedWorkEstimate(
			publishedCdsDemand.getAcceptedWorkEstimate());
		draftCdsDemand.setExpectedDelivery(
			publishedCdsDemand.getExpectedDelivery());
		draftCdsDemand.setAcceptedDelivery(
			publishedCdsDemand.getAcceptedDelivery());
		draftCdsDemand.setGroupId(publishedCdsDemand.getGroupId());
		draftCdsDemand.setCompanyId(publishedCdsDemand.getCompanyId());
		draftCdsDemand.setUserId(publishedCdsDemand.getUserId());
		draftCdsDemand.setUserName(publishedCdsDemand.getUserName());
		draftCdsDemand.setCreateDate(publishedCdsDemand.getCreateDate());
		draftCdsDemand.setModifiedDate(publishedCdsDemand.getModifiedDate());
		draftCdsDemand.setUrlTitle(publishedCdsDemand.getUrlTitle());
		draftCdsDemand.setState(publishedCdsDemand.getState());
		draftCdsDemand.setStateByUserId(publishedCdsDemand.getStateByUserId());
		draftCdsDemand.setStateByUserName(
			publishedCdsDemand.getStateByUserName());
		draftCdsDemand.setStateDate(publishedCdsDemand.getStateDate());

		draftCdsDemand.resetOriginalValues();

		return draftCdsDemand;
	}

	private final Set<VersionServiceListener<CdsDemand, CdsDemandVersion>>
		_versionServiceListeners = Collections.newSetFromMap(
			new ConcurrentHashMap
				<VersionServiceListener<CdsDemand, CdsDemandVersion>,
				 Boolean>());

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return CdsDemandLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return CdsDemand.class;
	}

	protected String getModelClassName() {
		return CdsDemand.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = cdsDemandPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(
				dataSource, sql);

			sqlUpdate.update();
		}
		catch (Exception exception) {
			throw new SystemException(exception);
		}
	}

	private void _setLocalServiceUtilService(
		CdsDemandLocalService cdsDemandLocalService) {

		try {
			Field field = CdsDemandLocalServiceUtil.class.getDeclaredField(
				"_service");

			field.setAccessible(true);

			field.set(null, cdsDemandLocalService);
		}
		catch (ReflectiveOperationException reflectiveOperationException) {
			throw new RuntimeException(reflectiveOperationException);
		}
	}

	protected CdsDemandLocalService cdsDemandLocalService;

	@Reference
	protected CdsDemandPersistence cdsDemandPersistence;

	@Reference
	protected CdsDemandGdprInfoPersistence cdsDemandGdprInfoPersistence;

	@Reference
	protected CdsDemandVersionPersistence cdsDemandVersionPersistence;

	@Reference
	protected com.liferay.counter.kernel.service.CounterLocalService
		counterLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.ClassNameLocalService
		classNameLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.PortletPreferencesLocalService
		portletPreferencesLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.ResourceLocalService
		resourceLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.UserLocalService
		userLocalService;

	@Reference
	protected com.liferay.asset.kernel.service.AssetEntryLocalService
		assetEntryLocalService;

	@Reference
	protected com.liferay.asset.kernel.service.AssetLinkLocalService
		assetLinkLocalService;

	@Reference
	protected com.liferay.asset.kernel.service.AssetTagLocalService
		assetTagLocalService;

	@Reference
	protected com.liferay.document.library.kernel.service.DLFolderLocalService
		dlFolderLocalService;

}