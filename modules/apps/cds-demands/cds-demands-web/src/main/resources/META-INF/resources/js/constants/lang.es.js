const lang = {
    add: Liferay.Language.get('add'),
    cancel: Liferay.Language.get('cancel'),
    delete: Liferay.Language.get('delete'),
    description: Liferay.Language.get('description'),
    edit: Liferay.Language.get('edit'),
    error: Liferay.Language.get('error'),
    home: Liferay.Language.get('home'),
    info: Liferay.Language.get('info'),
    no: Liferay.Language.get('no'),
    ok: Liferay.Language.get('ok'),
    somethingWentWrong: Liferay.Language.get('something-went-wrong'),
    success: Liferay.Language.get('success'),
    save: Liferay.Language.get('save'),
    unexpectedError: Liferay.Language.get('an-unexpected-error-occurred'),
    unknown: Liferay.Language.get('unknown'),
    warn: Liferay.Language.get('warn'),
    yes: Liferay.Language.get('yes'),
    attachments: {
        attachments: Liferay.Language.get('attachments'),
        addedSuccessfully: Liferay.Language.get('file-x-added-successfully'),
        deleteconfirmation: Liferay.Language.get('delete-attachment-x-confirmation'),
        deletesuccess: Liferay.Language.get('attachment-x-deleted-successfully'),
        filetoolagre: Liferay.Language.get('please-enter-a-file-with-a-valid-file-size-no-larger-than-x'),
        selectFile: Liferay.Language.get('select-file-for-upload'),
    },
    cloudy: {
        prislibene: Liferay.Language.get('reserved-mds'),
        planovano: Liferay.Language.get('planned-mds'),
        planwaiting: Liferay.Language.get('pending-mds'),
        plandone: Liferay.Language.get('reported-done-mds'),
        planworking: Liferay.Language.get('reported-working-mds'),
        available: Liferay.Language.get('available-mds'),
        vykazanoclosed: Liferay.Language.get('time-spent-closed-mds'),
        vykazanoworking: Liferay.Language.get('time-spent-active-mds'),
        mdsOverview: Liferay.Language.get('mds-overview'),


    },
    comments: {
        add: Liferay.Language.get('add-comment'),
        comments: Liferay.Language.get('comments'),
        placeholder: Liferay.Language.get('type-your-comment'),
    },
    dashboards: {
        userDashboard: Liferay.Language.get('user-dashboard'),
        domainDashboard: Liferay.Language.get('domain-dashboard'),
        cdsDashboard: Liferay.Language.get('cds-dashboard'),
        domainxdemands: Liferay.Language.get('domain-x-demands'),
        showfinalstates: Liferay.Language.get('show-older-finalized-demands'),
        showothersdrafts: Liferay.Language.get('show-other-users-drafts'),
    },
    demand: {
        addNew: Liferay.Language.get('Add new'),
        confirmDelete: Liferay.Language.get('do-you-really-want-to*delete-demand-x'),
        demandx: Liferay.Language.get('cds-demand-x'),
        delegations: Liferay.Language.get('delegations'),
        delete: Liferay.Language.get('delete-demand'),
        editDemandX: Liferay.Language.get('edit-demand-x'),
        gouvernanceUpdated: Liferay.Language.get('governance-updated'),
        new: Liferay.Language.get('new-cds-demand'),
        successfullyDeleted: Liferay.Language.get('demand-x-successfully-deleted'),
        draftWarn: Liferay.Language.get('demand-is-in-draft-it-will-not-be-implemented'),
        contactHelp: Liferay.Language.get('person-that-cds-may-contact-about-request-details'),
        requestedForHelp: Liferay.Language.get('person-the-request-is-created-for-if-different-than-current-user-this-person-is-bearer-of-an-consts'),
        typeHelp: Liferay.Language.get('for-small-task-choose-ultraspeed-for-larger-ones-choose-business-standard'),
        priorityHelp: Liferay.Language.get('priority-in-accordance-to-your-other-requets'),
        banHelp: Liferay.Language.get('change-if-wrong'),
        spocHelp: Liferay.Language.get('change-if-wrong'),
        uscreatefolderdmpHelp: Liferay.Language.get('choose-if-you-do-not-want-to-receive-output-by-email'),
        usDPMNotificationMailHelp: Liferay.Language.get('email-to-receive-notifications-on-new-report-creation'),

    },
    errors: {
        notFound: Liferay.Language.get('demand-not-found'),
        notFoundDesc: Liferay.Language.get('demand-not-found-was-removed-or-does-not-exists'),
        deliveryInPast: Liferay.Language.get('cdsdemand-requesteddelivery-in-past'),
        requiredFiveTracks: Liferay.Language.get('cdsdemand-fivetracks-required'),
        requiredUsFolderDPM: Liferay.Language.get('cdsdemand-usfolderdpm-required'),
        requiredUsGestorFolderDPM: Liferay.Language.get('cdsdemand-usgestorfolderdpm-required'),
        requiredusreasoning: Liferay.Language.get('cdsdemand-usreasoning-required'),
        requiredusfrequencyout: Liferay.Language.get('cdsdemand-usfrequencyout-required'),
        requiredspoc: Liferay.Language.get('cdsdemand-spoc-required'),
        requiredban: Liferay.Language.get('cdsdemand-ban-required'),
        requiredrequesteddelivery: Liferay.Language.get('cdsdemand-requesteddelivery-required'),
        requiredpriority: Liferay.Language.get('cdsdemand-priority-required'),
        requireddescription: Liferay.Language.get('cdsdemand-description-required'),
        requiredtype: Liferay.Language.get('cdsdemand-type-required'),
        requiredtitle: Liferay.Language.get('cdsdemand-title-required'),
        toolongtitle: Liferay.Language.get('cdsdemand-title-too-long'),
        toolongreasoning: Liferay.Language.get('cdsdemand-reasoning-too-long'),
    },
    fields: {
        bioeid: Liferay.Language.get('cdsdemand-bioeid'),
        bioestatename: Liferay.Language.get('cdsdemand-bioestatename'),
        departmnet: Liferay.Language.get('cdsdemand-department'),
        description: Liferay.Language.get('cdsdemand-description'),
        domainName: Liferay.Language.get('cdsdemand-domainname'),
        fivetracks: Liferay.Language.get('cdsdemand-fivetracks'),
        type: Liferay.Language.get('cdsdemand-type'),
        usAccessDPM: Liferay.Language.get('cdsdemand-usAccessDPM'),
        usDPMNotificationMail: Liferay.Language.get('cdsdemand-usDPMNotificationMail'),
        usFolderDPM: Liferay.Language.get('cdsdemand-usFolderDPM'),
        usFrequencyOut: Liferay.Language.get('cdsdemand-usFrequencyOut'),
        usReasoning: Liferay.Language.get('cdsdemand-usReasoning'),
        usCreateFolderDPM: Liferay.Language.get('cdsdemand-usCreateFolderDPM'),
        usGestorFolderDPM: Liferay.Language.get('cdsdemand-usGestorFolderDPM'),
        workestimate: Liferay.Language.get('cdsdemand-workestimate'),
        acceptedworkestimate: Liferay.Language.get('cdsdemand-acceptedworkestimate'),
        expecteddelivery: Liferay.Language.get('cdsdemand-expecteddelivery'),
        accepteddelivery: Liferay.Language.get('cdsdemand-accepteddelivery'),
        priority: Liferay.Language.get('cdsdemand-priority'),
        requesteddelivery: Liferay.Language.get('cdsdemand-requesteddelivery'),
        isgdpr: Liferay.Language.get('cdsdemand-isgdpr'),
        requestor: Liferay.Language.get('cdsdemand-requestor'),
        requestedfor: Liferay.Language.get('cdsdemand-requestedfor'),
        contact: Liferay.Language.get('cdsdemand-contact'),
        spoc: Liferay.Language.get('cdsdemand-spocid'),
        ban: Liferay.Language.get('cdsdemand-banid'),
        title: Liferay.Language.get('cdsdemand-title'),

    },
    gdprinfo: {
        add: Liferay.Language.get('add-gdpr-info'),
        edit: Liferay.Language.get('edit-gdpr-info'),
        delete: Liferay.Language.get('delete-gdpr-info'),
        title: Liferay.Language.get('gdprinfo-title'),
        description: Liferay.Language.get('gdprinfo-description'),
        descriptionplchldr: Liferay.Language.get('insert-description-here'),
        isclient: Liferay.Language.get('gdprinfo-is-client-data'),
        isemployee: Liferay.Language.get('gdprinfo-is-employee-data'),
        category: Liferay.Language.get('gdprinfo-category'),
        reasoning: Liferay.Language.get('gdprinfo-reasoning'),
        emptywarning: Liferay.Language.get('add-gdpr-info-as-is-indicated'),
        confirmDeleteX: Liferay.Language.get('really-delete-gdprinfo-x'),
        titleRequired: Liferay.Language.get('title-required'),
        descriptionRequired: Liferay.Language.get('description-required'),
    },
    sections: {
        actions: Liferay.Language.get('actions'),
        bioe: Liferay.Language.get('bioe-informations'),
        gdprInfo: Liferay.Language.get('gdpr-info'),
        general: Liferay.Language.get('general-informations'),
        governance: Liferay.Language.get('governance'),
        myactionrequired: Liferay.Language.get('demands-requiring-my-action'),
        mydemands: Liferay.Language.get('my-demands'),
        ultraspeed: Liferay.Language.get('ultraspeed-informations'),
    },
    workflow:{
        actions:Liferay.Language.get('workflow-actions'),
        noActions:Liferay.Language.get('no-wf-actions-available'),
        transitionComment:Liferay.Language.get('transition-comment'),
    }



};

export {lang};