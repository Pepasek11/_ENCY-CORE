/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package cz.csob.ency.delegations.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import cz.csob.ency.delegations.model.DelegatedRole;
import cz.csob.ency.delegations.model.DelegatedRoleModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DelegatedRole service. Represents a row in the &quot;delegations_delegatedrole&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DelegatedRoleModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DelegatedRoleImpl}.
 * </p>
 *
 * @author Miroslav Čermák
 * @see DelegatedRoleImpl
 * @generated
 */
@JSON(strict = true)
public class DelegatedRoleModelImpl
	extends BaseModelImpl<DelegatedRole> implements DelegatedRoleModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a delegated role model instance should use the <code>DelegatedRole</code> interface instead.
	 */
	public static final String TABLE_NAME = "delegations_delegatedrole";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"roleId", Types.BIGINT},
		{"title", Types.VARCHAR}, {"code_", Types.VARCHAR},
		{"description", Types.VARCHAR}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("roleId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("code_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table delegations_delegatedrole (mvccVersion LONG default 0 not null,roleId LONG not null primary key,title VARCHAR(256) null,code_ VARCHAR(256) null,description VARCHAR(1024) null,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(256) null,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table delegations_delegatedrole";

	public static final String ORDER_BY_JPQL =
		" ORDER BY delegatedRole.roleId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY delegations_delegatedrole.roleId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CODE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ROLEID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DelegatedRoleModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _roleId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRoleId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _roleId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DelegatedRole.class;
	}

	@Override
	public String getModelClassName() {
		return DelegatedRole.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DelegatedRole, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DelegatedRole, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DelegatedRole, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DelegatedRole)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DelegatedRole, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DelegatedRole, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DelegatedRole)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DelegatedRole, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DelegatedRole, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<DelegatedRole, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DelegatedRole, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DelegatedRole, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<DelegatedRole, Object>>();
		Map<String, BiConsumer<DelegatedRole, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<DelegatedRole, ?>>();

		attributeGetterFunctions.put(
			"mvccVersion", DelegatedRole::getMvccVersion);
		attributeSetterBiConsumers.put(
			"mvccVersion",
			(BiConsumer<DelegatedRole, Long>)DelegatedRole::setMvccVersion);
		attributeGetterFunctions.put("roleId", DelegatedRole::getRoleId);
		attributeSetterBiConsumers.put(
			"roleId",
			(BiConsumer<DelegatedRole, Long>)DelegatedRole::setRoleId);
		attributeGetterFunctions.put("title", DelegatedRole::getTitle);
		attributeSetterBiConsumers.put(
			"title",
			(BiConsumer<DelegatedRole, String>)DelegatedRole::setTitle);
		attributeGetterFunctions.put("code", DelegatedRole::getCode);
		attributeSetterBiConsumers.put(
			"code", (BiConsumer<DelegatedRole, String>)DelegatedRole::setCode);
		attributeGetterFunctions.put(
			"description", DelegatedRole::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<DelegatedRole, String>)DelegatedRole::setDescription);
		attributeGetterFunctions.put("groupId", DelegatedRole::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<DelegatedRole, Long>)DelegatedRole::setGroupId);
		attributeGetterFunctions.put("companyId", DelegatedRole::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<DelegatedRole, Long>)DelegatedRole::setCompanyId);
		attributeGetterFunctions.put("userId", DelegatedRole::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<DelegatedRole, Long>)DelegatedRole::setUserId);
		attributeGetterFunctions.put("userName", DelegatedRole::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<DelegatedRole, String>)DelegatedRole::setUserName);
		attributeGetterFunctions.put(
			"createDate", DelegatedRole::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<DelegatedRole, Date>)DelegatedRole::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", DelegatedRole::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<DelegatedRole, Date>)DelegatedRole::setModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mvccVersion = mvccVersion;
	}

	@JSON
	@Override
	public long getRoleId() {
		return _roleId;
	}

	@Override
	public void setRoleId(long roleId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_roleId = roleId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalRoleId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("roleId"));
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_title = title;
	}

	@JSON
	@Override
	public String getCode() {
		if (_code == null) {
			return "";
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_code = code;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCode() {
		return getColumnOriginalValue("code_");
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), DelegatedRole.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DelegatedRole toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DelegatedRole>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DelegatedRoleImpl delegatedRoleImpl = new DelegatedRoleImpl();

		delegatedRoleImpl.setMvccVersion(getMvccVersion());
		delegatedRoleImpl.setRoleId(getRoleId());
		delegatedRoleImpl.setTitle(getTitle());
		delegatedRoleImpl.setCode(getCode());
		delegatedRoleImpl.setDescription(getDescription());
		delegatedRoleImpl.setGroupId(getGroupId());
		delegatedRoleImpl.setCompanyId(getCompanyId());
		delegatedRoleImpl.setUserId(getUserId());
		delegatedRoleImpl.setUserName(getUserName());
		delegatedRoleImpl.setCreateDate(getCreateDate());
		delegatedRoleImpl.setModifiedDate(getModifiedDate());

		delegatedRoleImpl.resetOriginalValues();

		return delegatedRoleImpl;
	}

	@Override
	public DelegatedRole cloneWithOriginalValues() {
		DelegatedRoleImpl delegatedRoleImpl = new DelegatedRoleImpl();

		delegatedRoleImpl.setMvccVersion(
			this.<Long>getColumnOriginalValue("mvccVersion"));
		delegatedRoleImpl.setRoleId(
			this.<Long>getColumnOriginalValue("roleId"));
		delegatedRoleImpl.setTitle(
			this.<String>getColumnOriginalValue("title"));
		delegatedRoleImpl.setCode(this.<String>getColumnOriginalValue("code_"));
		delegatedRoleImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));
		delegatedRoleImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		delegatedRoleImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		delegatedRoleImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		delegatedRoleImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		delegatedRoleImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		delegatedRoleImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));

		return delegatedRoleImpl;
	}

	@Override
	public int compareTo(DelegatedRole delegatedRole) {
		long primaryKey = delegatedRole.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DelegatedRole)) {
			return false;
		}

		DelegatedRole delegatedRole = (DelegatedRole)object;

		long primaryKey = delegatedRole.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DelegatedRole> toCacheModel() {
		DelegatedRoleCacheModel delegatedRoleCacheModel =
			new DelegatedRoleCacheModel();

		delegatedRoleCacheModel.mvccVersion = getMvccVersion();

		delegatedRoleCacheModel.roleId = getRoleId();

		delegatedRoleCacheModel.title = getTitle();

		String title = delegatedRoleCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			delegatedRoleCacheModel.title = null;
		}

		delegatedRoleCacheModel.code = getCode();

		String code = delegatedRoleCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			delegatedRoleCacheModel.code = null;
		}

		delegatedRoleCacheModel.description = getDescription();

		String description = delegatedRoleCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			delegatedRoleCacheModel.description = null;
		}

		delegatedRoleCacheModel.groupId = getGroupId();

		delegatedRoleCacheModel.companyId = getCompanyId();

		delegatedRoleCacheModel.userId = getUserId();

		delegatedRoleCacheModel.userName = getUserName();

		String userName = delegatedRoleCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			delegatedRoleCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			delegatedRoleCacheModel.createDate = createDate.getTime();
		}
		else {
			delegatedRoleCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			delegatedRoleCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			delegatedRoleCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return delegatedRoleCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DelegatedRole, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DelegatedRole, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DelegatedRole, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((DelegatedRole)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<DelegatedRole, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<DelegatedRole, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DelegatedRole, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((DelegatedRole)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DelegatedRole>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					DelegatedRole.class, ModelWrapper.class);

	}

	private long _mvccVersion;
	private long _roleId;
	private String _title;
	private String _code;
	private String _description;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<DelegatedRole, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((DelegatedRole)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("mvccVersion", _mvccVersion);
		_columnOriginalValues.put("roleId", _roleId);
		_columnOriginalValues.put("title", _title);
		_columnOriginalValues.put("code_", _code);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("code_", "code");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("mvccVersion", 1L);

		columnBitmasks.put("roleId", 2L);

		columnBitmasks.put("title", 4L);

		columnBitmasks.put("code_", 8L);

		columnBitmasks.put("description", 16L);

		columnBitmasks.put("groupId", 32L);

		columnBitmasks.put("companyId", 64L);

		columnBitmasks.put("userId", 128L);

		columnBitmasks.put("userName", 256L);

		columnBitmasks.put("createDate", 512L);

		columnBitmasks.put("modifiedDate", 1024L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private DelegatedRole _escapedModel;

}