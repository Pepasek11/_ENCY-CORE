/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package cz.csob.ency.modules.apps.meta.cds.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.NoSuchModelException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ContainerModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.TrashedModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import cz.csob.ency.modules.apps.meta.cds.model.ColumnEntry;
import cz.csob.ency.modules.apps.meta.cds.model.ColumnEntryModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ColumnEntry service. Represents a row in the &quot;MetaCds_ColumnEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ColumnEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ColumnEntryImpl}.
 * </p>
 *
 * @author "Miroslav Čermák"
 * @see ColumnEntryImpl
 * @generated
 */
@JSON(strict = true)
public class ColumnEntryModelImpl
	extends BaseModelImpl<ColumnEntry> implements ColumnEntryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a column entry model instance should use the <code>ColumnEntry</code> interface instead.
	 */
	public static final String TABLE_NAME = "MetaCds_ColumnEntry";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"uuid_", Types.VARCHAR},
		{"columnEntryId", Types.BIGINT}, {"columnType", Types.VARCHAR},
		{"columnName", Types.VARCHAR}, {"columnPosition", Types.BIGINT},
		{"columnFullName", Types.VARCHAR}, {"tableEntryId", Types.BIGINT},
		{"tableName", Types.VARCHAR}, {"systemName", Types.VARCHAR},
		{"databaseName", Types.VARCHAR}, {"description", Types.CLOB},
		{"dataType", Types.VARCHAR}, {"dataSize", Types.BIGINT},
		{"isPrimaryKey", Types.BOOLEAN}, {"isNotNull", Types.BOOLEAN},
		{"isActive", Types.BOOLEAN}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"urlTitle", Types.VARCHAR},
		{"status", Types.INTEGER}, {"statusByUserId", Types.BIGINT},
		{"statusByUserName", Types.VARCHAR}, {"statusDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("columnEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("columnType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("columnName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("columnPosition", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("columnFullName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tableEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tableName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("systemName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("databaseName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.CLOB);
		TABLE_COLUMNS_MAP.put("dataType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dataSize", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("isPrimaryKey", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("isNotNull", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("isActive", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("urlTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table MetaCds_ColumnEntry (mvccVersion LONG default 0 not null,uuid_ VARCHAR(75) null,columnEntryId LONG not null primary key,columnType VARCHAR(10) null,columnName VARCHAR(512) null,columnPosition LONG,columnFullName VARCHAR(512) null,tableEntryId LONG,tableName VARCHAR(512) null,systemName VARCHAR(10) null,databaseName VARCHAR(128) null,description TEXT null,dataType VARCHAR(32) null,dataSize LONG,isPrimaryKey BOOLEAN,isNotNull BOOLEAN,isActive BOOLEAN,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,urlTitle VARCHAR(256) null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table MetaCds_ColumnEntry";

	public static final String ORDER_BY_JPQL =
		" ORDER BY columnEntry.columnEntryId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY MetaCds_ColumnEntry.columnEntryId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COLUMNENTRYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COLUMNFULLNAME_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COLUMNNAME_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COLUMNTYPE_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DATABASENAME_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ISACTIVE_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STATUS_COLUMN_BITMASK = 256L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SYSTEMNAME_COLUMN_BITMASK = 512L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TABLEENTRYID_COLUMN_BITMASK = 1024L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long URLTITLE_COLUMN_BITMASK = 2048L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 4096L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8192L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ColumnEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _columnEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setColumnEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _columnEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ColumnEntry.class;
	}

	@Override
	public String getModelClassName() {
		return ColumnEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ColumnEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ColumnEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ColumnEntry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ColumnEntry)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ColumnEntry, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ColumnEntry, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ColumnEntry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ColumnEntry, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ColumnEntry, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<ColumnEntry, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ColumnEntry, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ColumnEntry, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ColumnEntry, Object>>();
		Map<String, BiConsumer<ColumnEntry, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ColumnEntry, ?>>();

		attributeGetterFunctions.put(
			"mvccVersion", ColumnEntry::getMvccVersion);
		attributeSetterBiConsumers.put(
			"mvccVersion",
			(BiConsumer<ColumnEntry, Long>)ColumnEntry::setMvccVersion);
		attributeGetterFunctions.put("uuid", ColumnEntry::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<ColumnEntry, String>)ColumnEntry::setUuid);
		attributeGetterFunctions.put(
			"columnEntryId", ColumnEntry::getColumnEntryId);
		attributeSetterBiConsumers.put(
			"columnEntryId",
			(BiConsumer<ColumnEntry, Long>)ColumnEntry::setColumnEntryId);
		attributeGetterFunctions.put("columnType", ColumnEntry::getColumnType);
		attributeSetterBiConsumers.put(
			"columnType",
			(BiConsumer<ColumnEntry, String>)ColumnEntry::setColumnType);
		attributeGetterFunctions.put("columnName", ColumnEntry::getColumnName);
		attributeSetterBiConsumers.put(
			"columnName",
			(BiConsumer<ColumnEntry, String>)ColumnEntry::setColumnName);
		attributeGetterFunctions.put(
			"columnPosition", ColumnEntry::getColumnPosition);
		attributeSetterBiConsumers.put(
			"columnPosition",
			(BiConsumer<ColumnEntry, Long>)ColumnEntry::setColumnPosition);
		attributeGetterFunctions.put(
			"columnFullName", ColumnEntry::getColumnFullName);
		attributeSetterBiConsumers.put(
			"columnFullName",
			(BiConsumer<ColumnEntry, String>)ColumnEntry::setColumnFullName);
		attributeGetterFunctions.put(
			"tableEntryId", ColumnEntry::getTableEntryId);
		attributeSetterBiConsumers.put(
			"tableEntryId",
			(BiConsumer<ColumnEntry, Long>)ColumnEntry::setTableEntryId);
		attributeGetterFunctions.put("tableName", ColumnEntry::getTableName);
		attributeSetterBiConsumers.put(
			"tableName",
			(BiConsumer<ColumnEntry, String>)ColumnEntry::setTableName);
		attributeGetterFunctions.put("systemName", ColumnEntry::getSystemName);
		attributeSetterBiConsumers.put(
			"systemName",
			(BiConsumer<ColumnEntry, String>)ColumnEntry::setSystemName);
		attributeGetterFunctions.put(
			"databaseName", ColumnEntry::getDatabaseName);
		attributeSetterBiConsumers.put(
			"databaseName",
			(BiConsumer<ColumnEntry, String>)ColumnEntry::setDatabaseName);
		attributeGetterFunctions.put(
			"description", ColumnEntry::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<ColumnEntry, String>)ColumnEntry::setDescription);
		attributeGetterFunctions.put("dataType", ColumnEntry::getDataType);
		attributeSetterBiConsumers.put(
			"dataType",
			(BiConsumer<ColumnEntry, String>)ColumnEntry::setDataType);
		attributeGetterFunctions.put("dataSize", ColumnEntry::getDataSize);
		attributeSetterBiConsumers.put(
			"dataSize",
			(BiConsumer<ColumnEntry, Long>)ColumnEntry::setDataSize);
		attributeGetterFunctions.put(
			"isPrimaryKey", ColumnEntry::getIsPrimaryKey);
		attributeSetterBiConsumers.put(
			"isPrimaryKey",
			(BiConsumer<ColumnEntry, Boolean>)ColumnEntry::setIsPrimaryKey);
		attributeGetterFunctions.put("isNotNull", ColumnEntry::getIsNotNull);
		attributeSetterBiConsumers.put(
			"isNotNull",
			(BiConsumer<ColumnEntry, Boolean>)ColumnEntry::setIsNotNull);
		attributeGetterFunctions.put("isActive", ColumnEntry::getIsActive);
		attributeSetterBiConsumers.put(
			"isActive",
			(BiConsumer<ColumnEntry, Boolean>)ColumnEntry::setIsActive);
		attributeGetterFunctions.put("groupId", ColumnEntry::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<ColumnEntry, Long>)ColumnEntry::setGroupId);
		attributeGetterFunctions.put("companyId", ColumnEntry::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<ColumnEntry, Long>)ColumnEntry::setCompanyId);
		attributeGetterFunctions.put("userId", ColumnEntry::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<ColumnEntry, Long>)ColumnEntry::setUserId);
		attributeGetterFunctions.put("userName", ColumnEntry::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<ColumnEntry, String>)ColumnEntry::setUserName);
		attributeGetterFunctions.put("createDate", ColumnEntry::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<ColumnEntry, Date>)ColumnEntry::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", ColumnEntry::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<ColumnEntry, Date>)ColumnEntry::setModifiedDate);
		attributeGetterFunctions.put("urlTitle", ColumnEntry::getUrlTitle);
		attributeSetterBiConsumers.put(
			"urlTitle",
			(BiConsumer<ColumnEntry, String>)ColumnEntry::setUrlTitle);
		attributeGetterFunctions.put("status", ColumnEntry::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<ColumnEntry, Integer>)ColumnEntry::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", ColumnEntry::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<ColumnEntry, Long>)ColumnEntry::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", ColumnEntry::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<ColumnEntry, String>)ColumnEntry::setStatusByUserName);
		attributeGetterFunctions.put("statusDate", ColumnEntry::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<ColumnEntry, Date>)ColumnEntry::setStatusDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mvccVersion = mvccVersion;
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getColumnEntryId() {
		return _columnEntryId;
	}

	@Override
	public void setColumnEntryId(long columnEntryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_columnEntryId = columnEntryId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalColumnEntryId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("columnEntryId"));
	}

	@JSON
	@Override
	public String getColumnType() {
		if (_columnType == null) {
			return "";
		}
		else {
			return _columnType;
		}
	}

	@Override
	public void setColumnType(String columnType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_columnType = columnType;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalColumnType() {
		return getColumnOriginalValue("columnType");
	}

	@JSON
	@Override
	public String getColumnName() {
		if (_columnName == null) {
			return "";
		}
		else {
			return _columnName;
		}
	}

	@Override
	public void setColumnName(String columnName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_columnName = columnName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalColumnName() {
		return getColumnOriginalValue("columnName");
	}

	@JSON
	@Override
	public long getColumnPosition() {
		return _columnPosition;
	}

	@Override
	public void setColumnPosition(long columnPosition) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_columnPosition = columnPosition;
	}

	@JSON
	@Override
	public String getColumnFullName() {
		if (_columnFullName == null) {
			return "";
		}
		else {
			return _columnFullName;
		}
	}

	@Override
	public void setColumnFullName(String columnFullName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_columnFullName = columnFullName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalColumnFullName() {
		return getColumnOriginalValue("columnFullName");
	}

	@JSON
	@Override
	public long getTableEntryId() {
		return _tableEntryId;
	}

	@Override
	public void setTableEntryId(long tableEntryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tableEntryId = tableEntryId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalTableEntryId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("tableEntryId"));
	}

	@JSON
	@Override
	public String getTableName() {
		if (_tableName == null) {
			return "";
		}
		else {
			return _tableName;
		}
	}

	@Override
	public void setTableName(String tableName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tableName = tableName;
	}

	@JSON
	@Override
	public String getSystemName() {
		if (_systemName == null) {
			return "";
		}
		else {
			return _systemName;
		}
	}

	@Override
	public void setSystemName(String systemName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_systemName = systemName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalSystemName() {
		return getColumnOriginalValue("systemName");
	}

	@JSON
	@Override
	public String getDatabaseName() {
		if (_databaseName == null) {
			return "";
		}
		else {
			return _databaseName;
		}
	}

	@Override
	public void setDatabaseName(String databaseName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_databaseName = databaseName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalDatabaseName() {
		return getColumnOriginalValue("databaseName");
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@JSON
	@Override
	public String getDataType() {
		if (_dataType == null) {
			return "";
		}
		else {
			return _dataType;
		}
	}

	@Override
	public void setDataType(String dataType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dataType = dataType;
	}

	@JSON
	@Override
	public long getDataSize() {
		return _dataSize;
	}

	@Override
	public void setDataSize(long dataSize) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dataSize = dataSize;
	}

	@JSON
	@Override
	public boolean getIsPrimaryKey() {
		return _isPrimaryKey;
	}

	@JSON
	@Override
	public boolean isIsPrimaryKey() {
		return _isPrimaryKey;
	}

	@Override
	public void setIsPrimaryKey(boolean isPrimaryKey) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isPrimaryKey = isPrimaryKey;
	}

	@JSON
	@Override
	public boolean getIsNotNull() {
		return _isNotNull;
	}

	@JSON
	@Override
	public boolean isIsNotNull() {
		return _isNotNull;
	}

	@Override
	public void setIsNotNull(boolean isNotNull) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isNotNull = isNotNull;
	}

	@JSON
	@Override
	public boolean getIsActive() {
		return _isActive;
	}

	@JSON
	@Override
	public boolean isIsActive() {
		return _isActive;
	}

	@Override
	public void setIsActive(boolean isActive) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isActive = isActive;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public boolean getOriginalIsActive() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("isActive"));
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getUrlTitle() {
		if (_urlTitle == null) {
			return "";
		}
		else {
			return _urlTitle;
		}
	}

	@Override
	public void setUrlTitle(String urlTitle) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_urlTitle = urlTitle;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUrlTitle() {
		return getColumnOriginalValue("urlTitle");
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalStatus() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("status"));
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(ColumnEntry.class.getName()));
	}

	@Override
	public com.liferay.trash.kernel.model.TrashEntry getTrashEntry()
		throws PortalException {

		if (!isInTrash()) {
			return null;
		}

		com.liferay.trash.kernel.model.TrashEntry trashEntry =
			com.liferay.trash.kernel.service.TrashEntryLocalServiceUtil.
				fetchEntry(getModelClassName(), getTrashEntryClassPK());

		if (trashEntry != null) {
			return trashEntry;
		}

		com.liferay.portal.kernel.trash.TrashHandler trashHandler =
			getTrashHandler();

		if (Validator.isNotNull(
				trashHandler.getContainerModelClassName(getPrimaryKey()))) {

			ContainerModel containerModel = null;

			try {
				containerModel = trashHandler.getParentContainerModel(this);
			}
			catch (NoSuchModelException noSuchModelException) {
				return null;
			}

			while (containerModel != null) {
				if (containerModel instanceof TrashedModel) {
					TrashedModel trashedModel = (TrashedModel)containerModel;

					return trashedModel.getTrashEntry();
				}

				trashHandler =
					com.liferay.portal.kernel.trash.TrashHandlerRegistryUtil.
						getTrashHandler(
							trashHandler.getContainerModelClassName(
								containerModel.getContainerModelId()));

				if (trashHandler == null) {
					return null;
				}

				containerModel = trashHandler.getContainerModel(
					containerModel.getParentContainerModelId());
			}
		}

		return null;
	}

	@Override
	public long getTrashEntryClassPK() {
		return getPrimaryKey();
	}

	/**
	 * @deprecated As of Judson (7.1.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public com.liferay.portal.kernel.trash.TrashHandler getTrashHandler() {
		return com.liferay.portal.kernel.trash.TrashHandlerRegistryUtil.
			getTrashHandler(getModelClassName());
	}

	@Override
	public boolean isInTrash() {
		if (getStatus() == WorkflowConstants.STATUS_IN_TRASH) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInTrashContainer() {
		com.liferay.portal.kernel.trash.TrashHandler trashHandler =
			getTrashHandler();

		if ((trashHandler == null) ||
			Validator.isNull(
				trashHandler.getContainerModelClassName(getPrimaryKey()))) {

			return false;
		}

		try {
			ContainerModel containerModel =
				trashHandler.getParentContainerModel(this);

			if (containerModel == null) {
				return false;
			}

			if (containerModel instanceof TrashedModel) {
				return ((TrashedModel)containerModel).isInTrash();
			}
		}
		catch (Exception exception) {
		}

		return false;
	}

	@Override
	public boolean isInTrashExplicitly() {
		if (!isInTrash()) {
			return false;
		}

		com.liferay.trash.kernel.model.TrashEntry trashEntry =
			com.liferay.trash.kernel.service.TrashEntryLocalServiceUtil.
				fetchEntry(getModelClassName(), getTrashEntryClassPK());

		if (trashEntry != null) {
			return true;
		}

		return false;
	}

	@Override
	public boolean isInTrashImplicitly() {
		if (!isInTrash()) {
			return false;
		}

		com.liferay.trash.kernel.model.TrashEntry trashEntry =
			com.liferay.trash.kernel.service.TrashEntryLocalServiceUtil.
				fetchEntry(getModelClassName(), getTrashEntryClassPK());

		if (trashEntry != null) {
			return false;
		}

		return true;
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ColumnEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ColumnEntry toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ColumnEntry>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ColumnEntryImpl columnEntryImpl = new ColumnEntryImpl();

		columnEntryImpl.setMvccVersion(getMvccVersion());
		columnEntryImpl.setUuid(getUuid());
		columnEntryImpl.setColumnEntryId(getColumnEntryId());
		columnEntryImpl.setColumnType(getColumnType());
		columnEntryImpl.setColumnName(getColumnName());
		columnEntryImpl.setColumnPosition(getColumnPosition());
		columnEntryImpl.setColumnFullName(getColumnFullName());
		columnEntryImpl.setTableEntryId(getTableEntryId());
		columnEntryImpl.setTableName(getTableName());
		columnEntryImpl.setSystemName(getSystemName());
		columnEntryImpl.setDatabaseName(getDatabaseName());
		columnEntryImpl.setDescription(getDescription());
		columnEntryImpl.setDataType(getDataType());
		columnEntryImpl.setDataSize(getDataSize());
		columnEntryImpl.setIsPrimaryKey(isIsPrimaryKey());
		columnEntryImpl.setIsNotNull(isIsNotNull());
		columnEntryImpl.setIsActive(isIsActive());
		columnEntryImpl.setGroupId(getGroupId());
		columnEntryImpl.setCompanyId(getCompanyId());
		columnEntryImpl.setUserId(getUserId());
		columnEntryImpl.setUserName(getUserName());
		columnEntryImpl.setCreateDate(getCreateDate());
		columnEntryImpl.setModifiedDate(getModifiedDate());
		columnEntryImpl.setUrlTitle(getUrlTitle());
		columnEntryImpl.setStatus(getStatus());
		columnEntryImpl.setStatusByUserId(getStatusByUserId());
		columnEntryImpl.setStatusByUserName(getStatusByUserName());
		columnEntryImpl.setStatusDate(getStatusDate());

		columnEntryImpl.resetOriginalValues();

		return columnEntryImpl;
	}

	@Override
	public ColumnEntry cloneWithOriginalValues() {
		ColumnEntryImpl columnEntryImpl = new ColumnEntryImpl();

		columnEntryImpl.setMvccVersion(
			this.<Long>getColumnOriginalValue("mvccVersion"));
		columnEntryImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		columnEntryImpl.setColumnEntryId(
			this.<Long>getColumnOriginalValue("columnEntryId"));
		columnEntryImpl.setColumnType(
			this.<String>getColumnOriginalValue("columnType"));
		columnEntryImpl.setColumnName(
			this.<String>getColumnOriginalValue("columnName"));
		columnEntryImpl.setColumnPosition(
			this.<Long>getColumnOriginalValue("columnPosition"));
		columnEntryImpl.setColumnFullName(
			this.<String>getColumnOriginalValue("columnFullName"));
		columnEntryImpl.setTableEntryId(
			this.<Long>getColumnOriginalValue("tableEntryId"));
		columnEntryImpl.setTableName(
			this.<String>getColumnOriginalValue("tableName"));
		columnEntryImpl.setSystemName(
			this.<String>getColumnOriginalValue("systemName"));
		columnEntryImpl.setDatabaseName(
			this.<String>getColumnOriginalValue("databaseName"));
		columnEntryImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));
		columnEntryImpl.setDataType(
			this.<String>getColumnOriginalValue("dataType"));
		columnEntryImpl.setDataSize(
			this.<Long>getColumnOriginalValue("dataSize"));
		columnEntryImpl.setIsPrimaryKey(
			this.<Boolean>getColumnOriginalValue("isPrimaryKey"));
		columnEntryImpl.setIsNotNull(
			this.<Boolean>getColumnOriginalValue("isNotNull"));
		columnEntryImpl.setIsActive(
			this.<Boolean>getColumnOriginalValue("isActive"));
		columnEntryImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		columnEntryImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		columnEntryImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		columnEntryImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		columnEntryImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		columnEntryImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		columnEntryImpl.setUrlTitle(
			this.<String>getColumnOriginalValue("urlTitle"));
		columnEntryImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		columnEntryImpl.setStatusByUserId(
			this.<Long>getColumnOriginalValue("statusByUserId"));
		columnEntryImpl.setStatusByUserName(
			this.<String>getColumnOriginalValue("statusByUserName"));
		columnEntryImpl.setStatusDate(
			this.<Date>getColumnOriginalValue("statusDate"));

		return columnEntryImpl;
	}

	@Override
	public int compareTo(ColumnEntry columnEntry) {
		long primaryKey = columnEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ColumnEntry)) {
			return false;
		}

		ColumnEntry columnEntry = (ColumnEntry)object;

		long primaryKey = columnEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ColumnEntry> toCacheModel() {
		ColumnEntryCacheModel columnEntryCacheModel =
			new ColumnEntryCacheModel();

		columnEntryCacheModel.mvccVersion = getMvccVersion();

		columnEntryCacheModel.uuid = getUuid();

		String uuid = columnEntryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			columnEntryCacheModel.uuid = null;
		}

		columnEntryCacheModel.columnEntryId = getColumnEntryId();

		columnEntryCacheModel.columnType = getColumnType();

		String columnType = columnEntryCacheModel.columnType;

		if ((columnType != null) && (columnType.length() == 0)) {
			columnEntryCacheModel.columnType = null;
		}

		columnEntryCacheModel.columnName = getColumnName();

		String columnName = columnEntryCacheModel.columnName;

		if ((columnName != null) && (columnName.length() == 0)) {
			columnEntryCacheModel.columnName = null;
		}

		columnEntryCacheModel.columnPosition = getColumnPosition();

		columnEntryCacheModel.columnFullName = getColumnFullName();

		String columnFullName = columnEntryCacheModel.columnFullName;

		if ((columnFullName != null) && (columnFullName.length() == 0)) {
			columnEntryCacheModel.columnFullName = null;
		}

		columnEntryCacheModel.tableEntryId = getTableEntryId();

		columnEntryCacheModel.tableName = getTableName();

		String tableName = columnEntryCacheModel.tableName;

		if ((tableName != null) && (tableName.length() == 0)) {
			columnEntryCacheModel.tableName = null;
		}

		columnEntryCacheModel.systemName = getSystemName();

		String systemName = columnEntryCacheModel.systemName;

		if ((systemName != null) && (systemName.length() == 0)) {
			columnEntryCacheModel.systemName = null;
		}

		columnEntryCacheModel.databaseName = getDatabaseName();

		String databaseName = columnEntryCacheModel.databaseName;

		if ((databaseName != null) && (databaseName.length() == 0)) {
			columnEntryCacheModel.databaseName = null;
		}

		columnEntryCacheModel.description = getDescription();

		String description = columnEntryCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			columnEntryCacheModel.description = null;
		}

		columnEntryCacheModel.dataType = getDataType();

		String dataType = columnEntryCacheModel.dataType;

		if ((dataType != null) && (dataType.length() == 0)) {
			columnEntryCacheModel.dataType = null;
		}

		columnEntryCacheModel.dataSize = getDataSize();

		columnEntryCacheModel.isPrimaryKey = isIsPrimaryKey();

		columnEntryCacheModel.isNotNull = isIsNotNull();

		columnEntryCacheModel.isActive = isIsActive();

		columnEntryCacheModel.groupId = getGroupId();

		columnEntryCacheModel.companyId = getCompanyId();

		columnEntryCacheModel.userId = getUserId();

		columnEntryCacheModel.userName = getUserName();

		String userName = columnEntryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			columnEntryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			columnEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			columnEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			columnEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			columnEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		columnEntryCacheModel.urlTitle = getUrlTitle();

		String urlTitle = columnEntryCacheModel.urlTitle;

		if ((urlTitle != null) && (urlTitle.length() == 0)) {
			columnEntryCacheModel.urlTitle = null;
		}

		columnEntryCacheModel.status = getStatus();

		columnEntryCacheModel.statusByUserId = getStatusByUserId();

		columnEntryCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = columnEntryCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			columnEntryCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			columnEntryCacheModel.statusDate = statusDate.getTime();
		}
		else {
			columnEntryCacheModel.statusDate = Long.MIN_VALUE;
		}

		return columnEntryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ColumnEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ColumnEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ColumnEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((ColumnEntry)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ColumnEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ColumnEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ColumnEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ColumnEntry)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ColumnEntry>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					ColumnEntry.class, ModelWrapper.class);

	}

	private long _mvccVersion;
	private String _uuid;
	private long _columnEntryId;
	private String _columnType;
	private String _columnName;
	private long _columnPosition;
	private String _columnFullName;
	private long _tableEntryId;
	private String _tableName;
	private String _systemName;
	private String _databaseName;
	private String _description;
	private String _dataType;
	private long _dataSize;
	private boolean _isPrimaryKey;
	private boolean _isNotNull;
	private boolean _isActive;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _urlTitle;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<ColumnEntry, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ColumnEntry)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("mvccVersion", _mvccVersion);
		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("columnEntryId", _columnEntryId);
		_columnOriginalValues.put("columnType", _columnType);
		_columnOriginalValues.put("columnName", _columnName);
		_columnOriginalValues.put("columnPosition", _columnPosition);
		_columnOriginalValues.put("columnFullName", _columnFullName);
		_columnOriginalValues.put("tableEntryId", _tableEntryId);
		_columnOriginalValues.put("tableName", _tableName);
		_columnOriginalValues.put("systemName", _systemName);
		_columnOriginalValues.put("databaseName", _databaseName);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("dataType", _dataType);
		_columnOriginalValues.put("dataSize", _dataSize);
		_columnOriginalValues.put("isPrimaryKey", _isPrimaryKey);
		_columnOriginalValues.put("isNotNull", _isNotNull);
		_columnOriginalValues.put("isActive", _isActive);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("urlTitle", _urlTitle);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("statusByUserId", _statusByUserId);
		_columnOriginalValues.put("statusByUserName", _statusByUserName);
		_columnOriginalValues.put("statusDate", _statusDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("mvccVersion", 1L);

		columnBitmasks.put("uuid_", 2L);

		columnBitmasks.put("columnEntryId", 4L);

		columnBitmasks.put("columnType", 8L);

		columnBitmasks.put("columnName", 16L);

		columnBitmasks.put("columnPosition", 32L);

		columnBitmasks.put("columnFullName", 64L);

		columnBitmasks.put("tableEntryId", 128L);

		columnBitmasks.put("tableName", 256L);

		columnBitmasks.put("systemName", 512L);

		columnBitmasks.put("databaseName", 1024L);

		columnBitmasks.put("description", 2048L);

		columnBitmasks.put("dataType", 4096L);

		columnBitmasks.put("dataSize", 8192L);

		columnBitmasks.put("isPrimaryKey", 16384L);

		columnBitmasks.put("isNotNull", 32768L);

		columnBitmasks.put("isActive", 65536L);

		columnBitmasks.put("groupId", 131072L);

		columnBitmasks.put("companyId", 262144L);

		columnBitmasks.put("userId", 524288L);

		columnBitmasks.put("userName", 1048576L);

		columnBitmasks.put("createDate", 2097152L);

		columnBitmasks.put("modifiedDate", 4194304L);

		columnBitmasks.put("urlTitle", 8388608L);

		columnBitmasks.put("status", 16777216L);

		columnBitmasks.put("statusByUserId", 33554432L);

		columnBitmasks.put("statusByUserName", 67108864L);

		columnBitmasks.put("statusDate", 134217728L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ColumnEntry _escapedModel;

}