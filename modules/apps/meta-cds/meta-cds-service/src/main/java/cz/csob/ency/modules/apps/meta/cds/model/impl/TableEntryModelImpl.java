/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package cz.csob.ency.modules.apps.meta.cds.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.NoSuchModelException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ContainerModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.TrashedModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import cz.csob.ency.modules.apps.meta.cds.model.TableEntry;
import cz.csob.ency.modules.apps.meta.cds.model.TableEntryModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the TableEntry service. Represents a row in the &quot;MetaCds_TableEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TableEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TableEntryImpl}.
 * </p>
 *
 * @author "Miroslav Čermák"
 * @see TableEntryImpl
 * @generated
 */
@JSON(strict = true)
public class TableEntryModelImpl
	extends BaseModelImpl<TableEntry> implements TableEntryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a table entry model instance should use the <code>TableEntry</code> interface instead.
	 */
	public static final String TABLE_NAME = "MetaCds_TableEntry";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"uuid_", Types.VARCHAR},
		{"tableEntryId", Types.BIGINT}, {"tableName", Types.VARCHAR},
		{"tableFullName", Types.VARCHAR}, {"tableType", Types.VARCHAR},
		{"tableDatabase", Types.VARCHAR}, {"systemEntryId", Types.BIGINT},
		{"systemName", Types.VARCHAR}, {"description", Types.CLOB},
		{"dsaUrl", Types.VARCHAR}, {"contactPersonName", Types.VARCHAR},
		{"contactPersonId", Types.VARCHAR},
		{"specificationOwnerName", Types.VARCHAR},
		{"specificationOwnerId", Types.VARCHAR},
		{"unstructuredClause", Types.CLOB}, {"isActive", Types.BOOLEAN},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"urlTitle", Types.VARCHAR}, {"status", Types.INTEGER},
		{"statusByUserId", Types.BIGINT}, {"statusByUserName", Types.VARCHAR},
		{"statusDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tableEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tableName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tableFullName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tableType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tableDatabase", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("systemEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("systemName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.CLOB);
		TABLE_COLUMNS_MAP.put("dsaUrl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contactPersonName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contactPersonId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("specificationOwnerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("specificationOwnerId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("unstructuredClause", Types.CLOB);
		TABLE_COLUMNS_MAP.put("isActive", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("urlTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table MetaCds_TableEntry (mvccVersion LONG default 0 not null,uuid_ VARCHAR(75) null,tableEntryId LONG not null primary key,tableName VARCHAR(512) null,tableFullName VARCHAR(512) null,tableType VARCHAR(10) null,tableDatabase VARCHAR(128) null,systemEntryId LONG,systemName VARCHAR(10) null,description TEXT null,dsaUrl STRING null,contactPersonName VARCHAR(3000) null,contactPersonId VARCHAR(300) null,specificationOwnerName VARCHAR(3000) null,specificationOwnerId VARCHAR(300) null,unstructuredClause TEXT null,isActive BOOLEAN,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,urlTitle VARCHAR(256) null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table MetaCds_TableEntry";

	public static final String ORDER_BY_JPQL =
		" ORDER BY tableEntry.tableEntryId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY MetaCds_TableEntry.tableEntryId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DESCRIPTION_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ISACTIVE_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STATUS_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SYSTEMENTRYID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TABLEDATABASE_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TABLEENTRYID_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TABLEFULLNAME_COLUMN_BITMASK = 256L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TABLENAME_COLUMN_BITMASK = 512L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TABLETYPE_COLUMN_BITMASK = 1024L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long URLTITLE_COLUMN_BITMASK = 2048L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 4096L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8192L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public TableEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _tableEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTableEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _tableEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TableEntry.class;
	}

	@Override
	public String getModelClassName() {
		return TableEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<TableEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<TableEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TableEntry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((TableEntry)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<TableEntry, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<TableEntry, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(TableEntry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<TableEntry, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<TableEntry, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<TableEntry, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<TableEntry, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<TableEntry, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<TableEntry, Object>>();
		Map<String, BiConsumer<TableEntry, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<TableEntry, ?>>();

		attributeGetterFunctions.put("mvccVersion", TableEntry::getMvccVersion);
		attributeSetterBiConsumers.put(
			"mvccVersion",
			(BiConsumer<TableEntry, Long>)TableEntry::setMvccVersion);
		attributeGetterFunctions.put("uuid", TableEntry::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<TableEntry, String>)TableEntry::setUuid);
		attributeGetterFunctions.put(
			"tableEntryId", TableEntry::getTableEntryId);
		attributeSetterBiConsumers.put(
			"tableEntryId",
			(BiConsumer<TableEntry, Long>)TableEntry::setTableEntryId);
		attributeGetterFunctions.put("tableName", TableEntry::getTableName);
		attributeSetterBiConsumers.put(
			"tableName",
			(BiConsumer<TableEntry, String>)TableEntry::setTableName);
		attributeGetterFunctions.put(
			"tableFullName", TableEntry::getTableFullName);
		attributeSetterBiConsumers.put(
			"tableFullName",
			(BiConsumer<TableEntry, String>)TableEntry::setTableFullName);
		attributeGetterFunctions.put("tableType", TableEntry::getTableType);
		attributeSetterBiConsumers.put(
			"tableType",
			(BiConsumer<TableEntry, String>)TableEntry::setTableType);
		attributeGetterFunctions.put(
			"tableDatabase", TableEntry::getTableDatabase);
		attributeSetterBiConsumers.put(
			"tableDatabase",
			(BiConsumer<TableEntry, String>)TableEntry::setTableDatabase);
		attributeGetterFunctions.put(
			"systemEntryId", TableEntry::getSystemEntryId);
		attributeSetterBiConsumers.put(
			"systemEntryId",
			(BiConsumer<TableEntry, Long>)TableEntry::setSystemEntryId);
		attributeGetterFunctions.put("systemName", TableEntry::getSystemName);
		attributeSetterBiConsumers.put(
			"systemName",
			(BiConsumer<TableEntry, String>)TableEntry::setSystemName);
		attributeGetterFunctions.put("description", TableEntry::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<TableEntry, String>)TableEntry::setDescription);
		attributeGetterFunctions.put("dsaUrl", TableEntry::getDsaUrl);
		attributeSetterBiConsumers.put(
			"dsaUrl", (BiConsumer<TableEntry, String>)TableEntry::setDsaUrl);
		attributeGetterFunctions.put(
			"contactPersonName", TableEntry::getContactPersonName);
		attributeSetterBiConsumers.put(
			"contactPersonName",
			(BiConsumer<TableEntry, String>)TableEntry::setContactPersonName);
		attributeGetterFunctions.put(
			"contactPersonId", TableEntry::getContactPersonId);
		attributeSetterBiConsumers.put(
			"contactPersonId",
			(BiConsumer<TableEntry, String>)TableEntry::setContactPersonId);
		attributeGetterFunctions.put(
			"specificationOwnerName", TableEntry::getSpecificationOwnerName);
		attributeSetterBiConsumers.put(
			"specificationOwnerName",
			(BiConsumer<TableEntry, String>)
				TableEntry::setSpecificationOwnerName);
		attributeGetterFunctions.put(
			"specificationOwnerId", TableEntry::getSpecificationOwnerId);
		attributeSetterBiConsumers.put(
			"specificationOwnerId",
			(BiConsumer<TableEntry, String>)
				TableEntry::setSpecificationOwnerId);
		attributeGetterFunctions.put(
			"unstructuredClause", TableEntry::getUnstructuredClause);
		attributeSetterBiConsumers.put(
			"unstructuredClause",
			(BiConsumer<TableEntry, String>)TableEntry::setUnstructuredClause);
		attributeGetterFunctions.put("isActive", TableEntry::getIsActive);
		attributeSetterBiConsumers.put(
			"isActive",
			(BiConsumer<TableEntry, Boolean>)TableEntry::setIsActive);
		attributeGetterFunctions.put("groupId", TableEntry::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<TableEntry, Long>)TableEntry::setGroupId);
		attributeGetterFunctions.put("companyId", TableEntry::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<TableEntry, Long>)TableEntry::setCompanyId);
		attributeGetterFunctions.put("userId", TableEntry::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<TableEntry, Long>)TableEntry::setUserId);
		attributeGetterFunctions.put("userName", TableEntry::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<TableEntry, String>)TableEntry::setUserName);
		attributeGetterFunctions.put("createDate", TableEntry::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<TableEntry, Date>)TableEntry::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", TableEntry::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<TableEntry, Date>)TableEntry::setModifiedDate);
		attributeGetterFunctions.put("urlTitle", TableEntry::getUrlTitle);
		attributeSetterBiConsumers.put(
			"urlTitle",
			(BiConsumer<TableEntry, String>)TableEntry::setUrlTitle);
		attributeGetterFunctions.put("status", TableEntry::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<TableEntry, Integer>)TableEntry::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", TableEntry::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<TableEntry, Long>)TableEntry::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", TableEntry::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<TableEntry, String>)TableEntry::setStatusByUserName);
		attributeGetterFunctions.put("statusDate", TableEntry::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<TableEntry, Date>)TableEntry::setStatusDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mvccVersion = mvccVersion;
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getTableEntryId() {
		return _tableEntryId;
	}

	@Override
	public void setTableEntryId(long tableEntryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tableEntryId = tableEntryId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalTableEntryId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("tableEntryId"));
	}

	@JSON
	@Override
	public String getTableName() {
		if (_tableName == null) {
			return "";
		}
		else {
			return _tableName;
		}
	}

	@Override
	public void setTableName(String tableName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tableName = tableName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalTableName() {
		return getColumnOriginalValue("tableName");
	}

	@JSON
	@Override
	public String getTableFullName() {
		if (_tableFullName == null) {
			return "";
		}
		else {
			return _tableFullName;
		}
	}

	@Override
	public void setTableFullName(String tableFullName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tableFullName = tableFullName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalTableFullName() {
		return getColumnOriginalValue("tableFullName");
	}

	@JSON
	@Override
	public String getTableType() {
		if (_tableType == null) {
			return "";
		}
		else {
			return _tableType;
		}
	}

	@Override
	public void setTableType(String tableType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tableType = tableType;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalTableType() {
		return getColumnOriginalValue("tableType");
	}

	@JSON
	@Override
	public String getTableDatabase() {
		if (_tableDatabase == null) {
			return "";
		}
		else {
			return _tableDatabase;
		}
	}

	@Override
	public void setTableDatabase(String tableDatabase) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tableDatabase = tableDatabase;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalTableDatabase() {
		return getColumnOriginalValue("tableDatabase");
	}

	@JSON
	@Override
	public long getSystemEntryId() {
		return _systemEntryId;
	}

	@Override
	public void setSystemEntryId(long systemEntryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_systemEntryId = systemEntryId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalSystemEntryId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("systemEntryId"));
	}

	@JSON
	@Override
	public String getSystemName() {
		if (_systemName == null) {
			return "";
		}
		else {
			return _systemName;
		}
	}

	@Override
	public void setSystemName(String systemName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_systemName = systemName;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalDescription() {
		return getColumnOriginalValue("description");
	}

	@JSON
	@Override
	public String getDsaUrl() {
		if (_dsaUrl == null) {
			return "";
		}
		else {
			return _dsaUrl;
		}
	}

	@Override
	public void setDsaUrl(String dsaUrl) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dsaUrl = dsaUrl;
	}

	@JSON
	@Override
	public String getContactPersonName() {
		if (_contactPersonName == null) {
			return "";
		}
		else {
			return _contactPersonName;
		}
	}

	@Override
	public void setContactPersonName(String contactPersonName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contactPersonName = contactPersonName;
	}

	@JSON
	@Override
	public String getContactPersonId() {
		if (_contactPersonId == null) {
			return "";
		}
		else {
			return _contactPersonId;
		}
	}

	@Override
	public void setContactPersonId(String contactPersonId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contactPersonId = contactPersonId;
	}

	@JSON
	@Override
	public String getSpecificationOwnerName() {
		if (_specificationOwnerName == null) {
			return "";
		}
		else {
			return _specificationOwnerName;
		}
	}

	@Override
	public void setSpecificationOwnerName(String specificationOwnerName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_specificationOwnerName = specificationOwnerName;
	}

	@JSON
	@Override
	public String getSpecificationOwnerId() {
		if (_specificationOwnerId == null) {
			return "";
		}
		else {
			return _specificationOwnerId;
		}
	}

	@Override
	public void setSpecificationOwnerId(String specificationOwnerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_specificationOwnerId = specificationOwnerId;
	}

	@JSON
	@Override
	public String getUnstructuredClause() {
		if (_unstructuredClause == null) {
			return "";
		}
		else {
			return _unstructuredClause;
		}
	}

	@Override
	public void setUnstructuredClause(String unstructuredClause) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_unstructuredClause = unstructuredClause;
	}

	@JSON
	@Override
	public boolean getIsActive() {
		return _isActive;
	}

	@JSON
	@Override
	public boolean isIsActive() {
		return _isActive;
	}

	@Override
	public void setIsActive(boolean isActive) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isActive = isActive;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public boolean getOriginalIsActive() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("isActive"));
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getUrlTitle() {
		if (_urlTitle == null) {
			return "";
		}
		else {
			return _urlTitle;
		}
	}

	@Override
	public void setUrlTitle(String urlTitle) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_urlTitle = urlTitle;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUrlTitle() {
		return getColumnOriginalValue("urlTitle");
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalStatus() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("status"));
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(TableEntry.class.getName()));
	}

	@Override
	public com.liferay.trash.kernel.model.TrashEntry getTrashEntry()
		throws PortalException {

		if (!isInTrash()) {
			return null;
		}

		com.liferay.trash.kernel.model.TrashEntry trashEntry =
			com.liferay.trash.kernel.service.TrashEntryLocalServiceUtil.
				fetchEntry(getModelClassName(), getTrashEntryClassPK());

		if (trashEntry != null) {
			return trashEntry;
		}

		com.liferay.portal.kernel.trash.TrashHandler trashHandler =
			getTrashHandler();

		if (Validator.isNotNull(
				trashHandler.getContainerModelClassName(getPrimaryKey()))) {

			ContainerModel containerModel = null;

			try {
				containerModel = trashHandler.getParentContainerModel(this);
			}
			catch (NoSuchModelException noSuchModelException) {
				return null;
			}

			while (containerModel != null) {
				if (containerModel instanceof TrashedModel) {
					TrashedModel trashedModel = (TrashedModel)containerModel;

					return trashedModel.getTrashEntry();
				}

				trashHandler =
					com.liferay.portal.kernel.trash.TrashHandlerRegistryUtil.
						getTrashHandler(
							trashHandler.getContainerModelClassName(
								containerModel.getContainerModelId()));

				if (trashHandler == null) {
					return null;
				}

				containerModel = trashHandler.getContainerModel(
					containerModel.getParentContainerModelId());
			}
		}

		return null;
	}

	@Override
	public long getTrashEntryClassPK() {
		return getPrimaryKey();
	}

	/**
	 * @deprecated As of Judson (7.1.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public com.liferay.portal.kernel.trash.TrashHandler getTrashHandler() {
		return com.liferay.portal.kernel.trash.TrashHandlerRegistryUtil.
			getTrashHandler(getModelClassName());
	}

	@Override
	public boolean isInTrash() {
		if (getStatus() == WorkflowConstants.STATUS_IN_TRASH) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInTrashContainer() {
		com.liferay.portal.kernel.trash.TrashHandler trashHandler =
			getTrashHandler();

		if ((trashHandler == null) ||
			Validator.isNull(
				trashHandler.getContainerModelClassName(getPrimaryKey()))) {

			return false;
		}

		try {
			ContainerModel containerModel =
				trashHandler.getParentContainerModel(this);

			if (containerModel == null) {
				return false;
			}

			if (containerModel instanceof TrashedModel) {
				return ((TrashedModel)containerModel).isInTrash();
			}
		}
		catch (Exception exception) {
		}

		return false;
	}

	@Override
	public boolean isInTrashExplicitly() {
		if (!isInTrash()) {
			return false;
		}

		com.liferay.trash.kernel.model.TrashEntry trashEntry =
			com.liferay.trash.kernel.service.TrashEntryLocalServiceUtil.
				fetchEntry(getModelClassName(), getTrashEntryClassPK());

		if (trashEntry != null) {
			return true;
		}

		return false;
	}

	@Override
	public boolean isInTrashImplicitly() {
		if (!isInTrash()) {
			return false;
		}

		com.liferay.trash.kernel.model.TrashEntry trashEntry =
			com.liferay.trash.kernel.service.TrashEntryLocalServiceUtil.
				fetchEntry(getModelClassName(), getTrashEntryClassPK());

		if (trashEntry != null) {
			return false;
		}

		return true;
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), TableEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TableEntry toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, TableEntry>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TableEntryImpl tableEntryImpl = new TableEntryImpl();

		tableEntryImpl.setMvccVersion(getMvccVersion());
		tableEntryImpl.setUuid(getUuid());
		tableEntryImpl.setTableEntryId(getTableEntryId());
		tableEntryImpl.setTableName(getTableName());
		tableEntryImpl.setTableFullName(getTableFullName());
		tableEntryImpl.setTableType(getTableType());
		tableEntryImpl.setTableDatabase(getTableDatabase());
		tableEntryImpl.setSystemEntryId(getSystemEntryId());
		tableEntryImpl.setSystemName(getSystemName());
		tableEntryImpl.setDescription(getDescription());
		tableEntryImpl.setDsaUrl(getDsaUrl());
		tableEntryImpl.setContactPersonName(getContactPersonName());
		tableEntryImpl.setContactPersonId(getContactPersonId());
		tableEntryImpl.setSpecificationOwnerName(getSpecificationOwnerName());
		tableEntryImpl.setSpecificationOwnerId(getSpecificationOwnerId());
		tableEntryImpl.setUnstructuredClause(getUnstructuredClause());
		tableEntryImpl.setIsActive(isIsActive());
		tableEntryImpl.setGroupId(getGroupId());
		tableEntryImpl.setCompanyId(getCompanyId());
		tableEntryImpl.setUserId(getUserId());
		tableEntryImpl.setUserName(getUserName());
		tableEntryImpl.setCreateDate(getCreateDate());
		tableEntryImpl.setModifiedDate(getModifiedDate());
		tableEntryImpl.setUrlTitle(getUrlTitle());
		tableEntryImpl.setStatus(getStatus());
		tableEntryImpl.setStatusByUserId(getStatusByUserId());
		tableEntryImpl.setStatusByUserName(getStatusByUserName());
		tableEntryImpl.setStatusDate(getStatusDate());

		tableEntryImpl.resetOriginalValues();

		return tableEntryImpl;
	}

	@Override
	public TableEntry cloneWithOriginalValues() {
		TableEntryImpl tableEntryImpl = new TableEntryImpl();

		tableEntryImpl.setMvccVersion(
			this.<Long>getColumnOriginalValue("mvccVersion"));
		tableEntryImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		tableEntryImpl.setTableEntryId(
			this.<Long>getColumnOriginalValue("tableEntryId"));
		tableEntryImpl.setTableName(
			this.<String>getColumnOriginalValue("tableName"));
		tableEntryImpl.setTableFullName(
			this.<String>getColumnOriginalValue("tableFullName"));
		tableEntryImpl.setTableType(
			this.<String>getColumnOriginalValue("tableType"));
		tableEntryImpl.setTableDatabase(
			this.<String>getColumnOriginalValue("tableDatabase"));
		tableEntryImpl.setSystemEntryId(
			this.<Long>getColumnOriginalValue("systemEntryId"));
		tableEntryImpl.setSystemName(
			this.<String>getColumnOriginalValue("systemName"));
		tableEntryImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));
		tableEntryImpl.setDsaUrl(this.<String>getColumnOriginalValue("dsaUrl"));
		tableEntryImpl.setContactPersonName(
			this.<String>getColumnOriginalValue("contactPersonName"));
		tableEntryImpl.setContactPersonId(
			this.<String>getColumnOriginalValue("contactPersonId"));
		tableEntryImpl.setSpecificationOwnerName(
			this.<String>getColumnOriginalValue("specificationOwnerName"));
		tableEntryImpl.setSpecificationOwnerId(
			this.<String>getColumnOriginalValue("specificationOwnerId"));
		tableEntryImpl.setUnstructuredClause(
			this.<String>getColumnOriginalValue("unstructuredClause"));
		tableEntryImpl.setIsActive(
			this.<Boolean>getColumnOriginalValue("isActive"));
		tableEntryImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		tableEntryImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		tableEntryImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		tableEntryImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		tableEntryImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		tableEntryImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		tableEntryImpl.setUrlTitle(
			this.<String>getColumnOriginalValue("urlTitle"));
		tableEntryImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		tableEntryImpl.setStatusByUserId(
			this.<Long>getColumnOriginalValue("statusByUserId"));
		tableEntryImpl.setStatusByUserName(
			this.<String>getColumnOriginalValue("statusByUserName"));
		tableEntryImpl.setStatusDate(
			this.<Date>getColumnOriginalValue("statusDate"));

		return tableEntryImpl;
	}

	@Override
	public int compareTo(TableEntry tableEntry) {
		long primaryKey = tableEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof TableEntry)) {
			return false;
		}

		TableEntry tableEntry = (TableEntry)object;

		long primaryKey = tableEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<TableEntry> toCacheModel() {
		TableEntryCacheModel tableEntryCacheModel = new TableEntryCacheModel();

		tableEntryCacheModel.mvccVersion = getMvccVersion();

		tableEntryCacheModel.uuid = getUuid();

		String uuid = tableEntryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			tableEntryCacheModel.uuid = null;
		}

		tableEntryCacheModel.tableEntryId = getTableEntryId();

		tableEntryCacheModel.tableName = getTableName();

		String tableName = tableEntryCacheModel.tableName;

		if ((tableName != null) && (tableName.length() == 0)) {
			tableEntryCacheModel.tableName = null;
		}

		tableEntryCacheModel.tableFullName = getTableFullName();

		String tableFullName = tableEntryCacheModel.tableFullName;

		if ((tableFullName != null) && (tableFullName.length() == 0)) {
			tableEntryCacheModel.tableFullName = null;
		}

		tableEntryCacheModel.tableType = getTableType();

		String tableType = tableEntryCacheModel.tableType;

		if ((tableType != null) && (tableType.length() == 0)) {
			tableEntryCacheModel.tableType = null;
		}

		tableEntryCacheModel.tableDatabase = getTableDatabase();

		String tableDatabase = tableEntryCacheModel.tableDatabase;

		if ((tableDatabase != null) && (tableDatabase.length() == 0)) {
			tableEntryCacheModel.tableDatabase = null;
		}

		tableEntryCacheModel.systemEntryId = getSystemEntryId();

		tableEntryCacheModel.systemName = getSystemName();

		String systemName = tableEntryCacheModel.systemName;

		if ((systemName != null) && (systemName.length() == 0)) {
			tableEntryCacheModel.systemName = null;
		}

		tableEntryCacheModel.description = getDescription();

		String description = tableEntryCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			tableEntryCacheModel.description = null;
		}

		tableEntryCacheModel.dsaUrl = getDsaUrl();

		String dsaUrl = tableEntryCacheModel.dsaUrl;

		if ((dsaUrl != null) && (dsaUrl.length() == 0)) {
			tableEntryCacheModel.dsaUrl = null;
		}

		tableEntryCacheModel.contactPersonName = getContactPersonName();

		String contactPersonName = tableEntryCacheModel.contactPersonName;

		if ((contactPersonName != null) && (contactPersonName.length() == 0)) {
			tableEntryCacheModel.contactPersonName = null;
		}

		tableEntryCacheModel.contactPersonId = getContactPersonId();

		String contactPersonId = tableEntryCacheModel.contactPersonId;

		if ((contactPersonId != null) && (contactPersonId.length() == 0)) {
			tableEntryCacheModel.contactPersonId = null;
		}

		tableEntryCacheModel.specificationOwnerName =
			getSpecificationOwnerName();

		String specificationOwnerName =
			tableEntryCacheModel.specificationOwnerName;

		if ((specificationOwnerName != null) &&
			(specificationOwnerName.length() == 0)) {

			tableEntryCacheModel.specificationOwnerName = null;
		}

		tableEntryCacheModel.specificationOwnerId = getSpecificationOwnerId();

		String specificationOwnerId = tableEntryCacheModel.specificationOwnerId;

		if ((specificationOwnerId != null) &&
			(specificationOwnerId.length() == 0)) {

			tableEntryCacheModel.specificationOwnerId = null;
		}

		tableEntryCacheModel.unstructuredClause = getUnstructuredClause();

		String unstructuredClause = tableEntryCacheModel.unstructuredClause;

		if ((unstructuredClause != null) &&
			(unstructuredClause.length() == 0)) {

			tableEntryCacheModel.unstructuredClause = null;
		}

		tableEntryCacheModel.isActive = isIsActive();

		tableEntryCacheModel.groupId = getGroupId();

		tableEntryCacheModel.companyId = getCompanyId();

		tableEntryCacheModel.userId = getUserId();

		tableEntryCacheModel.userName = getUserName();

		String userName = tableEntryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			tableEntryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			tableEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			tableEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			tableEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			tableEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		tableEntryCacheModel.urlTitle = getUrlTitle();

		String urlTitle = tableEntryCacheModel.urlTitle;

		if ((urlTitle != null) && (urlTitle.length() == 0)) {
			tableEntryCacheModel.urlTitle = null;
		}

		tableEntryCacheModel.status = getStatus();

		tableEntryCacheModel.statusByUserId = getStatusByUserId();

		tableEntryCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = tableEntryCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			tableEntryCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			tableEntryCacheModel.statusDate = statusDate.getTime();
		}
		else {
			tableEntryCacheModel.statusDate = Long.MIN_VALUE;
		}

		return tableEntryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<TableEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<TableEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TableEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((TableEntry)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<TableEntry, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<TableEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TableEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((TableEntry)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, TableEntry>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					TableEntry.class, ModelWrapper.class);

	}

	private long _mvccVersion;
	private String _uuid;
	private long _tableEntryId;
	private String _tableName;
	private String _tableFullName;
	private String _tableType;
	private String _tableDatabase;
	private long _systemEntryId;
	private String _systemName;
	private String _description;
	private String _dsaUrl;
	private String _contactPersonName;
	private String _contactPersonId;
	private String _specificationOwnerName;
	private String _specificationOwnerId;
	private String _unstructuredClause;
	private boolean _isActive;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _urlTitle;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<TableEntry, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((TableEntry)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("mvccVersion", _mvccVersion);
		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("tableEntryId", _tableEntryId);
		_columnOriginalValues.put("tableName", _tableName);
		_columnOriginalValues.put("tableFullName", _tableFullName);
		_columnOriginalValues.put("tableType", _tableType);
		_columnOriginalValues.put("tableDatabase", _tableDatabase);
		_columnOriginalValues.put("systemEntryId", _systemEntryId);
		_columnOriginalValues.put("systemName", _systemName);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("dsaUrl", _dsaUrl);
		_columnOriginalValues.put("contactPersonName", _contactPersonName);
		_columnOriginalValues.put("contactPersonId", _contactPersonId);
		_columnOriginalValues.put(
			"specificationOwnerName", _specificationOwnerName);
		_columnOriginalValues.put(
			"specificationOwnerId", _specificationOwnerId);
		_columnOriginalValues.put("unstructuredClause", _unstructuredClause);
		_columnOriginalValues.put("isActive", _isActive);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("urlTitle", _urlTitle);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("statusByUserId", _statusByUserId);
		_columnOriginalValues.put("statusByUserName", _statusByUserName);
		_columnOriginalValues.put("statusDate", _statusDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("mvccVersion", 1L);

		columnBitmasks.put("uuid_", 2L);

		columnBitmasks.put("tableEntryId", 4L);

		columnBitmasks.put("tableName", 8L);

		columnBitmasks.put("tableFullName", 16L);

		columnBitmasks.put("tableType", 32L);

		columnBitmasks.put("tableDatabase", 64L);

		columnBitmasks.put("systemEntryId", 128L);

		columnBitmasks.put("systemName", 256L);

		columnBitmasks.put("description", 512L);

		columnBitmasks.put("dsaUrl", 1024L);

		columnBitmasks.put("contactPersonName", 2048L);

		columnBitmasks.put("contactPersonId", 4096L);

		columnBitmasks.put("specificationOwnerName", 8192L);

		columnBitmasks.put("specificationOwnerId", 16384L);

		columnBitmasks.put("unstructuredClause", 32768L);

		columnBitmasks.put("isActive", 65536L);

		columnBitmasks.put("groupId", 131072L);

		columnBitmasks.put("companyId", 262144L);

		columnBitmasks.put("userId", 524288L);

		columnBitmasks.put("userName", 1048576L);

		columnBitmasks.put("createDate", 2097152L);

		columnBitmasks.put("modifiedDate", 4194304L);

		columnBitmasks.put("urlTitle", 8388608L);

		columnBitmasks.put("status", 16777216L);

		columnBitmasks.put("statusByUserId", 33554432L);

		columnBitmasks.put("statusByUserName", 67108864L);

		columnBitmasks.put("statusDate", 134217728L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private TableEntry _escapedModel;

}