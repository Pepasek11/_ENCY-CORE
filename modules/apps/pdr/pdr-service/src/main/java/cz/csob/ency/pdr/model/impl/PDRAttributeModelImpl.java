/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package cz.csob.ency.pdr.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import cz.csob.ency.pdr.model.PDRAttribute;
import cz.csob.ency.pdr.model.PDRAttributeModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the PDRAttribute service. Represents a row in the &quot;pdr_attribute&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PDRAttributeModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PDRAttributeImpl}.
 * </p>
 *
 * @author Miroslav Čermák
 * @see PDRAttributeImpl
 * @generated
 */
@JSON(strict = true)
public class PDRAttributeModelImpl
	extends BaseModelImpl<PDRAttribute> implements PDRAttributeModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a pdr attribute model instance should use the <code>PDRAttribute</code> interface instead.
	 */
	public static final String TABLE_NAME = "pdr_attribute";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"attributeId", Types.BIGINT},
		{"fullName", Types.VARCHAR}, {"parentId", Types.BIGINT},
		{"nameCz", Types.VARCHAR}, {"nameEn", Types.VARCHAR},
		{"nameSk", Types.VARCHAR}, {"order_", Types.INTEGER},
		{"level", Types.INTEGER}, {"idsPath", Types.VARCHAR},
		{"description", Types.VARCHAR}, {"personalDataTypeId", Types.BIGINT},
		{"tagName", Types.VARCHAR}, {"isRoA", Types.BOOLEAN},
		{"isRtP", Types.BOOLEAN}, {"separatorBefore", Types.VARCHAR},
		{"separatorAfter", Types.VARCHAR}, {"isMerge", Types.BOOLEAN},
		{"isLabel", Types.BOOLEAN}, {"isObject", Types.BOOLEAN},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("attributeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fullName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("parentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nameCz", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nameEn", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nameSk", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("order_", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("level", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("idsPath", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("personalDataTypeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tagName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isRoA", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("isRtP", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("separatorBefore", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("separatorAfter", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isMerge", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("isLabel", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("isObject", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table pdr_attribute (mvccVersion LONG default 0 not null,attributeId LONG not null primary key,fullName VARCHAR(75) null,parentId LONG,nameCz VARCHAR(75) null,nameEn VARCHAR(75) null,nameSk VARCHAR(75) null,order_ INTEGER,level INTEGER,idsPath VARCHAR(75) null,description VARCHAR(75) null,personalDataTypeId LONG,tagName VARCHAR(75) null,isRoA BOOLEAN,isRtP BOOLEAN,separatorBefore VARCHAR(75) null,separatorAfter VARCHAR(75) null,isMerge BOOLEAN,isLabel BOOLEAN,isObject BOOLEAN,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table pdr_attribute";

	public static final String ORDER_BY_JPQL =
		" ORDER BY pdrAttribute.attributeId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY pdr_attribute.attributeId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ATTRIBUTEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public PDRAttributeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _attributeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAttributeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _attributeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PDRAttribute.class;
	}

	@Override
	public String getModelClassName() {
		return PDRAttribute.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<PDRAttribute, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<PDRAttribute, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PDRAttribute, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((PDRAttribute)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<PDRAttribute, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<PDRAttribute, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(PDRAttribute)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<PDRAttribute, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<PDRAttribute, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<PDRAttribute, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<PDRAttribute, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<PDRAttribute, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<PDRAttribute, Object>>();
		Map<String, BiConsumer<PDRAttribute, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<PDRAttribute, ?>>();

		attributeGetterFunctions.put(
			"mvccVersion", PDRAttribute::getMvccVersion);
		attributeSetterBiConsumers.put(
			"mvccVersion",
			(BiConsumer<PDRAttribute, Long>)PDRAttribute::setMvccVersion);
		attributeGetterFunctions.put(
			"attributeId", PDRAttribute::getAttributeId);
		attributeSetterBiConsumers.put(
			"attributeId",
			(BiConsumer<PDRAttribute, Long>)PDRAttribute::setAttributeId);
		attributeGetterFunctions.put("fullName", PDRAttribute::getFullName);
		attributeSetterBiConsumers.put(
			"fullName",
			(BiConsumer<PDRAttribute, String>)PDRAttribute::setFullName);
		attributeGetterFunctions.put("parentId", PDRAttribute::getParentId);
		attributeSetterBiConsumers.put(
			"parentId",
			(BiConsumer<PDRAttribute, Long>)PDRAttribute::setParentId);
		attributeGetterFunctions.put("nameCz", PDRAttribute::getNameCz);
		attributeSetterBiConsumers.put(
			"nameCz",
			(BiConsumer<PDRAttribute, String>)PDRAttribute::setNameCz);
		attributeGetterFunctions.put("nameEn", PDRAttribute::getNameEn);
		attributeSetterBiConsumers.put(
			"nameEn",
			(BiConsumer<PDRAttribute, String>)PDRAttribute::setNameEn);
		attributeGetterFunctions.put("nameSk", PDRAttribute::getNameSk);
		attributeSetterBiConsumers.put(
			"nameSk",
			(BiConsumer<PDRAttribute, String>)PDRAttribute::setNameSk);
		attributeGetterFunctions.put("order", PDRAttribute::getOrder);
		attributeSetterBiConsumers.put(
			"order", (BiConsumer<PDRAttribute, Integer>)PDRAttribute::setOrder);
		attributeGetterFunctions.put("level", PDRAttribute::getLevel);
		attributeSetterBiConsumers.put(
			"level", (BiConsumer<PDRAttribute, Integer>)PDRAttribute::setLevel);
		attributeGetterFunctions.put("idsPath", PDRAttribute::getIdsPath);
		attributeSetterBiConsumers.put(
			"idsPath",
			(BiConsumer<PDRAttribute, String>)PDRAttribute::setIdsPath);
		attributeGetterFunctions.put(
			"description", PDRAttribute::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<PDRAttribute, String>)PDRAttribute::setDescription);
		attributeGetterFunctions.put(
			"personalDataTypeId", PDRAttribute::getPersonalDataTypeId);
		attributeSetterBiConsumers.put(
			"personalDataTypeId",
			(BiConsumer<PDRAttribute, Long>)
				PDRAttribute::setPersonalDataTypeId);
		attributeGetterFunctions.put("tagName", PDRAttribute::getTagName);
		attributeSetterBiConsumers.put(
			"tagName",
			(BiConsumer<PDRAttribute, String>)PDRAttribute::setTagName);
		attributeGetterFunctions.put("isRoA", PDRAttribute::getIsRoA);
		attributeSetterBiConsumers.put(
			"isRoA", (BiConsumer<PDRAttribute, Boolean>)PDRAttribute::setIsRoA);
		attributeGetterFunctions.put("isRtP", PDRAttribute::getIsRtP);
		attributeSetterBiConsumers.put(
			"isRtP", (BiConsumer<PDRAttribute, Boolean>)PDRAttribute::setIsRtP);
		attributeGetterFunctions.put(
			"separatorBefore", PDRAttribute::getSeparatorBefore);
		attributeSetterBiConsumers.put(
			"separatorBefore",
			(BiConsumer<PDRAttribute, String>)PDRAttribute::setSeparatorBefore);
		attributeGetterFunctions.put(
			"separatorAfter", PDRAttribute::getSeparatorAfter);
		attributeSetterBiConsumers.put(
			"separatorAfter",
			(BiConsumer<PDRAttribute, String>)PDRAttribute::setSeparatorAfter);
		attributeGetterFunctions.put("isMerge", PDRAttribute::getIsMerge);
		attributeSetterBiConsumers.put(
			"isMerge",
			(BiConsumer<PDRAttribute, Boolean>)PDRAttribute::setIsMerge);
		attributeGetterFunctions.put("isLabel", PDRAttribute::getIsLabel);
		attributeSetterBiConsumers.put(
			"isLabel",
			(BiConsumer<PDRAttribute, Boolean>)PDRAttribute::setIsLabel);
		attributeGetterFunctions.put("isObject", PDRAttribute::getIsObject);
		attributeSetterBiConsumers.put(
			"isObject",
			(BiConsumer<PDRAttribute, Boolean>)PDRAttribute::setIsObject);
		attributeGetterFunctions.put("groupId", PDRAttribute::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<PDRAttribute, Long>)PDRAttribute::setGroupId);
		attributeGetterFunctions.put("companyId", PDRAttribute::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<PDRAttribute, Long>)PDRAttribute::setCompanyId);
		attributeGetterFunctions.put("userId", PDRAttribute::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<PDRAttribute, Long>)PDRAttribute::setUserId);
		attributeGetterFunctions.put("userName", PDRAttribute::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<PDRAttribute, String>)PDRAttribute::setUserName);
		attributeGetterFunctions.put("createDate", PDRAttribute::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<PDRAttribute, Date>)PDRAttribute::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", PDRAttribute::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<PDRAttribute, Date>)PDRAttribute::setModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mvccVersion = mvccVersion;
	}

	@JSON
	@Override
	public long getAttributeId() {
		return _attributeId;
	}

	@Override
	public void setAttributeId(long attributeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attributeId = attributeId;
	}

	@JSON
	@Override
	public String getFullName() {
		if (_fullName == null) {
			return "";
		}
		else {
			return _fullName;
		}
	}

	@Override
	public void setFullName(String fullName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fullName = fullName;
	}

	@JSON
	@Override
	public long getParentId() {
		return _parentId;
	}

	@Override
	public void setParentId(long parentId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_parentId = parentId;
	}

	@JSON
	@Override
	public String getNameCz() {
		if (_nameCz == null) {
			return "";
		}
		else {
			return _nameCz;
		}
	}

	@Override
	public void setNameCz(String nameCz) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameCz = nameCz;
	}

	@JSON
	@Override
	public String getNameEn() {
		if (_nameEn == null) {
			return "";
		}
		else {
			return _nameEn;
		}
	}

	@Override
	public void setNameEn(String nameEn) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameEn = nameEn;
	}

	@JSON
	@Override
	public String getNameSk() {
		if (_nameSk == null) {
			return "";
		}
		else {
			return _nameSk;
		}
	}

	@Override
	public void setNameSk(String nameSk) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nameSk = nameSk;
	}

	@JSON
	@Override
	public int getOrder() {
		return _order;
	}

	@Override
	public void setOrder(int order) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_order = order;
	}

	@JSON
	@Override
	public int getLevel() {
		return _level;
	}

	@Override
	public void setLevel(int level) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_level = level;
	}

	@JSON
	@Override
	public String getIdsPath() {
		if (_idsPath == null) {
			return "";
		}
		else {
			return _idsPath;
		}
	}

	@Override
	public void setIdsPath(String idsPath) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_idsPath = idsPath;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@JSON
	@Override
	public long getPersonalDataTypeId() {
		return _personalDataTypeId;
	}

	@Override
	public void setPersonalDataTypeId(long personalDataTypeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_personalDataTypeId = personalDataTypeId;
	}

	@JSON
	@Override
	public String getTagName() {
		if (_tagName == null) {
			return "";
		}
		else {
			return _tagName;
		}
	}

	@Override
	public void setTagName(String tagName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tagName = tagName;
	}

	@JSON
	@Override
	public boolean getIsRoA() {
		return _isRoA;
	}

	@JSON
	@Override
	public boolean isIsRoA() {
		return _isRoA;
	}

	@Override
	public void setIsRoA(boolean isRoA) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isRoA = isRoA;
	}

	@JSON
	@Override
	public boolean getIsRtP() {
		return _isRtP;
	}

	@JSON
	@Override
	public boolean isIsRtP() {
		return _isRtP;
	}

	@Override
	public void setIsRtP(boolean isRtP) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isRtP = isRtP;
	}

	@JSON
	@Override
	public String getSeparatorBefore() {
		if (_separatorBefore == null) {
			return "";
		}
		else {
			return _separatorBefore;
		}
	}

	@Override
	public void setSeparatorBefore(String separatorBefore) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_separatorBefore = separatorBefore;
	}

	@JSON
	@Override
	public String getSeparatorAfter() {
		if (_separatorAfter == null) {
			return "";
		}
		else {
			return _separatorAfter;
		}
	}

	@Override
	public void setSeparatorAfter(String separatorAfter) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_separatorAfter = separatorAfter;
	}

	@JSON
	@Override
	public boolean getIsMerge() {
		return _isMerge;
	}

	@JSON
	@Override
	public boolean isIsMerge() {
		return _isMerge;
	}

	@Override
	public void setIsMerge(boolean isMerge) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isMerge = isMerge;
	}

	@JSON
	@Override
	public boolean getIsLabel() {
		return _isLabel;
	}

	@JSON
	@Override
	public boolean isIsLabel() {
		return _isLabel;
	}

	@Override
	public void setIsLabel(boolean isLabel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isLabel = isLabel;
	}

	@JSON
	@Override
	public boolean getIsObject() {
		return _isObject;
	}

	@JSON
	@Override
	public boolean isIsObject() {
		return _isObject;
	}

	@Override
	public void setIsObject(boolean isObject) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isObject = isObject;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), PDRAttribute.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PDRAttribute toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, PDRAttribute>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PDRAttributeImpl pdrAttributeImpl = new PDRAttributeImpl();

		pdrAttributeImpl.setMvccVersion(getMvccVersion());
		pdrAttributeImpl.setAttributeId(getAttributeId());
		pdrAttributeImpl.setFullName(getFullName());
		pdrAttributeImpl.setParentId(getParentId());
		pdrAttributeImpl.setNameCz(getNameCz());
		pdrAttributeImpl.setNameEn(getNameEn());
		pdrAttributeImpl.setNameSk(getNameSk());
		pdrAttributeImpl.setOrder(getOrder());
		pdrAttributeImpl.setLevel(getLevel());
		pdrAttributeImpl.setIdsPath(getIdsPath());
		pdrAttributeImpl.setDescription(getDescription());
		pdrAttributeImpl.setPersonalDataTypeId(getPersonalDataTypeId());
		pdrAttributeImpl.setTagName(getTagName());
		pdrAttributeImpl.setIsRoA(isIsRoA());
		pdrAttributeImpl.setIsRtP(isIsRtP());
		pdrAttributeImpl.setSeparatorBefore(getSeparatorBefore());
		pdrAttributeImpl.setSeparatorAfter(getSeparatorAfter());
		pdrAttributeImpl.setIsMerge(isIsMerge());
		pdrAttributeImpl.setIsLabel(isIsLabel());
		pdrAttributeImpl.setIsObject(isIsObject());
		pdrAttributeImpl.setGroupId(getGroupId());
		pdrAttributeImpl.setCompanyId(getCompanyId());
		pdrAttributeImpl.setUserId(getUserId());
		pdrAttributeImpl.setUserName(getUserName());
		pdrAttributeImpl.setCreateDate(getCreateDate());
		pdrAttributeImpl.setModifiedDate(getModifiedDate());

		pdrAttributeImpl.resetOriginalValues();

		return pdrAttributeImpl;
	}

	@Override
	public PDRAttribute cloneWithOriginalValues() {
		PDRAttributeImpl pdrAttributeImpl = new PDRAttributeImpl();

		pdrAttributeImpl.setMvccVersion(
			this.<Long>getColumnOriginalValue("mvccVersion"));
		pdrAttributeImpl.setAttributeId(
			this.<Long>getColumnOriginalValue("attributeId"));
		pdrAttributeImpl.setFullName(
			this.<String>getColumnOriginalValue("fullName"));
		pdrAttributeImpl.setParentId(
			this.<Long>getColumnOriginalValue("parentId"));
		pdrAttributeImpl.setNameCz(
			this.<String>getColumnOriginalValue("nameCz"));
		pdrAttributeImpl.setNameEn(
			this.<String>getColumnOriginalValue("nameEn"));
		pdrAttributeImpl.setNameSk(
			this.<String>getColumnOriginalValue("nameSk"));
		pdrAttributeImpl.setOrder(
			this.<Integer>getColumnOriginalValue("order_"));
		pdrAttributeImpl.setLevel(
			this.<Integer>getColumnOriginalValue("level"));
		pdrAttributeImpl.setIdsPath(
			this.<String>getColumnOriginalValue("idsPath"));
		pdrAttributeImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));
		pdrAttributeImpl.setPersonalDataTypeId(
			this.<Long>getColumnOriginalValue("personalDataTypeId"));
		pdrAttributeImpl.setTagName(
			this.<String>getColumnOriginalValue("tagName"));
		pdrAttributeImpl.setIsRoA(
			this.<Boolean>getColumnOriginalValue("isRoA"));
		pdrAttributeImpl.setIsRtP(
			this.<Boolean>getColumnOriginalValue("isRtP"));
		pdrAttributeImpl.setSeparatorBefore(
			this.<String>getColumnOriginalValue("separatorBefore"));
		pdrAttributeImpl.setSeparatorAfter(
			this.<String>getColumnOriginalValue("separatorAfter"));
		pdrAttributeImpl.setIsMerge(
			this.<Boolean>getColumnOriginalValue("isMerge"));
		pdrAttributeImpl.setIsLabel(
			this.<Boolean>getColumnOriginalValue("isLabel"));
		pdrAttributeImpl.setIsObject(
			this.<Boolean>getColumnOriginalValue("isObject"));
		pdrAttributeImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		pdrAttributeImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		pdrAttributeImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		pdrAttributeImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		pdrAttributeImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		pdrAttributeImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));

		return pdrAttributeImpl;
	}

	@Override
	public int compareTo(PDRAttribute pdrAttribute) {
		long primaryKey = pdrAttribute.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof PDRAttribute)) {
			return false;
		}

		PDRAttribute pdrAttribute = (PDRAttribute)object;

		long primaryKey = pdrAttribute.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<PDRAttribute> toCacheModel() {
		PDRAttributeCacheModel pdrAttributeCacheModel =
			new PDRAttributeCacheModel();

		pdrAttributeCacheModel.mvccVersion = getMvccVersion();

		pdrAttributeCacheModel.attributeId = getAttributeId();

		pdrAttributeCacheModel.fullName = getFullName();

		String fullName = pdrAttributeCacheModel.fullName;

		if ((fullName != null) && (fullName.length() == 0)) {
			pdrAttributeCacheModel.fullName = null;
		}

		pdrAttributeCacheModel.parentId = getParentId();

		pdrAttributeCacheModel.nameCz = getNameCz();

		String nameCz = pdrAttributeCacheModel.nameCz;

		if ((nameCz != null) && (nameCz.length() == 0)) {
			pdrAttributeCacheModel.nameCz = null;
		}

		pdrAttributeCacheModel.nameEn = getNameEn();

		String nameEn = pdrAttributeCacheModel.nameEn;

		if ((nameEn != null) && (nameEn.length() == 0)) {
			pdrAttributeCacheModel.nameEn = null;
		}

		pdrAttributeCacheModel.nameSk = getNameSk();

		String nameSk = pdrAttributeCacheModel.nameSk;

		if ((nameSk != null) && (nameSk.length() == 0)) {
			pdrAttributeCacheModel.nameSk = null;
		}

		pdrAttributeCacheModel.order = getOrder();

		pdrAttributeCacheModel.level = getLevel();

		pdrAttributeCacheModel.idsPath = getIdsPath();

		String idsPath = pdrAttributeCacheModel.idsPath;

		if ((idsPath != null) && (idsPath.length() == 0)) {
			pdrAttributeCacheModel.idsPath = null;
		}

		pdrAttributeCacheModel.description = getDescription();

		String description = pdrAttributeCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			pdrAttributeCacheModel.description = null;
		}

		pdrAttributeCacheModel.personalDataTypeId = getPersonalDataTypeId();

		pdrAttributeCacheModel.tagName = getTagName();

		String tagName = pdrAttributeCacheModel.tagName;

		if ((tagName != null) && (tagName.length() == 0)) {
			pdrAttributeCacheModel.tagName = null;
		}

		pdrAttributeCacheModel.isRoA = isIsRoA();

		pdrAttributeCacheModel.isRtP = isIsRtP();

		pdrAttributeCacheModel.separatorBefore = getSeparatorBefore();

		String separatorBefore = pdrAttributeCacheModel.separatorBefore;

		if ((separatorBefore != null) && (separatorBefore.length() == 0)) {
			pdrAttributeCacheModel.separatorBefore = null;
		}

		pdrAttributeCacheModel.separatorAfter = getSeparatorAfter();

		String separatorAfter = pdrAttributeCacheModel.separatorAfter;

		if ((separatorAfter != null) && (separatorAfter.length() == 0)) {
			pdrAttributeCacheModel.separatorAfter = null;
		}

		pdrAttributeCacheModel.isMerge = isIsMerge();

		pdrAttributeCacheModel.isLabel = isIsLabel();

		pdrAttributeCacheModel.isObject = isIsObject();

		pdrAttributeCacheModel.groupId = getGroupId();

		pdrAttributeCacheModel.companyId = getCompanyId();

		pdrAttributeCacheModel.userId = getUserId();

		pdrAttributeCacheModel.userName = getUserName();

		String userName = pdrAttributeCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			pdrAttributeCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			pdrAttributeCacheModel.createDate = createDate.getTime();
		}
		else {
			pdrAttributeCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			pdrAttributeCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			pdrAttributeCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return pdrAttributeCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<PDRAttribute, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<PDRAttribute, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PDRAttribute, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((PDRAttribute)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<PDRAttribute, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<PDRAttribute, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PDRAttribute, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((PDRAttribute)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, PDRAttribute>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					PDRAttribute.class, ModelWrapper.class);

	}

	private long _mvccVersion;
	private long _attributeId;
	private String _fullName;
	private long _parentId;
	private String _nameCz;
	private String _nameEn;
	private String _nameSk;
	private int _order;
	private int _level;
	private String _idsPath;
	private String _description;
	private long _personalDataTypeId;
	private String _tagName;
	private boolean _isRoA;
	private boolean _isRtP;
	private String _separatorBefore;
	private String _separatorAfter;
	private boolean _isMerge;
	private boolean _isLabel;
	private boolean _isObject;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<PDRAttribute, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((PDRAttribute)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("mvccVersion", _mvccVersion);
		_columnOriginalValues.put("attributeId", _attributeId);
		_columnOriginalValues.put("fullName", _fullName);
		_columnOriginalValues.put("parentId", _parentId);
		_columnOriginalValues.put("nameCz", _nameCz);
		_columnOriginalValues.put("nameEn", _nameEn);
		_columnOriginalValues.put("nameSk", _nameSk);
		_columnOriginalValues.put("order_", _order);
		_columnOriginalValues.put("level", _level);
		_columnOriginalValues.put("idsPath", _idsPath);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("personalDataTypeId", _personalDataTypeId);
		_columnOriginalValues.put("tagName", _tagName);
		_columnOriginalValues.put("isRoA", _isRoA);
		_columnOriginalValues.put("isRtP", _isRtP);
		_columnOriginalValues.put("separatorBefore", _separatorBefore);
		_columnOriginalValues.put("separatorAfter", _separatorAfter);
		_columnOriginalValues.put("isMerge", _isMerge);
		_columnOriginalValues.put("isLabel", _isLabel);
		_columnOriginalValues.put("isObject", _isObject);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("order_", "order");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("mvccVersion", 1L);

		columnBitmasks.put("attributeId", 2L);

		columnBitmasks.put("fullName", 4L);

		columnBitmasks.put("parentId", 8L);

		columnBitmasks.put("nameCz", 16L);

		columnBitmasks.put("nameEn", 32L);

		columnBitmasks.put("nameSk", 64L);

		columnBitmasks.put("order_", 128L);

		columnBitmasks.put("level", 256L);

		columnBitmasks.put("idsPath", 512L);

		columnBitmasks.put("description", 1024L);

		columnBitmasks.put("personalDataTypeId", 2048L);

		columnBitmasks.put("tagName", 4096L);

		columnBitmasks.put("isRoA", 8192L);

		columnBitmasks.put("isRtP", 16384L);

		columnBitmasks.put("separatorBefore", 32768L);

		columnBitmasks.put("separatorAfter", 65536L);

		columnBitmasks.put("isMerge", 131072L);

		columnBitmasks.put("isLabel", 262144L);

		columnBitmasks.put("isObject", 524288L);

		columnBitmasks.put("groupId", 1048576L);

		columnBitmasks.put("companyId", 2097152L);

		columnBitmasks.put("userId", 4194304L);

		columnBitmasks.put("userName", 8388608L);

		columnBitmasks.put("createDate", 16777216L);

		columnBitmasks.put("modifiedDate", 33554432L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private PDRAttribute _escapedModel;

}