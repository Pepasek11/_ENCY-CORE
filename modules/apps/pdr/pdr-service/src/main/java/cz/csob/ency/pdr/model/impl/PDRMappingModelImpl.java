/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package cz.csob.ency.pdr.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import cz.csob.ency.pdr.model.PDRMapping;
import cz.csob.ency.pdr.model.PDRMappingModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the PDRMapping service. Represents a row in the &quot;pdr_mapping&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PDRMappingModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PDRMappingImpl}.
 * </p>
 *
 * @author Miroslav Čermák
 * @see PDRMappingImpl
 * @generated
 */
@JSON(strict = true)
public class PDRMappingModelImpl
	extends BaseModelImpl<PDRMapping> implements PDRMappingModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a pdr mapping model instance should use the <code>PDRMapping</code> interface instead.
	 */
	public static final String TABLE_NAME = "pdr_mapping";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"mappingId", Types.BIGINT},
		{"title", Types.VARCHAR}, {"systemId", Types.BIGINT},
		{"tableId", Types.BIGINT}, {"columnId", Types.BIGINT},
		{"attributeId", Types.BIGINT}, {"mappingRules", Types.VARCHAR},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"state_", Types.VARCHAR}, {"stateByUserId", Types.BIGINT},
		{"stateByUserName", Types.VARCHAR}, {"stateDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mappingId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("systemId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tableId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("columnId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("attributeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mappingRules", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("state_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stateByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("stateByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stateDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table pdr_mapping (mvccVersion LONG default 0 not null,mappingId LONG not null primary key,title VARCHAR(75) null,systemId LONG,tableId LONG,columnId LONG,attributeId LONG,mappingRules VARCHAR(75) null,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,state_ VARCHAR(75) null,stateByUserId LONG,stateByUserName VARCHAR(75) null,stateDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table pdr_mapping";

	public static final String ORDER_BY_JPQL =
		" ORDER BY pdrMapping.mappingId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY pdr_mapping.mappingId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MAPPINGID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public PDRMappingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _mappingId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMappingId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _mappingId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PDRMapping.class;
	}

	@Override
	public String getModelClassName() {
		return PDRMapping.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<PDRMapping, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<PDRMapping, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PDRMapping, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((PDRMapping)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<PDRMapping, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<PDRMapping, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(PDRMapping)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<PDRMapping, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<PDRMapping, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<PDRMapping, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<PDRMapping, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<PDRMapping, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<PDRMapping, Object>>();
		Map<String, BiConsumer<PDRMapping, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<PDRMapping, ?>>();

		attributeGetterFunctions.put("mvccVersion", PDRMapping::getMvccVersion);
		attributeSetterBiConsumers.put(
			"mvccVersion",
			(BiConsumer<PDRMapping, Long>)PDRMapping::setMvccVersion);
		attributeGetterFunctions.put("mappingId", PDRMapping::getMappingId);
		attributeSetterBiConsumers.put(
			"mappingId",
			(BiConsumer<PDRMapping, Long>)PDRMapping::setMappingId);
		attributeGetterFunctions.put("title", PDRMapping::getTitle);
		attributeSetterBiConsumers.put(
			"title", (BiConsumer<PDRMapping, String>)PDRMapping::setTitle);
		attributeGetterFunctions.put("systemId", PDRMapping::getSystemId);
		attributeSetterBiConsumers.put(
			"systemId", (BiConsumer<PDRMapping, Long>)PDRMapping::setSystemId);
		attributeGetterFunctions.put("tableId", PDRMapping::getTableId);
		attributeSetterBiConsumers.put(
			"tableId", (BiConsumer<PDRMapping, Long>)PDRMapping::setTableId);
		attributeGetterFunctions.put("columnId", PDRMapping::getColumnId);
		attributeSetterBiConsumers.put(
			"columnId", (BiConsumer<PDRMapping, Long>)PDRMapping::setColumnId);
		attributeGetterFunctions.put("attributeId", PDRMapping::getAttributeId);
		attributeSetterBiConsumers.put(
			"attributeId",
			(BiConsumer<PDRMapping, Long>)PDRMapping::setAttributeId);
		attributeGetterFunctions.put(
			"mappingRules", PDRMapping::getMappingRules);
		attributeSetterBiConsumers.put(
			"mappingRules",
			(BiConsumer<PDRMapping, String>)PDRMapping::setMappingRules);
		attributeGetterFunctions.put("groupId", PDRMapping::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<PDRMapping, Long>)PDRMapping::setGroupId);
		attributeGetterFunctions.put("companyId", PDRMapping::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<PDRMapping, Long>)PDRMapping::setCompanyId);
		attributeGetterFunctions.put("userId", PDRMapping::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<PDRMapping, Long>)PDRMapping::setUserId);
		attributeGetterFunctions.put("userName", PDRMapping::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<PDRMapping, String>)PDRMapping::setUserName);
		attributeGetterFunctions.put("createDate", PDRMapping::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<PDRMapping, Date>)PDRMapping::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", PDRMapping::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<PDRMapping, Date>)PDRMapping::setModifiedDate);
		attributeGetterFunctions.put("state", PDRMapping::getState);
		attributeSetterBiConsumers.put(
			"state", (BiConsumer<PDRMapping, String>)PDRMapping::setState);
		attributeGetterFunctions.put(
			"stateByUserId", PDRMapping::getStateByUserId);
		attributeSetterBiConsumers.put(
			"stateByUserId",
			(BiConsumer<PDRMapping, Long>)PDRMapping::setStateByUserId);
		attributeGetterFunctions.put(
			"stateByUserName", PDRMapping::getStateByUserName);
		attributeSetterBiConsumers.put(
			"stateByUserName",
			(BiConsumer<PDRMapping, String>)PDRMapping::setStateByUserName);
		attributeGetterFunctions.put("stateDate", PDRMapping::getStateDate);
		attributeSetterBiConsumers.put(
			"stateDate",
			(BiConsumer<PDRMapping, Date>)PDRMapping::setStateDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mvccVersion = mvccVersion;
	}

	@JSON
	@Override
	public long getMappingId() {
		return _mappingId;
	}

	@Override
	public void setMappingId(long mappingId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mappingId = mappingId;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_title = title;
	}

	@JSON
	@Override
	public long getSystemId() {
		return _systemId;
	}

	@Override
	public void setSystemId(long systemId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_systemId = systemId;
	}

	@JSON
	@Override
	public long getTableId() {
		return _tableId;
	}

	@Override
	public void setTableId(long tableId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tableId = tableId;
	}

	@JSON
	@Override
	public long getColumnId() {
		return _columnId;
	}

	@Override
	public void setColumnId(long columnId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_columnId = columnId;
	}

	@JSON
	@Override
	public long getAttributeId() {
		return _attributeId;
	}

	@Override
	public void setAttributeId(long attributeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_attributeId = attributeId;
	}

	@JSON
	@Override
	public String getMappingRules() {
		if (_mappingRules == null) {
			return "";
		}
		else {
			return _mappingRules;
		}
	}

	@Override
	public void setMappingRules(String mappingRules) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mappingRules = mappingRules;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getState() {
		if (_state == null) {
			return "";
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_state = state;
	}

	@JSON
	@Override
	public long getStateByUserId() {
		return _stateByUserId;
	}

	@Override
	public void setStateByUserId(long stateByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stateByUserId = stateByUserId;
	}

	@Override
	public String getStateByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStateByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStateByUserUuid(String stateByUserUuid) {
	}

	@JSON
	@Override
	public String getStateByUserName() {
		if (_stateByUserName == null) {
			return "";
		}
		else {
			return _stateByUserName;
		}
	}

	@Override
	public void setStateByUserName(String stateByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stateByUserName = stateByUserName;
	}

	@JSON
	@Override
	public Date getStateDate() {
		return _stateDate;
	}

	@Override
	public void setStateDate(Date stateDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stateDate = stateDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), PDRMapping.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PDRMapping toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, PDRMapping>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PDRMappingImpl pdrMappingImpl = new PDRMappingImpl();

		pdrMappingImpl.setMvccVersion(getMvccVersion());
		pdrMappingImpl.setMappingId(getMappingId());
		pdrMappingImpl.setTitle(getTitle());
		pdrMappingImpl.setSystemId(getSystemId());
		pdrMappingImpl.setTableId(getTableId());
		pdrMappingImpl.setColumnId(getColumnId());
		pdrMappingImpl.setAttributeId(getAttributeId());
		pdrMappingImpl.setMappingRules(getMappingRules());
		pdrMappingImpl.setGroupId(getGroupId());
		pdrMappingImpl.setCompanyId(getCompanyId());
		pdrMappingImpl.setUserId(getUserId());
		pdrMappingImpl.setUserName(getUserName());
		pdrMappingImpl.setCreateDate(getCreateDate());
		pdrMappingImpl.setModifiedDate(getModifiedDate());
		pdrMappingImpl.setState(getState());
		pdrMappingImpl.setStateByUserId(getStateByUserId());
		pdrMappingImpl.setStateByUserName(getStateByUserName());
		pdrMappingImpl.setStateDate(getStateDate());

		pdrMappingImpl.resetOriginalValues();

		return pdrMappingImpl;
	}

	@Override
	public PDRMapping cloneWithOriginalValues() {
		PDRMappingImpl pdrMappingImpl = new PDRMappingImpl();

		pdrMappingImpl.setMvccVersion(
			this.<Long>getColumnOriginalValue("mvccVersion"));
		pdrMappingImpl.setMappingId(
			this.<Long>getColumnOriginalValue("mappingId"));
		pdrMappingImpl.setTitle(this.<String>getColumnOriginalValue("title"));
		pdrMappingImpl.setSystemId(
			this.<Long>getColumnOriginalValue("systemId"));
		pdrMappingImpl.setTableId(this.<Long>getColumnOriginalValue("tableId"));
		pdrMappingImpl.setColumnId(
			this.<Long>getColumnOriginalValue("columnId"));
		pdrMappingImpl.setAttributeId(
			this.<Long>getColumnOriginalValue("attributeId"));
		pdrMappingImpl.setMappingRules(
			this.<String>getColumnOriginalValue("mappingRules"));
		pdrMappingImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		pdrMappingImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		pdrMappingImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		pdrMappingImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		pdrMappingImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		pdrMappingImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		pdrMappingImpl.setState(this.<String>getColumnOriginalValue("state_"));
		pdrMappingImpl.setStateByUserId(
			this.<Long>getColumnOriginalValue("stateByUserId"));
		pdrMappingImpl.setStateByUserName(
			this.<String>getColumnOriginalValue("stateByUserName"));
		pdrMappingImpl.setStateDate(
			this.<Date>getColumnOriginalValue("stateDate"));

		return pdrMappingImpl;
	}

	@Override
	public int compareTo(PDRMapping pdrMapping) {
		long primaryKey = pdrMapping.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof PDRMapping)) {
			return false;
		}

		PDRMapping pdrMapping = (PDRMapping)object;

		long primaryKey = pdrMapping.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<PDRMapping> toCacheModel() {
		PDRMappingCacheModel pdrMappingCacheModel = new PDRMappingCacheModel();

		pdrMappingCacheModel.mvccVersion = getMvccVersion();

		pdrMappingCacheModel.mappingId = getMappingId();

		pdrMappingCacheModel.title = getTitle();

		String title = pdrMappingCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			pdrMappingCacheModel.title = null;
		}

		pdrMappingCacheModel.systemId = getSystemId();

		pdrMappingCacheModel.tableId = getTableId();

		pdrMappingCacheModel.columnId = getColumnId();

		pdrMappingCacheModel.attributeId = getAttributeId();

		pdrMappingCacheModel.mappingRules = getMappingRules();

		String mappingRules = pdrMappingCacheModel.mappingRules;

		if ((mappingRules != null) && (mappingRules.length() == 0)) {
			pdrMappingCacheModel.mappingRules = null;
		}

		pdrMappingCacheModel.groupId = getGroupId();

		pdrMappingCacheModel.companyId = getCompanyId();

		pdrMappingCacheModel.userId = getUserId();

		pdrMappingCacheModel.userName = getUserName();

		String userName = pdrMappingCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			pdrMappingCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			pdrMappingCacheModel.createDate = createDate.getTime();
		}
		else {
			pdrMappingCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			pdrMappingCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			pdrMappingCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		pdrMappingCacheModel.state = getState();

		String state = pdrMappingCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			pdrMappingCacheModel.state = null;
		}

		pdrMappingCacheModel.stateByUserId = getStateByUserId();

		pdrMappingCacheModel.stateByUserName = getStateByUserName();

		String stateByUserName = pdrMappingCacheModel.stateByUserName;

		if ((stateByUserName != null) && (stateByUserName.length() == 0)) {
			pdrMappingCacheModel.stateByUserName = null;
		}

		Date stateDate = getStateDate();

		if (stateDate != null) {
			pdrMappingCacheModel.stateDate = stateDate.getTime();
		}
		else {
			pdrMappingCacheModel.stateDate = Long.MIN_VALUE;
		}

		return pdrMappingCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<PDRMapping, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<PDRMapping, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PDRMapping, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((PDRMapping)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<PDRMapping, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<PDRMapping, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PDRMapping, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((PDRMapping)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, PDRMapping>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					PDRMapping.class, ModelWrapper.class);

	}

	private long _mvccVersion;
	private long _mappingId;
	private String _title;
	private long _systemId;
	private long _tableId;
	private long _columnId;
	private long _attributeId;
	private String _mappingRules;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _state;
	private long _stateByUserId;
	private String _stateByUserName;
	private Date _stateDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<PDRMapping, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((PDRMapping)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("mvccVersion", _mvccVersion);
		_columnOriginalValues.put("mappingId", _mappingId);
		_columnOriginalValues.put("title", _title);
		_columnOriginalValues.put("systemId", _systemId);
		_columnOriginalValues.put("tableId", _tableId);
		_columnOriginalValues.put("columnId", _columnId);
		_columnOriginalValues.put("attributeId", _attributeId);
		_columnOriginalValues.put("mappingRules", _mappingRules);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("state_", _state);
		_columnOriginalValues.put("stateByUserId", _stateByUserId);
		_columnOriginalValues.put("stateByUserName", _stateByUserName);
		_columnOriginalValues.put("stateDate", _stateDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("state_", "state");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("mvccVersion", 1L);

		columnBitmasks.put("mappingId", 2L);

		columnBitmasks.put("title", 4L);

		columnBitmasks.put("systemId", 8L);

		columnBitmasks.put("tableId", 16L);

		columnBitmasks.put("columnId", 32L);

		columnBitmasks.put("attributeId", 64L);

		columnBitmasks.put("mappingRules", 128L);

		columnBitmasks.put("groupId", 256L);

		columnBitmasks.put("companyId", 512L);

		columnBitmasks.put("userId", 1024L);

		columnBitmasks.put("userName", 2048L);

		columnBitmasks.put("createDate", 4096L);

		columnBitmasks.put("modifiedDate", 8192L);

		columnBitmasks.put("state_", 16384L);

		columnBitmasks.put("stateByUserId", 32768L);

		columnBitmasks.put("stateByUserName", 65536L);

		columnBitmasks.put("stateDate", 131072L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private PDRMapping _escapedModel;

}