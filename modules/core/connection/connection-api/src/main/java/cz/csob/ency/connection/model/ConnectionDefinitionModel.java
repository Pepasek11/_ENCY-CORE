/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package cz.csob.ency.connection.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.BaseModel;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the ConnectionDefinition service. Represents a row in the &quot;ency_connection&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>cz.csob.ency.connection.model.impl.ConnectionDefinitionModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>cz.csob.ency.connection.model.impl.ConnectionDefinitionImpl</code>.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ConnectionDefinition
 * @generated
 */
@ProviderType
public interface ConnectionDefinitionModel
	extends BaseModel<ConnectionDefinition> {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a connection definition model instance should use the {@link ConnectionDefinition} interface instead.
	 */

	/**
	 * Returns the primary key of this connection definition.
	 *
	 * @return the primary key of this connection definition
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this connection definition.
	 *
	 * @param primaryKey the primary key of this connection definition
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the connection ID of this connection definition.
	 *
	 * @return the connection ID of this connection definition
	 */
	public long getConnectionId();

	/**
	 * Sets the connection ID of this connection definition.
	 *
	 * @param connectionId the connection ID of this connection definition
	 */
	public void setConnectionId(long connectionId);

	/**
	 * Returns the name of this connection definition.
	 *
	 * @return the name of this connection definition
	 */
	@AutoEscape
	public String getName();

	/**
	 * Sets the name of this connection definition.
	 *
	 * @param name the name of this connection definition
	 */
	public void setName(String name);

	/**
	 * Returns the driver of this connection definition.
	 *
	 * @return the driver of this connection definition
	 */
	@AutoEscape
	public String getDriver();

	/**
	 * Sets the driver of this connection definition.
	 *
	 * @param driver the driver of this connection definition
	 */
	public void setDriver(String driver);

	/**
	 * Returns the url of this connection definition.
	 *
	 * @return the url of this connection definition
	 */
	@AutoEscape
	public String getUrl();

	/**
	 * Sets the url of this connection definition.
	 *
	 * @param url the url of this connection definition
	 */
	public void setUrl(String url);

	/**
	 * Returns the server address of this connection definition.
	 *
	 * @return the server address of this connection definition
	 */
	@AutoEscape
	public String getServerAddress();

	/**
	 * Sets the server address of this connection definition.
	 *
	 * @param serverAddress the server address of this connection definition
	 */
	public void setServerAddress(String serverAddress);

	/**
	 * Returns the server port of this connection definition.
	 *
	 * @return the server port of this connection definition
	 */
	@AutoEscape
	public String getServerPort();

	/**
	 * Sets the server port of this connection definition.
	 *
	 * @param serverPort the server port of this connection definition
	 */
	public void setServerPort(String serverPort);

	/**
	 * Returns the database name of this connection definition.
	 *
	 * @return the database name of this connection definition
	 */
	@AutoEscape
	public String getDatabaseName();

	/**
	 * Sets the database name of this connection definition.
	 *
	 * @param databaseName the database name of this connection definition
	 */
	public void setDatabaseName(String databaseName);

	/**
	 * Returns the integrated security of this connection definition.
	 *
	 * @return the integrated security of this connection definition
	 */
	public Boolean getIntegratedSecurity();

	/**
	 * Sets the integrated security of this connection definition.
	 *
	 * @param integratedSecurity the integrated security of this connection definition
	 */
	public void setIntegratedSecurity(Boolean integratedSecurity);

	/**
	 * Returns the username of this connection definition.
	 *
	 * @return the username of this connection definition
	 */
	@AutoEscape
	public String getUsername();

	/**
	 * Sets the username of this connection definition.
	 *
	 * @param username the username of this connection definition
	 */
	public void setUsername(String username);

	/**
	 * Returns the password of this connection definition.
	 *
	 * @return the password of this connection definition
	 */
	@AutoEscape
	public String getPassword();

	/**
	 * Sets the password of this connection definition.
	 *
	 * @param password the password of this connection definition
	 */
	public void setPassword(String password);

	/**
	 * Returns the additional params of this connection definition.
	 *
	 * @return the additional params of this connection definition
	 */
	@AutoEscape
	public String getAdditionalParams();

	/**
	 * Sets the additional params of this connection definition.
	 *
	 * @param additionalParams the additional params of this connection definition
	 */
	public void setAdditionalParams(String additionalParams);

	@Override
	public ConnectionDefinition cloneWithOriginalValues();

}