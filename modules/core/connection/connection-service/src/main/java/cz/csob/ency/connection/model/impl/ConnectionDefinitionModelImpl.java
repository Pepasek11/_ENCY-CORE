/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package cz.csob.ency.connection.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import cz.csob.ency.connection.model.ConnectionDefinition;
import cz.csob.ency.connection.model.ConnectionDefinitionModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ConnectionDefinition service. Represents a row in the &quot;ency_connection&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ConnectionDefinitionModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ConnectionDefinitionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ConnectionDefinitionImpl
 * @generated
 */
public class ConnectionDefinitionModelImpl
	extends BaseModelImpl<ConnectionDefinition>
	implements ConnectionDefinitionModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a connection definition model instance should use the <code>ConnectionDefinition</code> interface instead.
	 */
	public static final String TABLE_NAME = "ency_connection";

	public static final Object[][] TABLE_COLUMNS = {
		{"connectionId", Types.BIGINT}, {"name", Types.VARCHAR},
		{"driver", Types.VARCHAR}, {"url", Types.VARCHAR},
		{"serverAddress", Types.VARCHAR}, {"serverPort", Types.VARCHAR},
		{"databaseName", Types.VARCHAR}, {"integratedSecurity", Types.BOOLEAN},
		{"username", Types.VARCHAR}, {"password_", Types.VARCHAR},
		{"additionalParams", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("connectionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("driver", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("url", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("serverAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("serverPort", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("databaseName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("integratedSecurity", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("username", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("password_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("additionalParams", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ency_connection (connectionId LONG not null primary key,name VARCHAR(30) null,driver VARCHAR(20) null,url VARCHAR(1024) null,serverAddress VARCHAR(1024) null,serverPort VARCHAR(7) null,databaseName VARCHAR(100) null,integratedSecurity BOOLEAN,username VARCHAR(100) null,password_ VARCHAR(100) null,additionalParams VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table ency_connection";

	public static final String ORDER_BY_JPQL =
		" ORDER BY connectionDefinition.connectionId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ency_connection.connectionId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CONNECTIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NAME_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ConnectionDefinitionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _connectionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setConnectionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _connectionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ConnectionDefinition.class;
	}

	@Override
	public String getModelClassName() {
		return ConnectionDefinition.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ConnectionDefinition, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ConnectionDefinition, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ConnectionDefinition, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ConnectionDefinition)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ConnectionDefinition, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ConnectionDefinition, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ConnectionDefinition)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ConnectionDefinition, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ConnectionDefinition, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<ConnectionDefinition, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ConnectionDefinition, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ConnectionDefinition, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<ConnectionDefinition, Object>>();
		Map<String, BiConsumer<ConnectionDefinition, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<ConnectionDefinition, ?>>();

		attributeGetterFunctions.put(
			"connectionId", ConnectionDefinition::getConnectionId);
		attributeSetterBiConsumers.put(
			"connectionId",
			(BiConsumer<ConnectionDefinition, Long>)
				ConnectionDefinition::setConnectionId);
		attributeGetterFunctions.put("name", ConnectionDefinition::getName);
		attributeSetterBiConsumers.put(
			"name",
			(BiConsumer<ConnectionDefinition, String>)
				ConnectionDefinition::setName);
		attributeGetterFunctions.put("driver", ConnectionDefinition::getDriver);
		attributeSetterBiConsumers.put(
			"driver",
			(BiConsumer<ConnectionDefinition, String>)
				ConnectionDefinition::setDriver);
		attributeGetterFunctions.put("url", ConnectionDefinition::getUrl);
		attributeSetterBiConsumers.put(
			"url",
			(BiConsumer<ConnectionDefinition, String>)
				ConnectionDefinition::setUrl);
		attributeGetterFunctions.put(
			"serverAddress", ConnectionDefinition::getServerAddress);
		attributeSetterBiConsumers.put(
			"serverAddress",
			(BiConsumer<ConnectionDefinition, String>)
				ConnectionDefinition::setServerAddress);
		attributeGetterFunctions.put(
			"serverPort", ConnectionDefinition::getServerPort);
		attributeSetterBiConsumers.put(
			"serverPort",
			(BiConsumer<ConnectionDefinition, String>)
				ConnectionDefinition::setServerPort);
		attributeGetterFunctions.put(
			"databaseName", ConnectionDefinition::getDatabaseName);
		attributeSetterBiConsumers.put(
			"databaseName",
			(BiConsumer<ConnectionDefinition, String>)
				ConnectionDefinition::setDatabaseName);
		attributeGetterFunctions.put(
			"integratedSecurity", ConnectionDefinition::getIntegratedSecurity);
		attributeSetterBiConsumers.put(
			"integratedSecurity",
			(BiConsumer<ConnectionDefinition, Boolean>)
				ConnectionDefinition::setIntegratedSecurity);
		attributeGetterFunctions.put(
			"username", ConnectionDefinition::getUsername);
		attributeSetterBiConsumers.put(
			"username",
			(BiConsumer<ConnectionDefinition, String>)
				ConnectionDefinition::setUsername);
		attributeGetterFunctions.put(
			"password", ConnectionDefinition::getPassword);
		attributeSetterBiConsumers.put(
			"password",
			(BiConsumer<ConnectionDefinition, String>)
				ConnectionDefinition::setPassword);
		attributeGetterFunctions.put(
			"additionalParams", ConnectionDefinition::getAdditionalParams);
		attributeSetterBiConsumers.put(
			"additionalParams",
			(BiConsumer<ConnectionDefinition, String>)
				ConnectionDefinition::setAdditionalParams);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getConnectionId() {
		return _connectionId;
	}

	@Override
	public void setConnectionId(long connectionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_connectionId = connectionId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalConnectionId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("connectionId"));
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalName() {
		return getColumnOriginalValue("name");
	}

	@Override
	public String getDriver() {
		if (_driver == null) {
			return "";
		}
		else {
			return _driver;
		}
	}

	@Override
	public void setDriver(String driver) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driver = driver;
	}

	@Override
	public String getUrl() {
		if (_url == null) {
			return "";
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_url = url;
	}

	@Override
	public String getServerAddress() {
		if (_serverAddress == null) {
			return "";
		}
		else {
			return _serverAddress;
		}
	}

	@Override
	public void setServerAddress(String serverAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_serverAddress = serverAddress;
	}

	@Override
	public String getServerPort() {
		if (_serverPort == null) {
			return "";
		}
		else {
			return _serverPort;
		}
	}

	@Override
	public void setServerPort(String serverPort) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_serverPort = serverPort;
	}

	@Override
	public String getDatabaseName() {
		if (_databaseName == null) {
			return "";
		}
		else {
			return _databaseName;
		}
	}

	@Override
	public void setDatabaseName(String databaseName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_databaseName = databaseName;
	}

	@Override
	public Boolean getIntegratedSecurity() {
		return _integratedSecurity;
	}

	@Override
	public void setIntegratedSecurity(Boolean integratedSecurity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_integratedSecurity = integratedSecurity;
	}

	@Override
	public String getUsername() {
		if (_username == null) {
			return "";
		}
		else {
			return _username;
		}
	}

	@Override
	public void setUsername(String username) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_username = username;
	}

	@Override
	public String getPassword() {
		if (_password == null) {
			return "";
		}
		else {
			return _password;
		}
	}

	@Override
	public void setPassword(String password) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_password = password;
	}

	@Override
	public String getAdditionalParams() {
		if (_additionalParams == null) {
			return "";
		}
		else {
			return _additionalParams;
		}
	}

	@Override
	public void setAdditionalParams(String additionalParams) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_additionalParams = additionalParams;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ConnectionDefinition.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ConnectionDefinition toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ConnectionDefinition>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ConnectionDefinitionImpl connectionDefinitionImpl =
			new ConnectionDefinitionImpl();

		connectionDefinitionImpl.setConnectionId(getConnectionId());
		connectionDefinitionImpl.setName(getName());
		connectionDefinitionImpl.setDriver(getDriver());
		connectionDefinitionImpl.setUrl(getUrl());
		connectionDefinitionImpl.setServerAddress(getServerAddress());
		connectionDefinitionImpl.setServerPort(getServerPort());
		connectionDefinitionImpl.setDatabaseName(getDatabaseName());
		connectionDefinitionImpl.setIntegratedSecurity(getIntegratedSecurity());
		connectionDefinitionImpl.setUsername(getUsername());
		connectionDefinitionImpl.setPassword(getPassword());
		connectionDefinitionImpl.setAdditionalParams(getAdditionalParams());

		connectionDefinitionImpl.resetOriginalValues();

		return connectionDefinitionImpl;
	}

	@Override
	public ConnectionDefinition cloneWithOriginalValues() {
		ConnectionDefinitionImpl connectionDefinitionImpl =
			new ConnectionDefinitionImpl();

		connectionDefinitionImpl.setConnectionId(
			this.<Long>getColumnOriginalValue("connectionId"));
		connectionDefinitionImpl.setName(
			this.<String>getColumnOriginalValue("name"));
		connectionDefinitionImpl.setDriver(
			this.<String>getColumnOriginalValue("driver"));
		connectionDefinitionImpl.setUrl(
			this.<String>getColumnOriginalValue("url"));
		connectionDefinitionImpl.setServerAddress(
			this.<String>getColumnOriginalValue("serverAddress"));
		connectionDefinitionImpl.setServerPort(
			this.<String>getColumnOriginalValue("serverPort"));
		connectionDefinitionImpl.setDatabaseName(
			this.<String>getColumnOriginalValue("databaseName"));
		connectionDefinitionImpl.setIntegratedSecurity(
			this.<Boolean>getColumnOriginalValue("integratedSecurity"));
		connectionDefinitionImpl.setUsername(
			this.<String>getColumnOriginalValue("username"));
		connectionDefinitionImpl.setPassword(
			this.<String>getColumnOriginalValue("password_"));
		connectionDefinitionImpl.setAdditionalParams(
			this.<String>getColumnOriginalValue("additionalParams"));

		return connectionDefinitionImpl;
	}

	@Override
	public int compareTo(ConnectionDefinition connectionDefinition) {
		int value = 0;

		if (getConnectionId() < connectionDefinition.getConnectionId()) {
			value = -1;
		}
		else if (getConnectionId() > connectionDefinition.getConnectionId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ConnectionDefinition)) {
			return false;
		}

		ConnectionDefinition connectionDefinition =
			(ConnectionDefinition)object;

		long primaryKey = connectionDefinition.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ConnectionDefinition> toCacheModel() {
		ConnectionDefinitionCacheModel connectionDefinitionCacheModel =
			new ConnectionDefinitionCacheModel();

		connectionDefinitionCacheModel.connectionId = getConnectionId();

		connectionDefinitionCacheModel.name = getName();

		String name = connectionDefinitionCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			connectionDefinitionCacheModel.name = null;
		}

		connectionDefinitionCacheModel.driver = getDriver();

		String driver = connectionDefinitionCacheModel.driver;

		if ((driver != null) && (driver.length() == 0)) {
			connectionDefinitionCacheModel.driver = null;
		}

		connectionDefinitionCacheModel.url = getUrl();

		String url = connectionDefinitionCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			connectionDefinitionCacheModel.url = null;
		}

		connectionDefinitionCacheModel.serverAddress = getServerAddress();

		String serverAddress = connectionDefinitionCacheModel.serverAddress;

		if ((serverAddress != null) && (serverAddress.length() == 0)) {
			connectionDefinitionCacheModel.serverAddress = null;
		}

		connectionDefinitionCacheModel.serverPort = getServerPort();

		String serverPort = connectionDefinitionCacheModel.serverPort;

		if ((serverPort != null) && (serverPort.length() == 0)) {
			connectionDefinitionCacheModel.serverPort = null;
		}

		connectionDefinitionCacheModel.databaseName = getDatabaseName();

		String databaseName = connectionDefinitionCacheModel.databaseName;

		if ((databaseName != null) && (databaseName.length() == 0)) {
			connectionDefinitionCacheModel.databaseName = null;
		}

		Boolean integratedSecurity = getIntegratedSecurity();

		if (integratedSecurity != null) {
			connectionDefinitionCacheModel.integratedSecurity =
				integratedSecurity;
		}

		connectionDefinitionCacheModel.username = getUsername();

		String username = connectionDefinitionCacheModel.username;

		if ((username != null) && (username.length() == 0)) {
			connectionDefinitionCacheModel.username = null;
		}

		connectionDefinitionCacheModel.password = getPassword();

		String password = connectionDefinitionCacheModel.password;

		if ((password != null) && (password.length() == 0)) {
			connectionDefinitionCacheModel.password = null;
		}

		connectionDefinitionCacheModel.additionalParams = getAdditionalParams();

		String additionalParams =
			connectionDefinitionCacheModel.additionalParams;

		if ((additionalParams != null) && (additionalParams.length() == 0)) {
			connectionDefinitionCacheModel.additionalParams = null;
		}

		return connectionDefinitionCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ConnectionDefinition, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ConnectionDefinition, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ConnectionDefinition, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(ConnectionDefinition)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ConnectionDefinition, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ConnectionDefinition, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ConnectionDefinition, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((ConnectionDefinition)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ConnectionDefinition>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					ConnectionDefinition.class, ModelWrapper.class);

	}

	private long _connectionId;
	private String _name;
	private String _driver;
	private String _url;
	private String _serverAddress;
	private String _serverPort;
	private String _databaseName;
	private Boolean _integratedSecurity;
	private String _username;
	private String _password;
	private String _additionalParams;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<ConnectionDefinition, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ConnectionDefinition)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("connectionId", _connectionId);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("driver", _driver);
		_columnOriginalValues.put("url", _url);
		_columnOriginalValues.put("serverAddress", _serverAddress);
		_columnOriginalValues.put("serverPort", _serverPort);
		_columnOriginalValues.put("databaseName", _databaseName);
		_columnOriginalValues.put("integratedSecurity", _integratedSecurity);
		_columnOriginalValues.put("username", _username);
		_columnOriginalValues.put("password_", _password);
		_columnOriginalValues.put("additionalParams", _additionalParams);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("password_", "password");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("connectionId", 1L);

		columnBitmasks.put("name", 2L);

		columnBitmasks.put("driver", 4L);

		columnBitmasks.put("url", 8L);

		columnBitmasks.put("serverAddress", 16L);

		columnBitmasks.put("serverPort", 32L);

		columnBitmasks.put("databaseName", 64L);

		columnBitmasks.put("integratedSecurity", 128L);

		columnBitmasks.put("username", 256L);

		columnBitmasks.put("password_", 512L);

		columnBitmasks.put("additionalParams", 1024L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ConnectionDefinition _escapedModel;

}