/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package cz.csob.ency.workflow.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import cz.csob.ency.workflow.model.EncyWorkflowState;
import cz.csob.ency.workflow.model.EncyWorkflowStateModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the EncyWorkflowState service. Represents a row in the &quot;ency_workflowstate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EncyWorkflowStateModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EncyWorkflowStateImpl}.
 * </p>
 *
 * @author Miroslav Čermák
 * @see EncyWorkflowStateImpl
 * @generated
 */
public class EncyWorkflowStateModelImpl
	extends BaseModelImpl<EncyWorkflowState> implements EncyWorkflowStateModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ency workflow state model instance should use the <code>EncyWorkflowState</code> interface instead.
	 */
	public static final String TABLE_NAME = "ency_workflowstate";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"stateId", Types.BIGINT},
		{"workflowId", Types.BIGINT}, {"name", Types.VARCHAR},
		{"title", Types.VARCHAR}, {"description", Types.CLOB},
		{"version", Types.BIGINT}, {"isInitial", Types.BOOLEAN},
		{"isFinal", Types.BOOLEAN}, {"isEditable", Types.BOOLEAN},
		{"isSearchable", Types.BOOLEAN}, {"isPermanent", Types.BOOLEAN},
		{"cssIcon", Types.VARCHAR}, {"cssIconColor", Types.VARCHAR},
		{"cssLabelColor", Types.VARCHAR}, {"active_", Types.BOOLEAN},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("workflowId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.CLOB);
		TABLE_COLUMNS_MAP.put("version", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("isInitial", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("isFinal", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("isEditable", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("isSearchable", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("isPermanent", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("cssIcon", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cssIconColor", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cssLabelColor", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("active_", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ency_workflowstate (uuid_ VARCHAR(75) null,stateId LONG not null primary key,workflowId LONG,name VARCHAR(200) null,title VARCHAR(1000) null,description TEXT null,version LONG,isInitial BOOLEAN,isFinal BOOLEAN,isEditable BOOLEAN,isSearchable BOOLEAN,isPermanent BOOLEAN,cssIcon VARCHAR(100) null,cssIconColor VARCHAR(10) null,cssLabelColor VARCHAR(10) null,active_ BOOLEAN,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table ency_workflowstate";

	public static final String ORDER_BY_JPQL =
		" ORDER BY encyWorkflowState.stateId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ency_workflowstate.stateId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ACTIVE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NAME_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long WORKFLOWID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STATEID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public EncyWorkflowStateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _stateId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStateId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _stateId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EncyWorkflowState.class;
	}

	@Override
	public String getModelClassName() {
		return EncyWorkflowState.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<EncyWorkflowState, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<EncyWorkflowState, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EncyWorkflowState, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((EncyWorkflowState)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<EncyWorkflowState, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<EncyWorkflowState, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(EncyWorkflowState)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<EncyWorkflowState, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<EncyWorkflowState, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<EncyWorkflowState, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<EncyWorkflowState, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<EncyWorkflowState, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<EncyWorkflowState, Object>>();
		Map<String, BiConsumer<EncyWorkflowState, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<EncyWorkflowState, ?>>();

		attributeGetterFunctions.put("uuid", EncyWorkflowState::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<EncyWorkflowState, String>)EncyWorkflowState::setUuid);
		attributeGetterFunctions.put("stateId", EncyWorkflowState::getStateId);
		attributeSetterBiConsumers.put(
			"stateId",
			(BiConsumer<EncyWorkflowState, Long>)EncyWorkflowState::setStateId);
		attributeGetterFunctions.put(
			"workflowId", EncyWorkflowState::getWorkflowId);
		attributeSetterBiConsumers.put(
			"workflowId",
			(BiConsumer<EncyWorkflowState, Long>)
				EncyWorkflowState::setWorkflowId);
		attributeGetterFunctions.put("name", EncyWorkflowState::getName);
		attributeSetterBiConsumers.put(
			"name",
			(BiConsumer<EncyWorkflowState, String>)EncyWorkflowState::setName);
		attributeGetterFunctions.put("title", EncyWorkflowState::getTitle);
		attributeSetterBiConsumers.put(
			"title",
			(BiConsumer<EncyWorkflowState, String>)EncyWorkflowState::setTitle);
		attributeGetterFunctions.put(
			"description", EncyWorkflowState::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<EncyWorkflowState, String>)
				EncyWorkflowState::setDescription);
		attributeGetterFunctions.put("version", EncyWorkflowState::getVersion);
		attributeSetterBiConsumers.put(
			"version",
			(BiConsumer<EncyWorkflowState, Long>)EncyWorkflowState::setVersion);
		attributeGetterFunctions.put(
			"isInitial", EncyWorkflowState::getIsInitial);
		attributeSetterBiConsumers.put(
			"isInitial",
			(BiConsumer<EncyWorkflowState, Boolean>)
				EncyWorkflowState::setIsInitial);
		attributeGetterFunctions.put("isFinal", EncyWorkflowState::getIsFinal);
		attributeSetterBiConsumers.put(
			"isFinal",
			(BiConsumer<EncyWorkflowState, Boolean>)
				EncyWorkflowState::setIsFinal);
		attributeGetterFunctions.put(
			"isEditable", EncyWorkflowState::getIsEditable);
		attributeSetterBiConsumers.put(
			"isEditable",
			(BiConsumer<EncyWorkflowState, Boolean>)
				EncyWorkflowState::setIsEditable);
		attributeGetterFunctions.put(
			"isSearchable", EncyWorkflowState::getIsSearchable);
		attributeSetterBiConsumers.put(
			"isSearchable",
			(BiConsumer<EncyWorkflowState, Boolean>)
				EncyWorkflowState::setIsSearchable);
		attributeGetterFunctions.put(
			"isPermanent", EncyWorkflowState::getIsPermanent);
		attributeSetterBiConsumers.put(
			"isPermanent",
			(BiConsumer<EncyWorkflowState, Boolean>)
				EncyWorkflowState::setIsPermanent);
		attributeGetterFunctions.put("cssIcon", EncyWorkflowState::getCssIcon);
		attributeSetterBiConsumers.put(
			"cssIcon",
			(BiConsumer<EncyWorkflowState, String>)
				EncyWorkflowState::setCssIcon);
		attributeGetterFunctions.put(
			"cssIconColor", EncyWorkflowState::getCssIconColor);
		attributeSetterBiConsumers.put(
			"cssIconColor",
			(BiConsumer<EncyWorkflowState, String>)
				EncyWorkflowState::setCssIconColor);
		attributeGetterFunctions.put(
			"cssLabelColor", EncyWorkflowState::getCssLabelColor);
		attributeSetterBiConsumers.put(
			"cssLabelColor",
			(BiConsumer<EncyWorkflowState, String>)
				EncyWorkflowState::setCssLabelColor);
		attributeGetterFunctions.put("active", EncyWorkflowState::getActive);
		attributeSetterBiConsumers.put(
			"active",
			(BiConsumer<EncyWorkflowState, Boolean>)
				EncyWorkflowState::setActive);
		attributeGetterFunctions.put(
			"createDate", EncyWorkflowState::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<EncyWorkflowState, Date>)
				EncyWorkflowState::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", EncyWorkflowState::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<EncyWorkflowState, Date>)
				EncyWorkflowState::setModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getStateId() {
		return _stateId;
	}

	@Override
	public void setStateId(long stateId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stateId = stateId;
	}

	@Override
	public long getWorkflowId() {
		return _workflowId;
	}

	@Override
	public void setWorkflowId(long workflowId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_workflowId = workflowId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalWorkflowId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("workflowId"));
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalName() {
		return getColumnOriginalValue("name");
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_title = title;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@Override
	public long getVersion() {
		return _version;
	}

	@Override
	public void setVersion(long version) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_version = version;
	}

	@Override
	public Boolean getIsInitial() {
		return _isInitial;
	}

	@Override
	public void setIsInitial(Boolean isInitial) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isInitial = isInitial;
	}

	@Override
	public Boolean getIsFinal() {
		return _isFinal;
	}

	@Override
	public void setIsFinal(Boolean isFinal) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isFinal = isFinal;
	}

	@Override
	public Boolean getIsEditable() {
		return _isEditable;
	}

	@Override
	public void setIsEditable(Boolean isEditable) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isEditable = isEditable;
	}

	@Override
	public Boolean getIsSearchable() {
		return _isSearchable;
	}

	@Override
	public void setIsSearchable(Boolean isSearchable) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isSearchable = isSearchable;
	}

	@Override
	public Boolean getIsPermanent() {
		return _isPermanent;
	}

	@Override
	public void setIsPermanent(Boolean isPermanent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isPermanent = isPermanent;
	}

	@Override
	public String getCssIcon() {
		if (_cssIcon == null) {
			return "";
		}
		else {
			return _cssIcon;
		}
	}

	@Override
	public void setCssIcon(String cssIcon) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cssIcon = cssIcon;
	}

	@Override
	public String getCssIconColor() {
		if (_cssIconColor == null) {
			return "";
		}
		else {
			return _cssIconColor;
		}
	}

	@Override
	public void setCssIconColor(String cssIconColor) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cssIconColor = cssIconColor;
	}

	@Override
	public String getCssLabelColor() {
		if (_cssLabelColor == null) {
			return "";
		}
		else {
			return _cssLabelColor;
		}
	}

	@Override
	public void setCssLabelColor(String cssLabelColor) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cssLabelColor = cssLabelColor;
	}

	@Override
	public Boolean getActive() {
		return _active;
	}

	@Override
	public void setActive(Boolean active) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_active = active;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public Boolean getOriginalActive() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("active_"));
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, EncyWorkflowState.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EncyWorkflowState toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, EncyWorkflowState>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EncyWorkflowStateImpl encyWorkflowStateImpl =
			new EncyWorkflowStateImpl();

		encyWorkflowStateImpl.setUuid(getUuid());
		encyWorkflowStateImpl.setStateId(getStateId());
		encyWorkflowStateImpl.setWorkflowId(getWorkflowId());
		encyWorkflowStateImpl.setName(getName());
		encyWorkflowStateImpl.setTitle(getTitle());
		encyWorkflowStateImpl.setDescription(getDescription());
		encyWorkflowStateImpl.setVersion(getVersion());
		encyWorkflowStateImpl.setIsInitial(getIsInitial());
		encyWorkflowStateImpl.setIsFinal(getIsFinal());
		encyWorkflowStateImpl.setIsEditable(getIsEditable());
		encyWorkflowStateImpl.setIsSearchable(getIsSearchable());
		encyWorkflowStateImpl.setIsPermanent(getIsPermanent());
		encyWorkflowStateImpl.setCssIcon(getCssIcon());
		encyWorkflowStateImpl.setCssIconColor(getCssIconColor());
		encyWorkflowStateImpl.setCssLabelColor(getCssLabelColor());
		encyWorkflowStateImpl.setActive(getActive());
		encyWorkflowStateImpl.setCreateDate(getCreateDate());
		encyWorkflowStateImpl.setModifiedDate(getModifiedDate());

		encyWorkflowStateImpl.resetOriginalValues();

		return encyWorkflowStateImpl;
	}

	@Override
	public EncyWorkflowState cloneWithOriginalValues() {
		EncyWorkflowStateImpl encyWorkflowStateImpl =
			new EncyWorkflowStateImpl();

		encyWorkflowStateImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		encyWorkflowStateImpl.setStateId(
			this.<Long>getColumnOriginalValue("stateId"));
		encyWorkflowStateImpl.setWorkflowId(
			this.<Long>getColumnOriginalValue("workflowId"));
		encyWorkflowStateImpl.setName(
			this.<String>getColumnOriginalValue("name"));
		encyWorkflowStateImpl.setTitle(
			this.<String>getColumnOriginalValue("title"));
		encyWorkflowStateImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));
		encyWorkflowStateImpl.setVersion(
			this.<Long>getColumnOriginalValue("version"));
		encyWorkflowStateImpl.setIsInitial(
			this.<Boolean>getColumnOriginalValue("isInitial"));
		encyWorkflowStateImpl.setIsFinal(
			this.<Boolean>getColumnOriginalValue("isFinal"));
		encyWorkflowStateImpl.setIsEditable(
			this.<Boolean>getColumnOriginalValue("isEditable"));
		encyWorkflowStateImpl.setIsSearchable(
			this.<Boolean>getColumnOriginalValue("isSearchable"));
		encyWorkflowStateImpl.setIsPermanent(
			this.<Boolean>getColumnOriginalValue("isPermanent"));
		encyWorkflowStateImpl.setCssIcon(
			this.<String>getColumnOriginalValue("cssIcon"));
		encyWorkflowStateImpl.setCssIconColor(
			this.<String>getColumnOriginalValue("cssIconColor"));
		encyWorkflowStateImpl.setCssLabelColor(
			this.<String>getColumnOriginalValue("cssLabelColor"));
		encyWorkflowStateImpl.setActive(
			this.<Boolean>getColumnOriginalValue("active_"));
		encyWorkflowStateImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		encyWorkflowStateImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));

		return encyWorkflowStateImpl;
	}

	@Override
	public int compareTo(EncyWorkflowState encyWorkflowState) {
		long primaryKey = encyWorkflowState.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof EncyWorkflowState)) {
			return false;
		}

		EncyWorkflowState encyWorkflowState = (EncyWorkflowState)object;

		long primaryKey = encyWorkflowState.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<EncyWorkflowState> toCacheModel() {
		EncyWorkflowStateCacheModel encyWorkflowStateCacheModel =
			new EncyWorkflowStateCacheModel();

		encyWorkflowStateCacheModel.uuid = getUuid();

		String uuid = encyWorkflowStateCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			encyWorkflowStateCacheModel.uuid = null;
		}

		encyWorkflowStateCacheModel.stateId = getStateId();

		encyWorkflowStateCacheModel.workflowId = getWorkflowId();

		encyWorkflowStateCacheModel.name = getName();

		String name = encyWorkflowStateCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			encyWorkflowStateCacheModel.name = null;
		}

		encyWorkflowStateCacheModel.title = getTitle();

		String title = encyWorkflowStateCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			encyWorkflowStateCacheModel.title = null;
		}

		encyWorkflowStateCacheModel.description = getDescription();

		String description = encyWorkflowStateCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			encyWorkflowStateCacheModel.description = null;
		}

		encyWorkflowStateCacheModel.version = getVersion();

		Boolean isInitial = getIsInitial();

		if (isInitial != null) {
			encyWorkflowStateCacheModel.isInitial = isInitial;
		}

		Boolean isFinal = getIsFinal();

		if (isFinal != null) {
			encyWorkflowStateCacheModel.isFinal = isFinal;
		}

		Boolean isEditable = getIsEditable();

		if (isEditable != null) {
			encyWorkflowStateCacheModel.isEditable = isEditable;
		}

		Boolean isSearchable = getIsSearchable();

		if (isSearchable != null) {
			encyWorkflowStateCacheModel.isSearchable = isSearchable;
		}

		Boolean isPermanent = getIsPermanent();

		if (isPermanent != null) {
			encyWorkflowStateCacheModel.isPermanent = isPermanent;
		}

		encyWorkflowStateCacheModel.cssIcon = getCssIcon();

		String cssIcon = encyWorkflowStateCacheModel.cssIcon;

		if ((cssIcon != null) && (cssIcon.length() == 0)) {
			encyWorkflowStateCacheModel.cssIcon = null;
		}

		encyWorkflowStateCacheModel.cssIconColor = getCssIconColor();

		String cssIconColor = encyWorkflowStateCacheModel.cssIconColor;

		if ((cssIconColor != null) && (cssIconColor.length() == 0)) {
			encyWorkflowStateCacheModel.cssIconColor = null;
		}

		encyWorkflowStateCacheModel.cssLabelColor = getCssLabelColor();

		String cssLabelColor = encyWorkflowStateCacheModel.cssLabelColor;

		if ((cssLabelColor != null) && (cssLabelColor.length() == 0)) {
			encyWorkflowStateCacheModel.cssLabelColor = null;
		}

		Boolean active = getActive();

		if (active != null) {
			encyWorkflowStateCacheModel.active = active;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			encyWorkflowStateCacheModel.createDate = createDate.getTime();
		}
		else {
			encyWorkflowStateCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			encyWorkflowStateCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			encyWorkflowStateCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return encyWorkflowStateCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<EncyWorkflowState, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<EncyWorkflowState, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EncyWorkflowState, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(EncyWorkflowState)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<EncyWorkflowState, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<EncyWorkflowState, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EncyWorkflowState, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((EncyWorkflowState)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, EncyWorkflowState>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					EncyWorkflowState.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _stateId;
	private long _workflowId;
	private String _name;
	private String _title;
	private String _description;
	private long _version;
	private Boolean _isInitial;
	private Boolean _isFinal;
	private Boolean _isEditable;
	private Boolean _isSearchable;
	private Boolean _isPermanent;
	private String _cssIcon;
	private String _cssIconColor;
	private String _cssLabelColor;
	private Boolean _active;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<EncyWorkflowState, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((EncyWorkflowState)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("stateId", _stateId);
		_columnOriginalValues.put("workflowId", _workflowId);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("title", _title);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("version", _version);
		_columnOriginalValues.put("isInitial", _isInitial);
		_columnOriginalValues.put("isFinal", _isFinal);
		_columnOriginalValues.put("isEditable", _isEditable);
		_columnOriginalValues.put("isSearchable", _isSearchable);
		_columnOriginalValues.put("isPermanent", _isPermanent);
		_columnOriginalValues.put("cssIcon", _cssIcon);
		_columnOriginalValues.put("cssIconColor", _cssIconColor);
		_columnOriginalValues.put("cssLabelColor", _cssLabelColor);
		_columnOriginalValues.put("active_", _active);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("active_", "active");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("stateId", 2L);

		columnBitmasks.put("workflowId", 4L);

		columnBitmasks.put("name", 8L);

		columnBitmasks.put("title", 16L);

		columnBitmasks.put("description", 32L);

		columnBitmasks.put("version", 64L);

		columnBitmasks.put("isInitial", 128L);

		columnBitmasks.put("isFinal", 256L);

		columnBitmasks.put("isEditable", 512L);

		columnBitmasks.put("isSearchable", 1024L);

		columnBitmasks.put("isPermanent", 2048L);

		columnBitmasks.put("cssIcon", 4096L);

		columnBitmasks.put("cssIconColor", 8192L);

		columnBitmasks.put("cssLabelColor", 16384L);

		columnBitmasks.put("active_", 32768L);

		columnBitmasks.put("createDate", 65536L);

		columnBitmasks.put("modifiedDate", 131072L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private EncyWorkflowState _escapedModel;

}