/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package cz.csob.ency.workflow.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import cz.csob.ency.workflow.model.EncyWorkflowTransitionInstance;
import cz.csob.ency.workflow.model.EncyWorkflowTransitionInstanceModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the EncyWorkflowTransitionInstance service. Represents a row in the &quot;ency_workflowtransitioninstance&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EncyWorkflowTransitionInstanceModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EncyWorkflowTransitionInstanceImpl}.
 * </p>
 *
 * @author Miroslav Čermák
 * @see EncyWorkflowTransitionInstanceImpl
 * @generated
 */
public class EncyWorkflowTransitionInstanceModelImpl
	extends BaseModelImpl<EncyWorkflowTransitionInstance>
	implements EncyWorkflowTransitionInstanceModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ency workflow transition instance model instance should use the <code>EncyWorkflowTransitionInstance</code> interface instead.
	 */
	public static final String TABLE_NAME = "ency_workflowtransitioninstance";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"transitionInstanceId", Types.BIGINT},
		{"transitionId", Types.BIGINT}, {"stateId", Types.BIGINT},
		{"stateInstanceId", Types.BIGINT}, {"workflowId", Types.BIGINT},
		{"workflowInstanceId", Types.BIGINT}, {"version", Types.BIGINT},
		{"comment_", Types.VARCHAR}, {"targetStateId", Types.BIGINT},
		{"targetStateInstanceId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"workflowContext", Types.CLOB}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("transitionInstanceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("transitionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("stateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("stateInstanceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("workflowId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("workflowInstanceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("version", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("comment_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("targetStateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("targetStateInstanceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("workflowContext", Types.CLOB);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ency_workflowtransitioninstance (uuid_ VARCHAR(75) null,transitionInstanceId LONG not null primary key,transitionId LONG,stateId LONG,stateInstanceId LONG,workflowId LONG,workflowInstanceId LONG,version LONG,comment_ VARCHAR(2000) null,targetStateId LONG,targetStateInstanceId LONG,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,workflowContext TEXT null)";

	public static final String TABLE_SQL_DROP =
		"drop table ency_workflowtransitioninstance";

	public static final String ORDER_BY_JPQL =
		" ORDER BY encyWorkflowTransitionInstance.transitionInstanceId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ency_workflowtransitioninstance.transitionInstanceId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long WORKFLOWINSTANCEID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TRANSITIONINSTANCEID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public EncyWorkflowTransitionInstanceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _transitionInstanceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTransitionInstanceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _transitionInstanceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EncyWorkflowTransitionInstance.class;
	}

	@Override
	public String getModelClassName() {
		return EncyWorkflowTransitionInstance.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<EncyWorkflowTransitionInstance, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<EncyWorkflowTransitionInstance, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EncyWorkflowTransitionInstance, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(EncyWorkflowTransitionInstance)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<EncyWorkflowTransitionInstance, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<EncyWorkflowTransitionInstance, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(EncyWorkflowTransitionInstance)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<EncyWorkflowTransitionInstance, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<EncyWorkflowTransitionInstance, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map
		<String, Function<EncyWorkflowTransitionInstance, Object>>
			_attributeGetterFunctions;
	private static final Map
		<String, BiConsumer<EncyWorkflowTransitionInstance, Object>>
			_attributeSetterBiConsumers;

	static {
		Map<String, Function<EncyWorkflowTransitionInstance, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String,
					 Function<EncyWorkflowTransitionInstance, Object>>();
		Map<String, BiConsumer<EncyWorkflowTransitionInstance, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<EncyWorkflowTransitionInstance, ?>>();

		attributeGetterFunctions.put(
			"uuid", EncyWorkflowTransitionInstance::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<EncyWorkflowTransitionInstance, String>)
				EncyWorkflowTransitionInstance::setUuid);
		attributeGetterFunctions.put(
			"transitionInstanceId",
			EncyWorkflowTransitionInstance::getTransitionInstanceId);
		attributeSetterBiConsumers.put(
			"transitionInstanceId",
			(BiConsumer<EncyWorkflowTransitionInstance, Long>)
				EncyWorkflowTransitionInstance::setTransitionInstanceId);
		attributeGetterFunctions.put(
			"transitionId", EncyWorkflowTransitionInstance::getTransitionId);
		attributeSetterBiConsumers.put(
			"transitionId",
			(BiConsumer<EncyWorkflowTransitionInstance, Long>)
				EncyWorkflowTransitionInstance::setTransitionId);
		attributeGetterFunctions.put(
			"stateId", EncyWorkflowTransitionInstance::getStateId);
		attributeSetterBiConsumers.put(
			"stateId",
			(BiConsumer<EncyWorkflowTransitionInstance, Long>)
				EncyWorkflowTransitionInstance::setStateId);
		attributeGetterFunctions.put(
			"stateInstanceId",
			EncyWorkflowTransitionInstance::getStateInstanceId);
		attributeSetterBiConsumers.put(
			"stateInstanceId",
			(BiConsumer<EncyWorkflowTransitionInstance, Long>)
				EncyWorkflowTransitionInstance::setStateInstanceId);
		attributeGetterFunctions.put(
			"workflowId", EncyWorkflowTransitionInstance::getWorkflowId);
		attributeSetterBiConsumers.put(
			"workflowId",
			(BiConsumer<EncyWorkflowTransitionInstance, Long>)
				EncyWorkflowTransitionInstance::setWorkflowId);
		attributeGetterFunctions.put(
			"workflowInstanceId",
			EncyWorkflowTransitionInstance::getWorkflowInstanceId);
		attributeSetterBiConsumers.put(
			"workflowInstanceId",
			(BiConsumer<EncyWorkflowTransitionInstance, Long>)
				EncyWorkflowTransitionInstance::setWorkflowInstanceId);
		attributeGetterFunctions.put(
			"version", EncyWorkflowTransitionInstance::getVersion);
		attributeSetterBiConsumers.put(
			"version",
			(BiConsumer<EncyWorkflowTransitionInstance, Long>)
				EncyWorkflowTransitionInstance::setVersion);
		attributeGetterFunctions.put(
			"comment", EncyWorkflowTransitionInstance::getComment);
		attributeSetterBiConsumers.put(
			"comment",
			(BiConsumer<EncyWorkflowTransitionInstance, String>)
				EncyWorkflowTransitionInstance::setComment);
		attributeGetterFunctions.put(
			"targetStateId", EncyWorkflowTransitionInstance::getTargetStateId);
		attributeSetterBiConsumers.put(
			"targetStateId",
			(BiConsumer<EncyWorkflowTransitionInstance, Long>)
				EncyWorkflowTransitionInstance::setTargetStateId);
		attributeGetterFunctions.put(
			"targetStateInstanceId",
			EncyWorkflowTransitionInstance::getTargetStateInstanceId);
		attributeSetterBiConsumers.put(
			"targetStateInstanceId",
			(BiConsumer<EncyWorkflowTransitionInstance, Long>)
				EncyWorkflowTransitionInstance::setTargetStateInstanceId);
		attributeGetterFunctions.put(
			"groupId", EncyWorkflowTransitionInstance::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<EncyWorkflowTransitionInstance, Long>)
				EncyWorkflowTransitionInstance::setGroupId);
		attributeGetterFunctions.put(
			"companyId", EncyWorkflowTransitionInstance::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<EncyWorkflowTransitionInstance, Long>)
				EncyWorkflowTransitionInstance::setCompanyId);
		attributeGetterFunctions.put(
			"userId", EncyWorkflowTransitionInstance::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<EncyWorkflowTransitionInstance, Long>)
				EncyWorkflowTransitionInstance::setUserId);
		attributeGetterFunctions.put(
			"userName", EncyWorkflowTransitionInstance::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<EncyWorkflowTransitionInstance, String>)
				EncyWorkflowTransitionInstance::setUserName);
		attributeGetterFunctions.put(
			"createDate", EncyWorkflowTransitionInstance::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<EncyWorkflowTransitionInstance, Date>)
				EncyWorkflowTransitionInstance::setCreateDate);
		attributeGetterFunctions.put(
			"workflowContext",
			EncyWorkflowTransitionInstance::getWorkflowContext);
		attributeSetterBiConsumers.put(
			"workflowContext",
			(BiConsumer<EncyWorkflowTransitionInstance, String>)
				EncyWorkflowTransitionInstance::setWorkflowContext);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getTransitionInstanceId() {
		return _transitionInstanceId;
	}

	@Override
	public void setTransitionInstanceId(long transitionInstanceId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_transitionInstanceId = transitionInstanceId;
	}

	@Override
	public long getTransitionId() {
		return _transitionId;
	}

	@Override
	public void setTransitionId(long transitionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_transitionId = transitionId;
	}

	@Override
	public long getStateId() {
		return _stateId;
	}

	@Override
	public void setStateId(long stateId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stateId = stateId;
	}

	@Override
	public long getStateInstanceId() {
		return _stateInstanceId;
	}

	@Override
	public void setStateInstanceId(long stateInstanceId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stateInstanceId = stateInstanceId;
	}

	@Override
	public long getWorkflowId() {
		return _workflowId;
	}

	@Override
	public void setWorkflowId(long workflowId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_workflowId = workflowId;
	}

	@Override
	public long getWorkflowInstanceId() {
		return _workflowInstanceId;
	}

	@Override
	public void setWorkflowInstanceId(long workflowInstanceId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_workflowInstanceId = workflowInstanceId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalWorkflowInstanceId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("workflowInstanceId"));
	}

	@Override
	public long getVersion() {
		return _version;
	}

	@Override
	public void setVersion(long version) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_version = version;
	}

	@Override
	public String getComment() {
		if (_comment == null) {
			return "";
		}
		else {
			return _comment;
		}
	}

	@Override
	public void setComment(String comment) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_comment = comment;
	}

	@Override
	public long getTargetStateId() {
		return _targetStateId;
	}

	@Override
	public void setTargetStateId(long targetStateId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_targetStateId = targetStateId;
	}

	@Override
	public long getTargetStateInstanceId() {
		return _targetStateInstanceId;
	}

	@Override
	public void setTargetStateInstanceId(long targetStateInstanceId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_targetStateInstanceId = targetStateInstanceId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public String getWorkflowContext() {
		if (_workflowContext == null) {
			return "";
		}
		else {
			return _workflowContext;
		}
	}

	@Override
	public void setWorkflowContext(String workflowContext) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_workflowContext = workflowContext;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), EncyWorkflowTransitionInstance.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EncyWorkflowTransitionInstance toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, EncyWorkflowTransitionInstance>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EncyWorkflowTransitionInstanceImpl encyWorkflowTransitionInstanceImpl =
			new EncyWorkflowTransitionInstanceImpl();

		encyWorkflowTransitionInstanceImpl.setUuid(getUuid());
		encyWorkflowTransitionInstanceImpl.setTransitionInstanceId(
			getTransitionInstanceId());
		encyWorkflowTransitionInstanceImpl.setTransitionId(getTransitionId());
		encyWorkflowTransitionInstanceImpl.setStateId(getStateId());
		encyWorkflowTransitionInstanceImpl.setStateInstanceId(
			getStateInstanceId());
		encyWorkflowTransitionInstanceImpl.setWorkflowId(getWorkflowId());
		encyWorkflowTransitionInstanceImpl.setWorkflowInstanceId(
			getWorkflowInstanceId());
		encyWorkflowTransitionInstanceImpl.setVersion(getVersion());
		encyWorkflowTransitionInstanceImpl.setComment(getComment());
		encyWorkflowTransitionInstanceImpl.setTargetStateId(getTargetStateId());
		encyWorkflowTransitionInstanceImpl.setTargetStateInstanceId(
			getTargetStateInstanceId());
		encyWorkflowTransitionInstanceImpl.setGroupId(getGroupId());
		encyWorkflowTransitionInstanceImpl.setCompanyId(getCompanyId());
		encyWorkflowTransitionInstanceImpl.setUserId(getUserId());
		encyWorkflowTransitionInstanceImpl.setUserName(getUserName());
		encyWorkflowTransitionInstanceImpl.setCreateDate(getCreateDate());
		encyWorkflowTransitionInstanceImpl.setWorkflowContext(
			getWorkflowContext());

		encyWorkflowTransitionInstanceImpl.resetOriginalValues();

		return encyWorkflowTransitionInstanceImpl;
	}

	@Override
	public EncyWorkflowTransitionInstance cloneWithOriginalValues() {
		EncyWorkflowTransitionInstanceImpl encyWorkflowTransitionInstanceImpl =
			new EncyWorkflowTransitionInstanceImpl();

		encyWorkflowTransitionInstanceImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		encyWorkflowTransitionInstanceImpl.setTransitionInstanceId(
			this.<Long>getColumnOriginalValue("transitionInstanceId"));
		encyWorkflowTransitionInstanceImpl.setTransitionId(
			this.<Long>getColumnOriginalValue("transitionId"));
		encyWorkflowTransitionInstanceImpl.setStateId(
			this.<Long>getColumnOriginalValue("stateId"));
		encyWorkflowTransitionInstanceImpl.setStateInstanceId(
			this.<Long>getColumnOriginalValue("stateInstanceId"));
		encyWorkflowTransitionInstanceImpl.setWorkflowId(
			this.<Long>getColumnOriginalValue("workflowId"));
		encyWorkflowTransitionInstanceImpl.setWorkflowInstanceId(
			this.<Long>getColumnOriginalValue("workflowInstanceId"));
		encyWorkflowTransitionInstanceImpl.setVersion(
			this.<Long>getColumnOriginalValue("version"));
		encyWorkflowTransitionInstanceImpl.setComment(
			this.<String>getColumnOriginalValue("comment_"));
		encyWorkflowTransitionInstanceImpl.setTargetStateId(
			this.<Long>getColumnOriginalValue("targetStateId"));
		encyWorkflowTransitionInstanceImpl.setTargetStateInstanceId(
			this.<Long>getColumnOriginalValue("targetStateInstanceId"));
		encyWorkflowTransitionInstanceImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		encyWorkflowTransitionInstanceImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		encyWorkflowTransitionInstanceImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		encyWorkflowTransitionInstanceImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		encyWorkflowTransitionInstanceImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		encyWorkflowTransitionInstanceImpl.setWorkflowContext(
			this.<String>getColumnOriginalValue("workflowContext"));

		return encyWorkflowTransitionInstanceImpl;
	}

	@Override
	public int compareTo(
		EncyWorkflowTransitionInstance encyWorkflowTransitionInstance) {

		long primaryKey = encyWorkflowTransitionInstance.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof EncyWorkflowTransitionInstance)) {
			return false;
		}

		EncyWorkflowTransitionInstance encyWorkflowTransitionInstance =
			(EncyWorkflowTransitionInstance)object;

		long primaryKey = encyWorkflowTransitionInstance.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<EncyWorkflowTransitionInstance> toCacheModel() {
		EncyWorkflowTransitionInstanceCacheModel
			encyWorkflowTransitionInstanceCacheModel =
				new EncyWorkflowTransitionInstanceCacheModel();

		encyWorkflowTransitionInstanceCacheModel.uuid = getUuid();

		String uuid = encyWorkflowTransitionInstanceCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			encyWorkflowTransitionInstanceCacheModel.uuid = null;
		}

		encyWorkflowTransitionInstanceCacheModel.transitionInstanceId =
			getTransitionInstanceId();

		encyWorkflowTransitionInstanceCacheModel.transitionId =
			getTransitionId();

		encyWorkflowTransitionInstanceCacheModel.stateId = getStateId();

		encyWorkflowTransitionInstanceCacheModel.stateInstanceId =
			getStateInstanceId();

		encyWorkflowTransitionInstanceCacheModel.workflowId = getWorkflowId();

		encyWorkflowTransitionInstanceCacheModel.workflowInstanceId =
			getWorkflowInstanceId();

		encyWorkflowTransitionInstanceCacheModel.version = getVersion();

		encyWorkflowTransitionInstanceCacheModel.comment = getComment();

		String comment = encyWorkflowTransitionInstanceCacheModel.comment;

		if ((comment != null) && (comment.length() == 0)) {
			encyWorkflowTransitionInstanceCacheModel.comment = null;
		}

		encyWorkflowTransitionInstanceCacheModel.targetStateId =
			getTargetStateId();

		encyWorkflowTransitionInstanceCacheModel.targetStateInstanceId =
			getTargetStateInstanceId();

		encyWorkflowTransitionInstanceCacheModel.groupId = getGroupId();

		encyWorkflowTransitionInstanceCacheModel.companyId = getCompanyId();

		encyWorkflowTransitionInstanceCacheModel.userId = getUserId();

		encyWorkflowTransitionInstanceCacheModel.userName = getUserName();

		String userName = encyWorkflowTransitionInstanceCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			encyWorkflowTransitionInstanceCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			encyWorkflowTransitionInstanceCacheModel.createDate =
				createDate.getTime();
		}
		else {
			encyWorkflowTransitionInstanceCacheModel.createDate =
				Long.MIN_VALUE;
		}

		encyWorkflowTransitionInstanceCacheModel.workflowContext =
			getWorkflowContext();

		String workflowContext =
			encyWorkflowTransitionInstanceCacheModel.workflowContext;

		if ((workflowContext != null) && (workflowContext.length() == 0)) {
			encyWorkflowTransitionInstanceCacheModel.workflowContext = null;
		}

		return encyWorkflowTransitionInstanceCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<EncyWorkflowTransitionInstance, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<EncyWorkflowTransitionInstance, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EncyWorkflowTransitionInstance, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(EncyWorkflowTransitionInstance)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<EncyWorkflowTransitionInstance, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<EncyWorkflowTransitionInstance, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EncyWorkflowTransitionInstance, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply(
					(EncyWorkflowTransitionInstance)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, EncyWorkflowTransitionInstance>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						EncyWorkflowTransitionInstance.class,
						ModelWrapper.class);

	}

	private String _uuid;
	private long _transitionInstanceId;
	private long _transitionId;
	private long _stateId;
	private long _stateInstanceId;
	private long _workflowId;
	private long _workflowInstanceId;
	private long _version;
	private String _comment;
	private long _targetStateId;
	private long _targetStateInstanceId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private String _workflowContext;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<EncyWorkflowTransitionInstance, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((EncyWorkflowTransitionInstance)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"transitionInstanceId", _transitionInstanceId);
		_columnOriginalValues.put("transitionId", _transitionId);
		_columnOriginalValues.put("stateId", _stateId);
		_columnOriginalValues.put("stateInstanceId", _stateInstanceId);
		_columnOriginalValues.put("workflowId", _workflowId);
		_columnOriginalValues.put("workflowInstanceId", _workflowInstanceId);
		_columnOriginalValues.put("version", _version);
		_columnOriginalValues.put("comment_", _comment);
		_columnOriginalValues.put("targetStateId", _targetStateId);
		_columnOriginalValues.put(
			"targetStateInstanceId", _targetStateInstanceId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("workflowContext", _workflowContext);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("comment_", "comment");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("transitionInstanceId", 2L);

		columnBitmasks.put("transitionId", 4L);

		columnBitmasks.put("stateId", 8L);

		columnBitmasks.put("stateInstanceId", 16L);

		columnBitmasks.put("workflowId", 32L);

		columnBitmasks.put("workflowInstanceId", 64L);

		columnBitmasks.put("version", 128L);

		columnBitmasks.put("comment_", 256L);

		columnBitmasks.put("targetStateId", 512L);

		columnBitmasks.put("targetStateInstanceId", 1024L);

		columnBitmasks.put("groupId", 2048L);

		columnBitmasks.put("companyId", 4096L);

		columnBitmasks.put("userId", 8192L);

		columnBitmasks.put("userName", 16384L);

		columnBitmasks.put("createDate", 32768L);

		columnBitmasks.put("workflowContext", 65536L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private EncyWorkflowTransitionInstance _escapedModel;

}