/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package cz.csob.ency.modules.e3.entry.service.base;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.sql.dsl.query.DSLQuery;
import com.liferay.portal.aop.AopService;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalService;
import com.liferay.portal.kernel.service.persistence.BasePersistence;
import com.liferay.portal.kernel.service.version.VersionService;
import com.liferay.portal.kernel.service.version.VersionServiceListener;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;

import cz.csob.ency.modules.e3.entry.model.E3Entry;
import cz.csob.ency.modules.e3.entry.model.E3EntryVersion;
import cz.csob.ency.modules.e3.entry.service.E3EntryLocalService;
import cz.csob.ency.modules.e3.entry.service.E3EntryLocalServiceUtil;
import cz.csob.ency.modules.e3.entry.service.persistence.E3EntryPersistence;
import cz.csob.ency.modules.e3.entry.service.persistence.E3EntryVersionPersistence;

import java.io.Serializable;

import java.lang.reflect.Field;

import java.util.Collections;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

import javax.sql.DataSource;

import org.osgi.service.component.annotations.Deactivate;
import org.osgi.service.component.annotations.Reference;

/**
 * Provides the base implementation for the e3 entry local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link cz.csob.ency.modules.e3.entry.service.impl.E3EntryLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see cz.csob.ency.modules.e3.entry.service.impl.E3EntryLocalServiceImpl
 * @generated
 */
public abstract class E3EntryLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements AopService, E3EntryLocalService, IdentifiableOSGiService,
			   VersionService<E3Entry, E3EntryVersion> {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Use <code>E3EntryLocalService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>E3EntryLocalServiceUtil</code>.
	 */

	/**
	 * Adds the e3 entry to the database. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect E3EntryLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param e3Entry the e3 entry
	 * @return the e3 entry that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public E3Entry addE3Entry(E3Entry e3Entry) {
		e3Entry.setNew(true);

		return e3EntryPersistence.update(e3Entry);
	}

	/**
	 * Creates a new e3 entry. Does not add the e3 entry to the database.
	 *
	 * @return the new e3 entry
	 */
	@Override
	@Transactional(enabled = false)
	public E3Entry create() {
		long primaryKey = counterLocalService.increment(
			E3Entry.class.getName());

		E3Entry draftE3Entry = e3EntryPersistence.create(primaryKey);

		draftE3Entry.setHeadId(primaryKey);

		return draftE3Entry;
	}

	/**
	 * Deletes the e3 entry with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect E3EntryLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param entryId the primary key of the e3 entry
	 * @return the e3 entry that was removed
	 * @throws PortalException if a e3 entry with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public E3Entry deleteE3Entry(long entryId) throws PortalException {
		E3Entry e3Entry = e3EntryPersistence.fetchByPrimaryKey(entryId);

		if (e3Entry != null) {
			delete(e3Entry);
		}

		return e3Entry;
	}

	/**
	 * Deletes the e3 entry from the database. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect E3EntryLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param e3Entry the e3 entry
	 * @return the e3 entry that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public E3Entry deleteE3Entry(E3Entry e3Entry) {
		try {
			delete(e3Entry);

			return e3Entry;
		}
		catch (PortalException portalException) {
			throw new SystemException(portalException);
		}
	}

	@Override
	public <T> T dslQuery(DSLQuery dslQuery) {
		return e3EntryPersistence.dslQuery(dslQuery);
	}

	@Override
	public int dslQueryCount(DSLQuery dslQuery) {
		Long count = dslQuery(dslQuery);

		return count.intValue();
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(
			E3Entry.class, clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return e3EntryPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>cz.csob.ency.modules.e3.entry.model.impl.E3EntryModelImpl</code>.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end) {

		return e3EntryPersistence.findWithDynamicQuery(
			dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>cz.csob.ency.modules.e3.entry.model.impl.E3EntryModelImpl</code>.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator<T> orderByComparator) {

		return e3EntryPersistence.findWithDynamicQuery(
			dynamicQuery, start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return e3EntryPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(
		DynamicQuery dynamicQuery, Projection projection) {

		return e3EntryPersistence.countWithDynamicQuery(
			dynamicQuery, projection);
	}

	@Override
	public E3Entry fetchE3Entry(long entryId) {
		return e3EntryPersistence.fetchByPrimaryKey(entryId);
	}

	/**
	 * Returns the e3 entry with the primary key.
	 *
	 * @param entryId the primary key of the e3 entry
	 * @return the e3 entry
	 * @throws PortalException if a e3 entry with the primary key could not be found
	 */
	@Override
	public E3Entry getE3Entry(long entryId) throws PortalException {
		return e3EntryPersistence.findByPrimaryKey(entryId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery =
			new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(e3EntryLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(E3Entry.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("entryId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery
		getIndexableActionableDynamicQuery() {

		IndexableActionableDynamicQuery indexableActionableDynamicQuery =
			new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(
			e3EntryLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(E3Entry.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("entryId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {

		actionableDynamicQuery.setBaseLocalService(e3EntryLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(E3Entry.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("entryId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {

		final ExportActionableDynamicQuery exportActionableDynamicQuery =
			new ExportActionableDynamicQuery() {

				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary =
						portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(
						stagedModelType, modelAdditionCount);

					long modelDeletionCount =
						ExportImportHelperUtil.getModelDeletionCount(
							portletDataContext, stagedModelType);

					manifestSummary.addModelDeletionCount(
						stagedModelType, modelDeletionCount);

					return modelAdditionCount;
				}

			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(
			new ActionableDynamicQuery.AddCriteriaMethod() {

				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(
						dynamicQuery, "modifiedDate");
				}

			});

		exportActionableDynamicQuery.setCompanyId(
			portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(
			new ActionableDynamicQuery.PerformActionMethod<E3Entry>() {

				@Override
				public void performAction(E3Entry e3Entry)
					throws PortalException {

					StagedModelDataHandlerUtil.exportStagedModel(
						portletDataContext, e3Entry);
				}

			});
		exportActionableDynamicQuery.setStagedModelType(
			new StagedModelType(
				PortalUtil.getClassNameId(E3Entry.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel createPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return e3EntryPersistence.create(((Long)primaryKeyObj).longValue());
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {

		return e3EntryLocalService.deleteE3Entry((E3Entry)persistedModel);
	}

	@Override
	public BasePersistence<E3Entry> getBasePersistence() {
		return e3EntryPersistence;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return e3EntryPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the e3 entries.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>cz.csob.ency.modules.e3.entry.model.impl.E3EntryModelImpl</code>.
	 * </p>
	 *
	 * @param start the lower bound of the range of e3 entries
	 * @param end the upper bound of the range of e3 entries (not inclusive)
	 * @return the range of e3 entries
	 */
	@Override
	public List<E3Entry> getE3Entries(int start, int end) {
		return e3EntryPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of e3 entries.
	 *
	 * @return the number of e3 entries
	 */
	@Override
	public int getE3EntriesCount() {
		return e3EntryPersistence.countAll();
	}

	/**
	 * Updates the e3 entry in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect E3EntryLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param e3Entry the e3 entry
	 * @return the e3 entry that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public E3Entry updateE3Entry(E3Entry draftE3Entry) throws PortalException {
		return updateDraft(draftE3Entry);
	}

	@Deactivate
	protected void deactivate() {
		_setLocalServiceUtilService(null);
	}

	@Override
	public Class<?>[] getAopInterfaces() {
		return new Class<?>[] {
			E3EntryLocalService.class, IdentifiableOSGiService.class,
			PersistedModelLocalService.class
		};
	}

	@Override
	public void setAopProxy(Object aopProxy) {
		e3EntryLocalService = (E3EntryLocalService)aopProxy;

		_setLocalServiceUtilService(e3EntryLocalService);
	}

	@Indexable(type = IndexableType.REINDEX)
	@Override
	public E3Entry checkout(E3Entry publishedE3Entry, int version)
		throws PortalException {

		if (!publishedE3Entry.isHead()) {
			throw new IllegalArgumentException(
				"Unable to checkout with unpublished changes " +
					publishedE3Entry.getHeadId());
		}

		E3Entry draftE3Entry = e3EntryPersistence.fetchByHeadId(
			publishedE3Entry.getPrimaryKey());

		if (draftE3Entry != null) {
			throw new IllegalArgumentException(
				"Unable to checkout with unpublished changes " +
					publishedE3Entry.getPrimaryKey());
		}

		E3EntryVersion e3EntryVersion = getVersion(publishedE3Entry, version);

		draftE3Entry = _createDraft(publishedE3Entry);

		e3EntryVersion.populateVersionedModel(draftE3Entry);

		draftE3Entry = e3EntryPersistence.update(draftE3Entry);

		for (VersionServiceListener<E3Entry, E3EntryVersion>
				versionServiceListener : _versionServiceListeners) {

			versionServiceListener.afterCheckout(draftE3Entry, version);
		}

		return draftE3Entry;
	}

	@Indexable(type = IndexableType.DELETE)
	@Override
	public E3Entry delete(E3Entry publishedE3Entry) throws PortalException {
		if (!publishedE3Entry.isHead()) {
			throw new IllegalArgumentException(
				"E3Entry is a draft " + publishedE3Entry.getPrimaryKey());
		}

		E3Entry draftE3Entry = e3EntryPersistence.fetchByHeadId(
			publishedE3Entry.getPrimaryKey());

		if (draftE3Entry != null) {
			deleteDraft(draftE3Entry);
		}

		for (E3EntryVersion e3EntryVersion : getVersions(publishedE3Entry)) {
			e3EntryVersionPersistence.remove(e3EntryVersion);
		}

		e3EntryPersistence.remove(publishedE3Entry);

		for (VersionServiceListener<E3Entry, E3EntryVersion>
				versionServiceListener : _versionServiceListeners) {

			versionServiceListener.afterDelete(publishedE3Entry);
		}

		return publishedE3Entry;
	}

	@Indexable(type = IndexableType.DELETE)
	@Override
	public E3Entry deleteDraft(E3Entry draftE3Entry) throws PortalException {
		if (draftE3Entry.isHead()) {
			throw new IllegalArgumentException(
				"E3Entry is not a draft " + draftE3Entry.getPrimaryKey());
		}

		e3EntryPersistence.remove(draftE3Entry);

		for (VersionServiceListener<E3Entry, E3EntryVersion>
				versionServiceListener : _versionServiceListeners) {

			versionServiceListener.afterDeleteDraft(draftE3Entry);
		}

		return draftE3Entry;
	}

	@Override
	public E3EntryVersion deleteVersion(E3EntryVersion e3EntryVersion)
		throws PortalException {

		E3EntryVersion latestE3EntryVersion =
			e3EntryVersionPersistence.findByEntryId_First(
				e3EntryVersion.getVersionedModelId(), null);

		if (latestE3EntryVersion.getVersion() == e3EntryVersion.getVersion()) {
			throw new IllegalArgumentException(
				"Unable to delete latest version " +
					e3EntryVersion.getVersion());
		}

		e3EntryVersion = e3EntryVersionPersistence.remove(e3EntryVersion);

		for (VersionServiceListener<E3Entry, E3EntryVersion>
				versionServiceListener : _versionServiceListeners) {

			versionServiceListener.afterDeleteVersion(e3EntryVersion);
		}

		return e3EntryVersion;
	}

	@Override
	public E3Entry fetchDraft(E3Entry e3Entry) {
		if (e3Entry.isHead()) {
			return e3EntryPersistence.fetchByHeadId(e3Entry.getPrimaryKey());
		}

		return e3Entry;
	}

	@Override
	public E3Entry fetchDraft(long primaryKey) {
		return e3EntryPersistence.fetchByHeadId(primaryKey);
	}

	@Override
	public E3EntryVersion fetchLatestVersion(E3Entry e3Entry) {
		long primaryKey = e3Entry.getHeadId();

		if (e3Entry.isHead()) {
			primaryKey = e3Entry.getPrimaryKey();
		}

		return e3EntryVersionPersistence.fetchByEntryId_First(primaryKey, null);
	}

	@Override
	public E3Entry fetchPublished(E3Entry e3Entry) {
		if (e3Entry.isHead()) {
			return e3Entry;
		}

		if (e3Entry.getHeadId() == e3Entry.getPrimaryKey()) {
			return null;
		}

		return e3EntryPersistence.fetchByPrimaryKey(e3Entry.getHeadId());
	}

	@Override
	public E3Entry fetchPublished(long primaryKey) {
		E3Entry e3Entry = e3EntryPersistence.fetchByPrimaryKey(primaryKey);

		if ((e3Entry == null) ||
			(e3Entry.getHeadId() == e3Entry.getPrimaryKey())) {

			return null;
		}

		return e3Entry;
	}

	@Override
	public E3Entry getDraft(E3Entry e3Entry) throws PortalException {
		if (!e3Entry.isHead()) {
			return e3Entry;
		}

		E3Entry draftE3Entry = e3EntryPersistence.fetchByHeadId(
			e3Entry.getPrimaryKey());

		if (draftE3Entry == null) {
			draftE3Entry = e3EntryLocalService.updateDraft(
				_createDraft(e3Entry));
		}

		return draftE3Entry;
	}

	@Override
	public E3Entry getDraft(long primaryKey) throws PortalException {
		E3Entry draftE3Entry = e3EntryPersistence.fetchByHeadId(primaryKey);

		if (draftE3Entry == null) {
			E3Entry e3Entry = e3EntryPersistence.findByPrimaryKey(primaryKey);

			draftE3Entry = e3EntryLocalService.updateDraft(
				_createDraft(e3Entry));
		}

		return draftE3Entry;
	}

	@Override
	public E3EntryVersion getVersion(E3Entry e3Entry, int version)
		throws PortalException {

		long primaryKey = e3Entry.getHeadId();

		if (e3Entry.isHead()) {
			primaryKey = e3Entry.getPrimaryKey();
		}

		return e3EntryVersionPersistence.findByEntryId_Version(
			primaryKey, version);
	}

	@Override
	public List<E3EntryVersion> getVersions(E3Entry e3Entry) {
		long primaryKey = e3Entry.getPrimaryKey();

		if (!e3Entry.isHead()) {
			if (e3Entry.getHeadId() == e3Entry.getPrimaryKey()) {
				return Collections.emptyList();
			}

			primaryKey = e3Entry.getHeadId();
		}

		return e3EntryVersionPersistence.findByEntryId(primaryKey);
	}

	@Indexable(type = IndexableType.REINDEX)
	@Override
	public E3Entry publishDraft(E3Entry draftE3Entry) throws PortalException {
		if (draftE3Entry.isHead()) {
			throw new IllegalArgumentException(
				"Can only publish drafts " + draftE3Entry.getPrimaryKey());
		}

		E3Entry headE3Entry = null;

		int version = 1;

		if (draftE3Entry.getHeadId() == draftE3Entry.getPrimaryKey()) {
			headE3Entry = create();

			draftE3Entry.setHeadId(headE3Entry.getPrimaryKey());
		}
		else {
			headE3Entry = e3EntryPersistence.findByPrimaryKey(
				draftE3Entry.getHeadId());

			E3EntryVersion latestE3EntryVersion =
				e3EntryVersionPersistence.findByEntryId_First(
					draftE3Entry.getHeadId(), null);

			version = latestE3EntryVersion.getVersion() + 1;
		}

		E3EntryVersion e3EntryVersion = e3EntryVersionPersistence.create(
			counterLocalService.increment(E3EntryVersion.class.getName()));

		e3EntryVersion.setVersion(version);
		e3EntryVersion.setVersionedModelId(headE3Entry.getPrimaryKey());

		draftE3Entry.populateVersionModel(e3EntryVersion);

		e3EntryVersionPersistence.update(e3EntryVersion);

		e3EntryVersion.populateVersionedModel(headE3Entry);

		headE3Entry.setHeadId(-headE3Entry.getPrimaryKey());

		headE3Entry = e3EntryPersistence.update(headE3Entry);

		for (VersionServiceListener<E3Entry, E3EntryVersion>
				versionServiceListener : _versionServiceListeners) {

			versionServiceListener.afterPublishDraft(draftE3Entry, version);
		}

		deleteDraft(draftE3Entry);

		return headE3Entry;
	}

	@Override
	public void registerListener(
		VersionServiceListener<E3Entry, E3EntryVersion>
			versionServiceListener) {

		_versionServiceListeners.add(versionServiceListener);
	}

	@Override
	public void unregisterListener(
		VersionServiceListener<E3Entry, E3EntryVersion>
			versionServiceListener) {

		_versionServiceListeners.remove(versionServiceListener);
	}

	@Indexable(type = IndexableType.REINDEX)
	@Override
	public E3Entry updateDraft(E3Entry draftE3Entry) throws PortalException {
		if (draftE3Entry.isHead()) {
			throw new IllegalArgumentException(
				"Can only update draft entries " +
					draftE3Entry.getPrimaryKey());
		}

		E3Entry previousE3Entry = e3EntryPersistence.fetchByPrimaryKey(
			draftE3Entry.getPrimaryKey());

		draftE3Entry = e3EntryPersistence.update(draftE3Entry);

		if (previousE3Entry == null) {
			for (VersionServiceListener<E3Entry, E3EntryVersion>
					versionServiceListener : _versionServiceListeners) {

				versionServiceListener.afterCreateDraft(draftE3Entry);
			}
		}
		else {
			for (VersionServiceListener<E3Entry, E3EntryVersion>
					versionServiceListener : _versionServiceListeners) {

				versionServiceListener.afterUpdateDraft(draftE3Entry);
			}
		}

		return draftE3Entry;
	}

	private E3Entry _createDraft(E3Entry publishedE3Entry)
		throws PortalException {

		E3Entry draftE3Entry = create();

		draftE3Entry.setUuid(publishedE3Entry.getUuid());
		draftE3Entry.setHeadId(publishedE3Entry.getPrimaryKey());
		draftE3Entry.setGroupId(publishedE3Entry.getGroupId());
		draftE3Entry.setCompanyId(publishedE3Entry.getCompanyId());
		draftE3Entry.setUserId(publishedE3Entry.getUserId());
		draftE3Entry.setUserName(publishedE3Entry.getUserName());
		draftE3Entry.setCreateDate(publishedE3Entry.getCreateDate());
		draftE3Entry.setModifiedDate(publishedE3Entry.getModifiedDate());
		draftE3Entry.setAuthorId(publishedE3Entry.getAuthorId());
		draftE3Entry.setAuthorName(publishedE3Entry.getAuthorName());
		draftE3Entry.setXid(publishedE3Entry.getXid());
		draftE3Entry.setName(publishedE3Entry.getName());
		draftE3Entry.setAppClass(publishedE3Entry.getAppClass());
		draftE3Entry.setParentId(publishedE3Entry.getParentId());
		draftE3Entry.setParentField(publishedE3Entry.getParentField());
		draftE3Entry.setValues(publishedE3Entry.getValues());
		draftE3Entry.setStatus(publishedE3Entry.getStatus());

		draftE3Entry.resetOriginalValues();

		return draftE3Entry;
	}

	private final Set<VersionServiceListener<E3Entry, E3EntryVersion>>
		_versionServiceListeners = Collections.newSetFromMap(
			new ConcurrentHashMap
				<VersionServiceListener<E3Entry, E3EntryVersion>, Boolean>());

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return E3EntryLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return E3Entry.class;
	}

	protected String getModelClassName() {
		return E3Entry.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = e3EntryPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(
				dataSource, sql);

			sqlUpdate.update();
		}
		catch (Exception exception) {
			throw new SystemException(exception);
		}
	}

	private void _setLocalServiceUtilService(
		E3EntryLocalService e3EntryLocalService) {

		try {
			Field field = E3EntryLocalServiceUtil.class.getDeclaredField(
				"_service");

			field.setAccessible(true);

			field.set(null, e3EntryLocalService);
		}
		catch (ReflectiveOperationException reflectiveOperationException) {
			throw new RuntimeException(reflectiveOperationException);
		}
	}

	protected E3EntryLocalService e3EntryLocalService;

	@Reference
	protected E3EntryPersistence e3EntryPersistence;

	@Reference
	protected com.liferay.counter.kernel.service.CounterLocalService
		counterLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.CompanyLocalService
		companyLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.GroupLocalService
		groupLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.ImageLocalService
		imageLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.OrganizationLocalService
		organizationLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.ResourceLocalService
		resourceLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.UserLocalService
		userLocalService;

	@Reference
	protected com.liferay.asset.kernel.service.AssetEntryLocalService
		assetEntryLocalService;

	@Reference
	protected com.liferay.asset.kernel.service.AssetLinkLocalService
		assetLinkLocalService;

	@Reference
	protected com.liferay.ratings.kernel.service.RatingsStatsLocalService
		ratingsStatsLocalService;

	@Reference
	protected E3EntryVersionPersistence e3EntryVersionPersistence;

}